<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ConfigMap</title>
    <url>/blknjyty.github.io/2022/07/25/ConfigMap/</url>
    <content><![CDATA[<h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><blockquote>
<p> <strong>许多应用程序会从配置文件、命令行参数或环境变量中读取配 置信息</strong> , <strong>ConﬁgMap</strong>提供了这么一个 <strong>向容器中注入配置信息的机制</strong>， <strong>ConﬁgMap 可以被用来保存单个属性，也 可以用来保存整个配置文件或者 JSON 二进制大对象</strong>  </p>
</blockquote>
<span id="more"></span>

<h3 id="怎么创建ConfigMap"><a href="#怎么创建ConfigMap" class="headerlink" title="怎么创建ConfigMap:"></a>怎么创建ConfigMap:</h3><h4 id="指定目录创建"><a href="#指定目录创建" class="headerlink" title="指定目录创建"></a>指定目录创建</h4><p>比如 docs/user-guide/configmap/kubectl/ 目录下有两个文件，game.property和ui.property，里面数据如下</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658219586753.png" alt="1658219586753"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658219586753.png" class title="哈哈">

<p>则我们可以使用如上命令创建名为game-config的 ConﬁgMap ，– from-file 指定在目录下的所有文件都会被用在 ConﬁgMap 里面创建一个键值对，键的名字就是文件名，值就 是文件的内容 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create configmap game-config --from-file=docs/user-guide/configmap/kubectl/</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658219695675.png" alt="1658219695675"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658219695675.png" class title="哈哈哈">

<h4 id="使用文件创建"><a href="#使用文件创建" class="headerlink" title="使用文件创建"></a>使用文件创建</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create configmap game-config-2 --from-file=docs/user-guide/configmap/kubectl/game.properties </span><br><span class="line"></span><br><span class="line">//from-file 这个参数可以使用多次，你可以使用两次分别指定上个实例中的那两个配置文件，效果就跟指定整个 目录是一样的</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658219834317.png" alt="1658219834317"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658219834317.png" class title="看看">

<h4 id="使用字面创建"><a href="#使用字面创建" class="headerlink" title="使用字面创建"></a>使用字面创建</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create configmap special-config --from-literal=special.how=very --from-literal=special.type=charm</span><br><span class="line">$ kubectl get configmaps special-config -o yaml</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658219920146.png" alt="1658219920146"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658219920146.png" class title="恩基恩">

<h3 id="怎么使用ConfigMap"><a href="#怎么使用ConfigMap" class="headerlink" title="怎么使用ConfigMap"></a>怎么使用ConfigMap</h3><h4 id="代替环境变量"><a href="#代替环境变量" class="headerlink" title="代替环境变量"></a>代替环境变量</h4><p>假设创建好的ConfigMap信息如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">special.how:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">special.type:</span> <span class="string">charm</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">env-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">INFO</span></span><br></pre></td></tr></table></figure>

<p>则创建pod时指定环境变量可以这样写</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dapi-test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;env&quot;</span> ]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_LEVEL_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.how</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_TYPE_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.type</span></span><br><span class="line">      <span class="attr">envFrom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">env-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<p>查看pod启动日志就会发现</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658220226262.png" alt="1658220226262"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658220226262.png" class title="那你">

<h4 id="配置命令行参数"><a href="#配置命令行参数" class="headerlink" title="配置命令行参数"></a>配置命令行参数</h4><p>假设创建好的ConfigMap信息如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">special.how:</span> <span class="string">very</span></span><br><span class="line">  <span class="attr">special.type:</span> <span class="string">charm</span></span><br></pre></td></tr></table></figure>

<p>创建pod</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dapi-test-pod66</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)&quot;</span> ]</span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_LEVEL_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.how</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SPECIAL_TYPE_KEY</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">special.type</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<h4 id="数据卷中使用"><a href="#数据卷中使用" class="headerlink" title="数据卷中使用"></a>数据卷中使用</h4><p>假设创建好的ConfigMap信息如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: special-config</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  special.how: very</span><br><span class="line">  special.type: charm</span><br></pre></td></tr></table></figure>

<p> 在数据卷里面使用这个 ConﬁgMap，有不同的选项。基本的就是将文件填入数据卷，在这个文件中，键就是文 件名，键值就是文件内容 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dapi-test-pod77</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 600s&quot;</span> ]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">special-config</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看卷中的内容，有文件名为special.how和special.type，文件里面的值就是value</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658220456568.png" alt="1658220456568"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658220456568.png" class title="哎哎哎啊">

<h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">log-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">log_level:</span> <span class="string">INFO</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">my-nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">log-config</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>进入容器内部，可以看到/etc/config下面有名为log_level的文件</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658221065654.png" alt="1658221065654"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658221065654.png" class title="呜呜">

<p>当我们修改ComfigMap时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl edit configmap log-config</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658221202553.png" alt="1658221202553"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658221202553.png" class title="呜呜呜与">

<p>重新进入容器，查看数据卷</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/ConfigMap/gitee\Blog\source_posts\ConfigMap\1658221233950.png" alt="1658221233950"></p>
<img src="/blknjyty.github.io/2022/07/25/ConfigMap/1658221233950.png" class title="嫩恩恩">

<p>此时是不是相关pod的自动更新的，可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl patch deployment my-nginx --patch &#x27;&#123;&quot;spec&quot;: &#123;&quot;template&quot;: &#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;: </span><br><span class="line">&#123;&quot;version/config&quot;: &quot;20190411&quot; &#125;&#125;&#125;&#125;&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <strong>这个例子里我们在 .spec.template.metadata.annotations 中添加 version/config ，每次通过修改 version/config 来触发滚动更新</strong> 。</p>
<p> <strong>使用该 ConﬁgMap 挂载的 Env 不会同步更新</strong> ， <strong>使用该 ConﬁgMap 挂载的 Volume 中的数据需要一段时间（实测大概10秒）才能同步更新</strong>  。</p>
<p><a href="https://blog.csdn.net/heian_99/category_9652886.html">参考文档</a></p>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Pod</title>
    <url>/blknjyty.github.io/2022/07/25/Pod/</url>
    <content><![CDATA[<h4 id="Pod文件基础信息"><a href="#Pod文件基础信息" class="headerlink" title="Pod文件基础信息"></a>Pod文件基础信息</h4><blockquote>
<p><strong>Pod 可以被理解成一群可以共享网络、存储和计算资源的容器化服务的集合</strong>, 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。</p>
</blockquote>
<span id="more"></span>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">group/apiversion</span>  <span class="comment"># 如果没有给定 group 名称，那么默认为 core，可以使用 kubectl api-versions  获取当前 k8s 版本上所有的 apiVersion 版本信息( 每个版本可能不同 )</span></span><br><span class="line"><span class="attr">kind:</span>       <span class="comment">#资源类别</span></span><br><span class="line"><span class="string">metadata：</span>  <span class="comment">#资源元数据</span></span><br><span class="line">   <span class="string">name</span></span><br><span class="line">   <span class="string">namespace</span></span><br><span class="line">   <span class="string">lables</span></span><br><span class="line">   <span class="string">annotations</span>   <span class="comment"># 主要目的是方便用户阅读查找</span></span><br><span class="line"><span class="attr">spec:</span> <span class="comment"># 期望的状态（disired state）</span></span><br><span class="line"><span class="string">status：#</span> <span class="string">当前状态，本字段有</span> <span class="string">Kubernetes</span> <span class="string">自身维护，用户不能去定义</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/heian_99/article/details/104167639">参考文章</a></p>
<h4 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h4><h5 id="获取所有版本-apiversion-信息"><a href="#获取所有版本-apiversion-信息" class="headerlink" title="获取所有版本 apiversion 信息"></a>获取所有版本 apiversion 信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl api-versions</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658142374026.png" alt="1658142374026"></p>
 <img src="/blknjyty.github.io/2022/07/25/Pod/1658142374026.png" class title="都能拿到">

<p>获取资源的 apiVersion 版本信息 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl explain pod </span><br><span class="line">kubectl explain Ingress</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658142464859.png" alt="1658142464859"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/1658142464859.png" class title="是南宁市">

<h5 id="获取pod详细信息"><a href="#获取pod详细信息" class="headerlink" title="获取pod详细信息"></a>获取pod详细信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl describe pod myapp-pod</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\20200203205310698.png" alt="20200203205310698"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/20200203205310698.png" class title="是男是女是">

<h5 id="查看Pod的日志"><a href="#查看Pod的日志" class="headerlink" title="查看Pod的日志"></a><strong>查看Pod的日志</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl log myapp-pod -c test</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658142617705.png" alt="1658142617705"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/1658142617705.png" class title="偶偶">

<h5 id="删除pod"><a href="#删除pod" class="headerlink" title="删除pod"></a>删除pod</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete pod myapp-pod</span><br></pre></td></tr></table></figure>

<h4 id="init容器"><a href="#init容器" class="headerlink" title="init容器"></a>init容器</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658143161136.png" alt="1658143161136"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/1658143161136.png" class title="噗噗">

<p> Pod 能够具有多个容器，应用运行在容器里面，但是它也可能有一个或多个先于应用容器启动的 Init容器。</p>
<h5 id="作用是什么？"><a href="#作用是什么？" class="headerlink" title="作用是什么？"></a>作用是什么？</h5><blockquote>
<ol>
<li>一个工具镜像可以放在init容器中，更加安全</li>
<li>Init容器和应用容器使用不同文件系统视图，具有更高级的权限</li>
<li>提前于应用程序启动，只有其启动成功，应用容器才能启动。故可以作为一种方法阻塞或延迟应用容器启动</li>
</ol>
</blockquote>
<h5 id="文件样式"><a href="#文件样式" class="headerlink" title="文件样式"></a>文件样式</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-pod</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo The app is running! &amp;&amp; sleep 3600&#x27;</span>]</span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-myservice</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until nslookup myservice; do echo waiting for myservice; sleep 2; </span></span><br><span class="line"><span class="string">done;&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-mydb</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until nslookup mydb; do echo waiting for mydb; sleep 2; done;&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>创建pod，并且不断查看，就可以看到启动过程</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658143508793.png" alt="1658143508793"></p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658143552268.png" alt="1658143552268"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/1658143552268.png" class title="哦哦婆婆">

<h4 id="探针"><a href="#探针" class="headerlink" title="探针"></a>探针</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>诊断容器的一种方式，指示容器是否正在运行或者容器是否做好接收服务请求的准备</p>
<h5 id="三种处理："><a href="#三种处理：" class="headerlink" title="三种处理："></a>三种处理：</h5><blockquote>
<ul>
<li><p> ExecAction：在容器内执行指定命令。如果命令退出时返回码为 0 则认为诊断成功。</p>
</li>
<li><p> TCPSocketAction：对指定端口上的容器的 IP 地址进行 TCP 检查。如果端口打开，则诊断被认为是成功的。 </p>
</li>
<li><p> HTTPGetAction：对指定的端口和路径上的容器的 IP 地址执行 HTTP Get 请求。如果响应的状态码大于等于200 且小于 400，则诊断被认为是成功的  </p>
</li>
</ul>
<p><strong>每次探测都将获得以下三种结果之一：</strong> </p>
<ul>
<li> 成功：容器通过了诊断。</li>
<li> 失败：容器未通过诊断。</li>
<li> 未知：诊断失败，因此不会采取任何行动</li>
</ul>
</blockquote>
<h5 id="两种探针"><a href="#两种探针" class="headerlink" title="两种探针"></a>两种探针</h5><blockquote>
<ul>
<li>livenessProbe：指示容器是否正在运行。如果存活探测失败，则 kubelet 会杀死容器，并且容器将受到其 重启策略 的影响。如果容器不提供存活探针，则默认状态为 Success</li>
<li>readinessProbe：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与 Pod 匹配的所有 Service 的端点中删除该 Pod 的 IP 地址。初始延迟之前的就绪状态默认为 Failure。如果容器不提供就绪探针，则默认状态为 Success</li>
</ul>
</blockquote>
<h5 id="就绪检测yaml"><a href="#就绪检测yaml" class="headerlink" title="就绪检测yaml"></a>就绪检测yaml</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">readiness-httpget-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">readiness-httpget-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="comment">#对镜像wangyanglinux/myapp:v1生成的应用，访问80端口/index.html资源(应用中无此资源)</span></span><br><span class="line">      <span class="attr">httpGet:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/index1.html</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658144857352.png" alt="1658144857352"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/1658144857352.png" class title="巍峨">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查看pod详细描述</span><br><span class="line">kubectl describe pod readiness-httpget-pod</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\20200204122317758.png" alt="20200204122317758"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/20200204122317758.png" class title="去问问">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查看Pod的日志【一直不断的探测】</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658144965988.png" alt="1658144965988"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/1658144965988.png" class title="偶然">

<p><strong>解决</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//进入容器</span><br><span class="line">kubectl exec  readiness-httpget-pod -it -- /bin/sh</span><br><span class="line">//进入目录</span><br><span class="line">cd /usr/share/nginx/html/</span><br><span class="line">//创建index1</span><br><span class="line">echo &quot;123&quot; &gt;&gt; index1.html</span><br><span class="line">//退出容器</span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="存活检测yaml"><a href="#存活检测yaml" class="headerlink" title="存活检测yaml"></a><strong>存活检测yaml</strong></h5><blockquote>
<p> 检测/tmp/live，每隔60秒就会被删除，liveness检测，如果被删除，就会返回失败，重启pod。陷入无限循环。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">liveness-exec-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-exec-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;touch /tmp/live ; sleep 60; rm -rf /tmp/live; sleep</span></span><br><span class="line"><span class="string">3600&quot;</span>]</span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">exec:</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;test&quot;</span>,<span class="string">&quot;-e&quot;</span>,<span class="string">&quot;/tmp/live&quot;</span>]</span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658145618199.png" alt="1658145618199"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/1658145618199.png" class title="跑一天">

<h5 id="容器启动前和关闭前动作"><a href="#容器启动前和关闭前动作" class="headerlink" title="容器启动前和关闭前动作"></a>容器启动前和关闭前动作</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lifecycle-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lifecycle-demo-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the postStart handler &gt; </span></span><br><span class="line"><span class="string">/usr/share/message&quot;</span>]</span><br><span class="line">      <span class="attr">preStop:</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo Hello from the poststop handler &gt; </span></span><br><span class="line"><span class="string">/usr/share/message&quot;</span>]</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Pod/gitee\Blog\source_posts\Pod\1658145870559.png" alt="1658145870559"></p>
<img src="/blknjyty.github.io/2022/07/25/Pod/1658145870559.png" class title="不会高">





]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Process</title>
    <url>/blknjyty.github.io/2022/07/25/Process/</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote>
<p> 实际Java开发工作中可能会遇到调用操作系统命令的场景，比如查看下文件夹，执行下sh/exe文件等等，那么我们就要用到Process了 </p>
</blockquote>
<span id="more"></span>

<h3 id="类介绍"><a href="#类介绍" class="headerlink" title="类介绍"></a>类介绍</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Process</span> &#123;</span><br><span class="line">    <span class="comment">//获取子进程的输出流</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> OutputStream <span class="title function_">getOutputStream</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获取子进程的输入流。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> InputStream <span class="title function_">getInputStream</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获取子进程的错误流。  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> InputStream <span class="title function_">getErrorStream</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//此方法返回的退出值的过程。按照惯例，0表示正常终止。</span></span><br><span class="line">    <span class="comment">//导致当前线程等待，如有必要，一直要等到由该 Process 对象表示的进程已经终止。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">waitFor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    <span class="comment">//返回子进程的出口值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">exitValue</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//杀掉子进程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>需要注意：</strong></p>
<ul>
<li> 在这里需要提及的是创建的子进程没有自己的控制台或终端，其所有的io操作都是通过（输入流、输出流、错误流）<strong>重定向到父进程中。</strong> </li>
<li> 针对可执行程序的输入输出每个平台都会提供缓冲区，当没有及时把缓冲数据读出，且可执行程序在短时间内有大量数据输入缓冲区的话，缓冲区撑满，进程就会被阻塞。所以！！ <strong>写Process程序的时候，尽量主动把可执行程序的输入和输出读出来，不要让它们长时间留在缓冲区</strong>  </li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="ping百度"><a href="#ping百度" class="headerlink" title="ping百度"></a>ping百度</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结果是调用ping被挂到后台运行，程序直接打印了“任务执行完毕！”，而我们想要的效果是先把ping操作执行完成后，再输出“任务执行完毕！”。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;ping www.baidu.com&quot;</span>);  </span><br><span class="line">            System.out.println(<span class="string">&quot;任务执行完毕！&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Process提供了WaitFor和getInputStream两个方法，这两个方法都是阻塞java线程，等待脚本返回或结束后，再继续执行java程序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;ping www.baidu.com&quot;</span>);  </span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(  </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(),<span class="string">&quot;gbk&quot;</span>));  </span><br><span class="line">            String line;  </span><br><span class="line">            <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;  </span><br><span class="line">                System.out.println(line);  </span><br><span class="line">            &#125;  </span><br><span class="line">            System.out.println(<span class="string">&quot;任务执行完毕！&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;ping www.baidu.com&quot;</span>);  </span><br><span class="line">            process.waitFor();  </span><br><span class="line">            System.out.println(<span class="string">&quot;任务执行完毕！&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="防止缓冲区积压"><a href="#防止缓冲区积压" class="headerlink" title="防止缓冲区积压"></a>防止缓冲区积压</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先创建一个线程类，它主要负责不停地来读出Process所调用脚本的输出数据（主要的是读出error信息）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CleanInputCache</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> InputStream is;  </span><br><span class="line">    <span class="keyword">private</span> String type;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CleanInputCache</span><span class="params">(InputStream is, String type)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.is = is;  </span><br><span class="line">        <span class="built_in">this</span>.type = type;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);  </span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);  </span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)  </span><br><span class="line">                System.out.println(type + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + line);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;  </span><br><span class="line">            ioe.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;ping www.baidu.com&quot;</span>);  </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CleanInputCache</span>(process.getInputStream(),<span class="string">&quot;INFO&quot;</span>).start();  </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CleanInputCache</span>(process.getErrorStream(),<span class="string">&quot;ERROR&quot;</span>).start();  </span><br><span class="line">            process.waitFor();  </span><br><span class="line">            System.out.println(<span class="string">&quot;任务执行完毕！&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></figure>

<h4 id="设置本地时间"><a href="#设置本地时间" class="headerlink" title="设置本地时间"></a>设置本地时间</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 设置本地日期</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> date yyyy-MM-dd格式</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSystemDate</span><span class="params">(String date)</span>&#123;</span><br><span class="line">   <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">command1</span> <span class="operator">=</span> <span class="string">&quot;cmd /c date &quot;</span>+date;</span><br><span class="line">   System.out.println(command1);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     process = Runtime.getRuntime().exec(command1);</span><br><span class="line">     <span class="comment">//必须等待该进程结束，否则时间设置就无法生效</span></span><br><span class="line">     process.waitFor();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(process!=<span class="literal">null</span>)&#123;</span><br><span class="line">       process.destroy();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="网卡吞吐量计算"><a href="#网卡吞吐量计算" class="headerlink" title="网卡吞吐量计算"></a>网卡吞吐量计算</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Purpose</span>:采集网络带宽使用量</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> float,网络带宽已使用量</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title function_">getNetworkThoughput</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">curRate</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">   <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 第一次采集流量数据</span></span><br><span class="line">   <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">   <span class="type">long</span> <span class="variable">total1</span> <span class="operator">=</span> calculateThoughout(r);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 休眠1秒后，再次收集</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 第二次采集流量数据</span></span><br><span class="line">   <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">   <span class="type">long</span> <span class="variable">total2</span> <span class="operator">=</span> calculateThoughout(r);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 计算该段时间内的吞吐量：单位为Mbps(million bit per second)</span></span><br><span class="line">   <span class="type">double</span> <span class="variable">interval</span> <span class="operator">=</span> (endTime-startTime)/<span class="number">1000</span>;</span><br><span class="line">   curRate = (total2-total1)*<span class="number">8</span>/<span class="number">1000000</span>*interval;</span><br><span class="line"> </span><br><span class="line">   System.out.println(<span class="string">&quot;收集网络带宽使用率结束，当前设备的网卡吞吐量为：&quot;</span>+(curRate)+<span class="string">&quot;Mbps.&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> curRate;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算某个时刻网卡的收发数据总量</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> runtime</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">calculateThoughout</span><span class="params">(Runtime runtime)</span>&#123;</span><br><span class="line">   <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;cat /proc/net/dev&quot;</span>;</span><br><span class="line">   <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     process = runtime.exec(command);</span><br><span class="line">     reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream()));</span><br><span class="line">     <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">       line = line.trim();</span><br><span class="line">       <span class="comment">// 考虑多网卡的情况</span></span><br><span class="line">       <span class="keyword">if</span> (line.startsWith(<span class="string">&quot;eth&quot;</span>)) &#123;</span><br><span class="line">         log.debug(line);</span><br><span class="line">         line = line.substring(<span class="number">5</span>).trim();</span><br><span class="line">         String[] temp = line.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">         total+=(Long.parseLong(temp[<span class="number">0</span>].trim()));<span class="comment">// Receive</span></span><br><span class="line">         total+=(Long.parseLong(temp[<span class="number">8</span>].trim()));<span class="comment">// Transmit</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (NumberFormatException | IOException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         reader.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">         e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span> (process != <span class="literal">null</span>) &#123;</span><br><span class="line">       process.destroy();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> total;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="多个有先后顺序的命令"><a href="#多个有先后顺序的命令" class="headerlink" title="多个有先后顺序的命令"></a>多个有先后顺序的命令</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cmd</span><span class="params">(String cmd)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Process ps= Runtime.getRuntime().exec(cmd); </span><br><span class="line">        ps.waitFor();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.info(e.getMessage(),e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">     String copy=<span class="string">&quot;cp -rf &quot;</span>+source+<span class="string">&quot; &quot;</span>+target;</span><br><span class="line">     String jar=<span class="string">&quot;jar -uvf &quot;</span>+jar+<span class="string">&quot; &quot;</span>+file;</span><br><span class="line">     cmd(copy);</span><br><span class="line">     cmd(jar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="读取io流"><a href="#读取io流" class="headerlink" title="读取io流"></a>读取io流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String...args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//执行指令</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;adb devices&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【控制台执行信息】&quot;</span>);</span><br><span class="line">        System.out.println(readInputstream(process.getInputStream()));</span><br><span class="line">        System.out.println(<span class="string">&quot;【控制台错误信息】&quot;</span>);</span><br><span class="line">        System.out.println(readInputstream(process.getErrorStream()));</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取控制台打印的文字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readInputstream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> in;</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((line=bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            sb.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考文章：<a href="https://blog.csdn.net/weixin_45433031/article/details/125327662">https://blog.csdn.net/weixin_45433031/article/details/125327662</a></p>
<p><a href="https://blog.csdn.net/qq_44885775/article/details/124127287?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165846105316780357296898%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165846105316780357296898&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124127287-null-null.142%5Ev33%5Epc_rank_34,185%5Ev2%5Econtrol&utm_term=Process%20java&spm=1018.2226.3001.4187">文章2</a></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>RS和Deployment</title>
    <url>/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/</url>
    <content><![CDATA[<h3 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a><strong>ReplicaSet</strong></h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><blockquote>
<p> 主要的作用就是用来确保容器应用的副本数始终保持在用户定义的副本数 。即如 果有容器异常退出，会自动创建新的Pod来替代；而如果异常多出来的容器也会自动回收</p>
</blockquote>
<span id="more"></span>

<h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">tier:</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GET_HOSTS_FROM</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">dns</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>创建rs后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查看pod和标签</span><br><span class="line">kubectl get pod  --show-labels</span><br><span class="line">//修改pod的标签</span><br><span class="line">kubectl label pod frontend-dtx7t tier=frontend1 --overwrite=True</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/gitee\Blog\source_posts\RS和Deployment\1658147537315.png" alt="1658147537315"></p>
 <img src="/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/1658147537315.png" class title="图">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//删除rs</span><br><span class="line">kubectl delete rs --all</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/gitee\Blog\source_posts\RS和Deployment\1658147623117.png" alt="1658147623117"></p>
 <img src="/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/1658147623117.png" class title="图图">

<h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><blockquote>
<p> <strong>Deployment 的作用是管理和控制 Pod 和 ReplicaSet，管控它们运行在用户期望的状态中</strong>。 </p>
</blockquote>
<h4 id="yaml-1"><a href="#yaml-1" class="headerlink" title="yaml"></a>yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create -f https://kubernetes.io/docs/user-guide/nginx-deployment.yaml --record</span><br><span class="line">## --record参数可以记录命令，我们可以很方便的查看每次 revision 的变化</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deploy.yaml --record</span><br></pre></td></tr></table></figure>

<p><strong>查看pod和rs</strong></p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/gitee\Blog\source_posts\RS和Deployment\1658193426313.png" alt="1658193426313"></p>
 <img src="/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/1658193426313.png" class title="图图图">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//显示标签</span><br><span class="line">kubectl get pod --show-labels</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/gitee\Blog\source_posts\RS和Deployment\1658193468849.png" alt="1658193468849"></p>
 <img src="/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/1658193468849.png" class title="图图图图">

<h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl scale deployment nginx-deployment --replicas 10</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/gitee\Blog\source_posts\RS和Deployment\1658193499915.png" alt="1658193499915"></p>
 <img src="/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/1658193499915.png" class title="图图图图图">

<h4 id="自动扩展"><a href="#自动扩展" class="headerlink" title="自动扩展"></a>自动扩展</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//如果集群支持 horizontal pod autoscaling 的话，还可以为Deployment设置自动扩展</span><br><span class="line">kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/gitee\Blog\source_posts\RS和Deployment\1658193624346.png" alt="1658193624346"></p>
 <img src="/blknjyty.github.io/2022/07/25/RS%E5%92%8CDeployment/1658193624346.png" class title="哈哈哈">

<h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl rollout undo deployment/nginx-deployment</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>您可以通过设置 .spec.revisonHistoryLimit 项来指定 deployment 多保留多少 revision 历史记录。默认的会 保留所有的 revision；如果将该项设置为0，Deployment 就不允许回退了  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//您可以用 kubectl rollout status 命令查看 Deployment 是否完成。如果 rollout 成功完成， kubectl rollout status 将返回一个0值的 Exit Code</span><br><span class="line">kubectl rollout status deployments nginx-deployment</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="查看历史RS"><a href="#查看历史RS" class="headerlink" title="查看历史RS"></a>查看历史RS</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get rs</span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-1564180365   3         3         0       6s</span><br><span class="line">nginx-deployment-2035384211   0         0         0       36s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h4><p><a href="https://blog.csdn.net/heian_99/article/details/104181104">参考文章</a></p>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Secret</title>
    <url>/blknjyty.github.io/2022/07/25/Secret/</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote>
<p> <strong>Secret 解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者 Pod Spec 中。Secret 可以以 Volume 或者环境变量的方式使用</strong>  </p>
</blockquote>
<span id="more"></span>

<h3 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h3><ul>
<li>Service Account ：用来访问 Kubernetes API，由 Kubernetes 自动创建，并且会自动挂载到 Pod 的/run/secrets/kubernetes.io/serviceaccount  目录中</li>
<li>Opaque ：base64编码格式的Secret，用来存储密码、密钥等</li>
<li>kubernetes.io/dockerconﬁgjson ：用来存储私有 docker registry 的认证信息</li>
</ul>
<h3 id="Service-Account"><a href="#Service-Account" class="headerlink" title="Service Account"></a>Service Account</h3><p> <strong>Service Account 用来访问 Kubernetes API，由 Kubernetes 自动创建，并且会自动挂载到 Pod的 /run/secrets/kubernetes.io/serviceaccount 目录中</strong> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl run nginx --image nginx</span><br><span class="line">deployment &quot;nginx&quot; created</span><br><span class="line">$ kubectl get pods</span><br><span class="line">NAME                     READY     STATUS    RESTARTS   AGE</span><br><span class="line">nginx-3137573019-md1u2   1/1       Running   0          13s</span><br><span class="line">$ kubectl exec nginx-3137573019-md1u2 ls /run/secrets/kubernetes.io/serviceaccount</span><br><span class="line">ca.crt</span><br><span class="line">namespace</span><br><span class="line">token</span><br></pre></td></tr></table></figure>

<h3 id="Opaque-Secret"><a href="#Opaque-Secret" class="headerlink" title="Opaque Secret"></a>Opaque Secret</h3><blockquote>
<p> 注意：<strong>Opaque 类型的数据是一个 map 类型，要求 value 是 base64 编码格式：</strong> </p>
</blockquote>
<p>先将账号密码 编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo -n &quot;admin&quot; | base64</span><br><span class="line">YWRtaW4=</span><br><span class="line">$ echo -n &quot;1f2d1e2e67df&quot; | base64</span><br><span class="line">MWYyZDFlMmU2N2Rm</span><br></pre></td></tr></table></figure>

<p> <strong>secrets.yaml</strong> </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">MWYyZDFlMmU2N2Rm</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">YWRtaW4=</span></span><br></pre></td></tr></table></figure>

<p>查看secret</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Secret/gitee\Blog\source_posts\Secret\1658223121337.png" alt="1658223121337"></p>
 <img src="/blknjyty.github.io/2022/07/25/Secret/1658223121337.png" class title="去问问">

<h4 id="使用Opaque-Secret"><a href="#使用Opaque-Secret" class="headerlink" title="使用Opaque Secret"></a>使用Opaque Secret</h4><ol>
<li><strong>将 Secret 挂载到 Volume 中</strong> </li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seret-test</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">seret-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">mysecret</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secrets</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/etc/secrets&quot;</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Secret/gitee\Blog\source_posts\Secret\1658223203299.png" alt="1658223203299"></p>
 <img src="/blknjyty.github.io/2022/07/25/Secret/1658223203299.png" class title="得分">

<ol start="2">
<li><strong>将 Secret 导出到环境变量中</strong> </li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">pod-deployment</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod-1</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TEST_USER</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TEST_PASSWORD</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">mysecret</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Secret/gitee\Blog\source_posts\Secret\1658223248252.png" alt="1658223248252"></p>
 <img src="/blknjyty.github.io/2022/07/25/Secret/1658223248252.png" class title="都很方便">

<h3 id="kubernetes-io-dockerconﬁgjson"><a href="#kubernetes-io-dockerconﬁgjson" class="headerlink" title="kubernetes.io/dockerconﬁgjson"></a>kubernetes.io/dockerconﬁgjson</h3><p> 使用 Kuberctl 创建 docker registry 认证的 secret </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL</span><br><span class="line"></span><br><span class="line">secret &quot;myregistrykey&quot; created.</span><br></pre></td></tr></table></figure>

<p> 在创建 Pod 的时候，通过 imagePullSecrets 来引用刚创建的 <code>myregistrykey</code> </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">roc/awangyang:v1</span></span><br><span class="line">  <span class="attr">imagePullSecrets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myregistrykey</span></span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/heian_99/category_9652886.html">参考文档</a></p>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Service</title>
    <url>/blknjyty.github.io/2022/07/25/Service/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>Kubernetes Service  定义了这样一种抽象：一个 Pod  的逻辑分组，一种可以访问它们的策略 —— 通常称为微 服务。 这一组 Pod  能够被 Service  访问到，通常是通过 Label Selector</p>
</blockquote>
<span id="more"></span>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Service/gitee\Blog\source_posts\Service\1658194586057.png" alt="1658194586057"></p>
 <img src="/blknjyty.github.io/2022/07/25/Service/1658194586057.png" class title="好人和和">

<h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><ul>
<li>ClusterIp：默认类型，自动分配一个仅 Cluster 内部可以访问的虚拟 IP</li>
<li>NodePort：在 ClusterIP 基础上为 Service 在每台机器上绑定一个端口，这样就可以通过 : NodePort 来访问该服务</li>
<li>LoadBalancer：在 NodePort 的基础上，借助 cloud provider 创建一个外部负载均衡器，并将请求转发到: NodePort</li>
<li>ExternalName：把集群外部的服务引入到集群内部来，在集群内部直接使用。没有任何类型代理被创建，这只有 kubernetes 1.7 或更高版本的 kube-dns 才支持</li>
</ul>
<h4 id="ClusterIp"><a href="#ClusterIp" class="headerlink" title="ClusterIp"></a>ClusterIp</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Service/gitee\Blog\source_posts\Service\1658196020216.png" alt="1658196020216"></p>
 <img src="/blknjyty.github.io/2022/07/25/Service/1658196020216.png" class title="哈合计">

<h5 id="Headless-Service"><a href="#Headless-Service" class="headerlink" title="Headless Service"></a>Headless Service</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp-headless</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">&quot;None&quot;</span></span><br><span class="line">  <span class="attr">ports:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Service/gitee\Blog\source_posts\Service\1658196191010.png" alt="1658196191010"></p>
 <img src="/blknjyty.github.io/2022/07/25/Service/1658196191010.png" class title="讷讷哦">

<h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><blockquote>
<p>nodePort 的原理在于在 node上开了一个端口，将向该端口的流量导入到 kube-proxy，然后由 kube-proxy 进 一步到给对应的 pod 。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">myapp</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">stabel</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Service/gitee\Blog\source_posts\Service\1658196382994.png" alt="1658196382994"></p>
 <img src="/blknjyty.github.io/2022/07/25/Service/1658196382994.png" class title="平日要不">

<h4 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h4><blockquote>
<p>loadBalancer 和 nodePort 其实是同一种方式。区别在于 loadBalancer 比 nodePort 多了一步，就是可以调用 cloud provider 去创建 LB 来向节点导流 </p>
</blockquote>
<h4 id="ExternalName"><a href="#ExternalName" class="headerlink" title="ExternalName"></a>ExternalName</h4><blockquote>
<p>这种类型的 Service 通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容( 例如： hub.atguigu.com )。ExternalName Service 是 Service 的特例，它没有 selector，也没有定义任何的端口和 Endpoint。相反的，对于运行在集群外部的服务，它通过返回该外部服务的别名这种方式来提供服务</p>
</blockquote>
<h3 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h3><blockquote>
<p>ngress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。</p>
</blockquote>
<h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-dm</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www.heian.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span> <span class="string">nginx-svc</span></span><br><span class="line">            <span class="attr">servicePort:</span> <span class="number">80</span><span class="string">集群</span></span><br></pre></td></tr></table></figure>

<p><strong>集群内部访问：</strong></p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Service/gitee\Blog\source_posts\Service\1658197990793.png" alt="1658197990793"></p>
 <img src="/blknjyty.github.io/2022/07/25/Service/1658197990793.png" class title="你看你看">

<p><strong>集群外部访问：</strong></p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Service/gitee\Blog\source_posts\Service\1658198043604.png" alt="1658198043604"></p>
 <img src="/blknjyty.github.io/2022/07/25/Service/1658198043604.png" class title="发广告">

<h4 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h4><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Service/gitee\Blog\source_posts\Service\1658198452126.png" alt="1658198452126"></p>
 <img src="/blknjyty.github.io/2022/07/25/Service/1658198452126.png" class title="温度场">

<h5 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h5><p><strong>deployment1</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deployment1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">svc-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>

<p><strong>deployment2</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deployment2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx2</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx2</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">svc-2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx2</span></span><br></pre></td></tr></table></figure>

<p><strong>ingress-nginx</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www.heian.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span> <span class="string">svc-1</span></span><br><span class="line">            <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www2.heian.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">          <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span> <span class="string">svc-2</span></span><br><span class="line">            <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Volume</title>
    <url>/blknjyty.github.io/2022/07/25/Volume/</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote>
<p>容器磁盘上的文件的生命周期是短暂的，这就使得在容器中运行重要应用时会出现一些问题。首先，当容器崩溃 时，kubelet 会重启它，但是容器中的文件将丢失——容器以干净的状态（镜像最初的状态）重新启动。其次，在 Pod 中同时运行多个容器时，这些容器之间通常需要共享文件。Kubernetes 中的 Volume 抽象就很好的解决了 这些问题</p>
</blockquote>
<span id="more"></span>

<p>Kubernetes 中的卷有明确的寿命 —— 与封装它的 Pod 相同。所f以，卷的生命比 Pod 中的所有容器都长，当这 个容器重启时数据仍然得以保存。当然，当 Pod 不再存在时，卷也将不复存在。也许更重要的是，Kubernetes 支持多种类型的卷，Pod 可以同时使用任意数量的卷</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="emptyDir"><a href="#emptyDir" class="headerlink" title="emptyDir"></a>emptyDir</h4><blockquote>
<p>简介：当 Pod 被分配给节点时，首先创建 emptyDir 卷，并且只要该 Pod 在该节点上运行，该卷就会存在。正如卷的名 字所述，它最初是空的。Pod 中的容器可以读取和写入 emptyDir 卷中的相同文件，尽管该卷可以挂载到每个容 器中的相同或不同路径上。当出于任何原因从节点中删除 Pod 时， emptyDir 中的数据将被永久删除<br><strong>简而言之，作用就是使容器间进行空间的共享</strong>， 可以添加文件，实现不同容器共享,不同路径挂载。 </p>
</blockquote>
<p><strong>作用：</strong></p>
<ul>
<li>暂存空间，例如用于基于磁盘的合并排序</li>
<li>用作长时间计算崩溃恢复时的检查点</li>
<li>Web服务器容器提供数据时，保存内容管理器容器提取的文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/cache</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cache-volume</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Volume/gitee\Blog\source_posts\Volume\1658227996350.png" alt="1658227996350"></p>
 <img src="/blknjyty.github.io/2022/07/25/Volume/1658227996350.png" class title="得分">

<h4 id="hostPath"><a href="#hostPath" class="headerlink" title="hostPath"></a>hostPath</h4><blockquote>
<p>简介： hostPath 卷将主机节点的文件系统中的文件或目录挂载到集群中 ，简而言之就是节点之间的共享</p>
</blockquote>
<p><strong>作用</strong></p>
<ul>
<li>运行需要访问 Docker 内部的容器；使用  /var/lib/docker  的   hostPath</li>
<li>在容器中运行 cAdvisor；使用  /dev/cgroups  的   hostPath</li>
<li>允许 pod 指定给定的 hostPath 是否应该在 pod 运行之前存在，是否应该创建，以及它应该以什么形式存在</li>
</ul>
<p> 除了所需的 path 属性之外，用户还可以为 hostPath 卷指定 type </p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Volume/gitee\Blog\source_posts\Volume\1658228122967.png" alt="1658228122967"></p>
 <img src="/blknjyty.github.io/2022/07/25/Volume/1658228122967.png" class title="搜索树">

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">wangyanglinux/myapp:v1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test-container</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/test-pd</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-volume</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="comment"># directory location on host</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/data</span></span><br><span class="line">      <span class="comment"># this field is optional</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Directory</span></span><br></pre></td></tr></table></figure>

<p>如下所示，master节点和node1节点均可见index.html</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/Volume/gitee\Blog\source_posts\Volume\1658228144040.png" alt="1658228144040"></p>
 <img src="/blknjyty.github.io/2022/07/25/Volume/1658228144040.png" class title="爱是">

]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署how2j项目实操</title>
    <url>/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本文档记录<a href="https://how2j.cn/k/deploy2linux/deploy2linux-autostart/1996.html">how2j的tmall项目</a>在本地虚拟机上使用docker生成镜像并推送到仓库的过程</p>
<p>Linux:centos7，docker为20.10…版本。<strong>注意有个坑，linux内核版本过低(比如内核版本3…和docker20…就不行)、docker版本过高，部署完也无法访问，<a href="https://blog.csdn.net/weixin_43604021/article/details/125722883">解决办法</a></strong></p>
<span id="more"></span>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="拉取一个Linux镜像"><a href="#拉取一个Linux镜像" class="headerlink" title="拉取一个Linux镜像"></a>拉取一个Linux镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在自身虚拟机上的操作系统中拉取一个镜像</span><br><span class="line">docker pull centos:7.6.1810 </span><br></pre></td></tr></table></figure>

<h4 id="安装ftp服务"><a href="#安装ftp服务" class="headerlink" title="安装ftp服务"></a>安装ftp服务</h4><blockquote>
<p>为了后续从本地上传java应用、tomcat等到虚拟机中的操作系统方便，安装vsftpd</p>
</blockquote>
<h5 id="vsftpd介绍"><a href="#vsftpd介绍" class="headerlink" title="vsftpd介绍"></a>vsftpd介绍</h5><blockquote>
<p> vsftpd 全称是：very secure FTP daemon 非常安全的ftp后台程序，及ftp 服务端 </p>
</blockquote>
<h5 id="安装和启停"><a href="#安装和启停" class="headerlink" title="安装和启停"></a>安装和启停</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install vsftpd -y</span><br><span class="line">systemctl start vsftpd.service</span><br><span class="line">systemctl status vsftpd.service</span><br><span class="line">systemctl stop vsftpd.service</span><br><span class="line">//ftp服务启动的是21端口，使用如下命令应该观察到21端口正在处于监听状态，这也从侧面反应了ftp服务器启动成功了</span><br><span class="line">netstat -anp|grep 21</span><br></pre></td></tr></table></figure>

<h5 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h5><blockquote>
<p>为了连接上vsftpd，我们创建专门的用户</p>
<ul>
<li>创建一个目录专属于此用户拥有</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/wwwroot/ftptest</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建用户， 创建用户ftptest,并且指定其目录为用户目录中创建的/home/wwwroot/ftptest </p>
<ul>
<li><em>-g ftp 表示该用户属于ftp分组 (ftp分组是内置的，本来就存在，不需要自己创建)</em><br><em>-s /sbin/nologin 表示这个用户不能用来登录secureCRT这样的客户端。 这种不能登陆的用户又叫做虚拟用户</em><br> <em>创建过程给出的警告信息是正常的，不用理会</em></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -d /home/wwwroot/ftptest -g ftp -s /sbin/nologin ftptest</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>设置目录权限 ， 把目录/home/wwwroot/ftptest的拥有者设置为ftptest<br> 使ftptest用户拥有这个目录的读写权限 </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R ftptest /home/wwwroot/ftptest</span><br><span class="line">chmod -R 775 /home/wwwroot/ftptest</span><br></pre></td></tr></table></figure>

<ul>
<li> 设置密码 </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//输入 paw123###</span><br><span class="line">passwd ftptest</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h5><blockquote>
<ul>
<li>为了安全起见，去掉vsftpd的匿名登录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line">//进入后把原来的anonymous_enable=YES改为</span><br><span class="line">anonymous_enable=NO</span><br></pre></td></tr></table></figure>

<ul>
<li>限制用户访问， 创建的ftptest用户所拥有的目录是 /home/wwwroot/ftptest,如果不做限制，那么使用ftptest登陆之后可以切换到其他敏感目录去，比如切换到/usr目录去，这样就存在巨大的安全隐患 </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line">//进入后找到</span><br><span class="line">#chroot_list_enable=YES</span><br><span class="line"># (default follows)</span><br><span class="line">#chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line"></span><br><span class="line">//将这三行改为，即去掉注释</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"># (default follows)</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>添加用户名单</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/chroot_list</span><br><span class="line"></span><br><span class="line">//进入后增加一行</span><br><span class="line">ftptest</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>打开写权限， vsftpd服务器是这样的，一旦某个用户被限制访问了，那么默认情况下，该用户的写权限也被剥夺了。 这就导致ftp客户端连接上服务器之后无法上传文件。 </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">//最后面加上</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h5><blockquote>
<p> vsftpd有两种端口，一个是21端口，用来监听客户端连接请求的。 这个一般说来是固定的，就一直使用21端口。<br> 另一种是，一旦获取到请求之后，再专门用户服务端和客户端传输数据的端口。<br> 本知识点就是用于指定第二种端口的获取范围 </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line">//进入后，在最后添加，这表示使用被动模式，用于传输数据的端口分配从30000-30010之间。</span><br><span class="line">pasv_enable=YES</span><br><span class="line">pasv_min_port=30000</span><br><span class="line">pasv_max_port=30010</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="鉴权配置"><a href="#鉴权配置" class="headerlink" title="鉴权配置"></a>鉴权配置</h5><blockquote>
<p>不懂为啥、、、跟着配置把</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/pam.d/vsftpd</span><br><span class="line">//注释掉/etc/pam.d/vsftpd文件里这一行：</span><br><span class="line">#auth required pam_shells.so</span><br><span class="line">//这样不去鉴权，从而允许 ftptest 这种 nologin用户登录 ftp 服务器.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart vsftpd.service</span><br><span class="line">systemctl status vsftpd.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h5><blockquote>
<p>有防火墙且开启的，需要开放端口，才能访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=21/tcp --permanent </span><br><span class="line">firewall-cmd --zone=public --add-port=30000-30010/tcp --permanent </span><br><span class="line">//开放完之后一定要刷新</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">//查看一下</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<p>本地下载个ftp客户端待后续使用，xftp、ftprush等等都行</p>
<h4 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h4><blockquote>
<p>这里的安装是在虚拟机中的docker容器里centos7安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//运行容器</span><br><span class="line">docker run -dit --privileged --name centos7 centos:7.6.1810  /usr/sbin/init</span><br><span class="line">//进入容器，补充：退出容器exit</span><br><span class="line">docker exec -it centos7 /bin/bash</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install java-1.8.0-openjdk.x86_64</span><br><span class="line">//验证</span><br><span class="line">java -version</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><blockquote>
<p>这里的安装是在虚拟机中的docker容器里centos7安装，进入容器同上</p>
<p>yum上mysql的资源有问题，所以不能仅仅之用yum。在使用yum之前还需要用其他命令获取mysql社区版 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm  </span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm  </span><br><span class="line">//接着就可以通过yum安装了：</span><br><span class="line">yum install mysql mysql-server mysql-devel -y</span><br><span class="line"></span><br><span class="line">//启动</span><br><span class="line">systemctl start mysql.service</span><br><span class="line">//验证</span><br><span class="line">netstat -anp|grep 3306</span><br><span class="line"></span><br><span class="line">//设置mysql密码</span><br><span class="line">//通过Yum安装的mysql的管理员账户是没有密码的，这里通过命令设置其密码为 admin ，尽量使用这个密码哦，后续部署j2ee应用的时候会用到这个密码哦。</span><br><span class="line">mysqladmin -u root password admin</span><br><span class="line"></span><br><span class="line">//登录</span><br><span class="line">mysql -uroot -padmin</span><br><span class="line"></span><br><span class="line">//进入了终端，试试sql语句</span><br><span class="line">show databases;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h4><blockquote>
<p>yum上没有tomcat的源,可以用其他方式，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-7/v7.0.92/bin/apache-tomcat-7.0.92.tar.gz</span><br><span class="line">tar xzf apache-tomcat-7.0.92.tar.gz</span><br><span class="line">mv apache-tomcat-7.0.92 /usr/local/tomcat7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>但是本教程用的tomcat8，直接在这右上角<a href="https://how2j.cn/k/deploy2linux/deploy2linux-start/1611.html">下载</a></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//下载到本地，通过ftp客户端上传到虚拟机的操作系统，然后再通过docker的cp命令复制到容器centos7中</span><br><span class="line">//将宿主机目录线下/home/wwwroot/ftptest/apache-tomcat-8.5.23.tar.gz复制到名为centos7的容器的/tmp目录下面</span><br><span class="line">docker cp /home/wwwroot/ftptest/apache-tomcat-8.5.23.tar.gz centos7:/tmp</span><br><span class="line">//进入容器，同上</span><br><span class="line">...</span><br><span class="line">//解压、移动</span><br><span class="line">tar xzf apache-tomcat-8.5.23.tar.gz</span><br><span class="line">mv apache-tomcat-8.5.23 /usr/local/tomcat8</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\docker部署how2j项目实操\1657596789808.png" alt="1657596789808"></p>
<img src="/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/1657596789808.png" class title="ftp客户端">

<ul>
<li>验证一下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//启动tomcat</span><br><span class="line">/usr/local/tomcat8/bin/startup.sh</span><br><span class="line">//查看端口</span><br><span class="line">netstat -anp|grep 8080</span><br><span class="line">//查看启动日志</span><br><span class="line">tail -300f /usr/local/tomcat8/logs/catalina.out</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>开放端口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent </span><br><span class="line">//开放完之后一定要刷新</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">//查看一下</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="部署java应用和sql语句"><a href="#部署java应用和sql语句" class="headerlink" title="部署java应用和sql语句"></a>部署java应用和sql语句</h4><p><a href="https://how2j.cn/k/deploy2linux/deploy2linux-upload/1614.html">rar包下载</a></p>
<blockquote>
<p> 下载tmall.rar，<strong>解压后上传</strong>到虚拟机的操作系统中，才通过docker的cp转移到容器中。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//步骤基本同上</span><br><span class="line">docker cp /home/wwwroot/ftptest/tmall centos7:/home/wwwroot/ftptest</span><br><span class="line">//最后的项目位置在/home/wwwroot/ftptest/tmall/web</span><br><span class="line">//配置tomcat</span><br><span class="line">vi /usr/local/tomcat7/conf/server.xml </span><br><span class="line">//然后在&lt;host下面增加一行</span><br><span class="line">&lt;Context path=&quot;/tmall&quot; docBase=&quot;/home/wwwroot/ftptest/tmall/web&quot; debug=&quot;0&quot; reloadable=&quot;false&quot; /&gt;</span><br><span class="line">//重启tomcat</span><br><span class="line">/usr/local/tomcat7/bin/shutdown.sh</span><br><span class="line">/usr/local/tomcat7/bin/startup.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <img src="/blknjyty.github.io/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\docker部署how2j项目实操\1657597958254.png" alt="1657597958254"></p>
 <img src="/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/1657597958254.png" class title="tomcat配置应用">

<p> 下载tmall.sql，上传到虚拟机的操作系统中，才通过docker的cp转移到容器中。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Linux MySQL默认是大小写敏感的，但是模仿天猫在设计的时候是在windows上开发的，而windows上的Mysql默认是非大小写敏感的，所以JDBC代码有的表名是大写，有的是小写的，一旦运行起来就会因为大小写不一致导致无法识别表名。 为了解决这个矛盾，就需要把MySQL的大小写敏感修改为非敏感。解决办法如下：</span><br><span class="line">vi /etc/my.cnf</span><br><span class="line">//打开后在[mysqld]后添加添加</span><br><span class="line">lower_case_table_names=1</span><br><span class="line">//重启mysql</span><br><span class="line">systemctl restart mysqld.service</span><br><span class="line">//连接数据库</span><br><span class="line">mysql -uroot -padmin</span><br><span class="line">//创建数据库</span><br><span class="line">CREATE DATABASE tmall DEFAULT CHARACTER SET utf8;</span><br><span class="line">//查看</span><br><span class="line">show databases;</span><br><span class="line">//导入数据</span><br><span class="line">mysql -u root -padmin --default-character-set=utf8 tmall &lt; /home/wwwroot/ftptest/tmall.sql</span><br><span class="line">//重新登录验证</span><br><span class="line">mysql -uroot -padmin</span><br><span class="line">use tmall;</span><br><span class="line">show tables;</span><br><span class="line">select count(*) from product;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="设置自启动"><a href="#设置自启动" class="headerlink" title="设置自启动"></a>设置自启动</h4><h5 id="服务自启动"><a href="#服务自启动" class="headerlink" title="服务自启动"></a>服务自启动</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//分别执行如下代码就可以开启服务的自启动了。</span><br><span class="line">systemctl enable vsftpd.service</span><br><span class="line">systemctl enable mysqld.service</span><br><span class="line">//关闭</span><br><span class="line">systemctl disable vsftpd.service</span><br><span class="line">systemctl disable mysqld.service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="脚本自启动"><a href="#脚本自启动" class="headerlink" title="脚本自启动"></a>脚本自启动</h5><p> 有个文件叫做 rc.local, 把脚本放进去就可以了。<br>不过这个脚本在 centos7里被降级了，不能被执行，所以要执行如下语句使得其可以被执行先 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br><span class="line">//然后修改 /etc/rc.d/rc.local, 放入 tomcat脚本即可</span><br><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line">/usr/local/tomcat7/bin/startup.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\docker部署how2j项目实操\1657598168031.png" alt="1657598168031"></p>
<img src="/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/1657598168031.png" class title="tomcat自启动">

<h4 id="容器打包成镜像"><a href="#容器打包成镜像" class="headerlink" title="容器打包成镜像"></a>容器打包成镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//容器打包成镜像</span><br><span class="line">docker commit -m=&quot;my tmall&quot; -a=&quot;yujin&quot; centos7 blknjyty/mytmall:v1</span><br><span class="line">//运行镜像</span><br><span class="line">docker run -dit --privileged -p80:80 -p8080:8080  --name mytmall blknjyty/mytmall:v1  /usr/sbin/init</span><br><span class="line">//本机访问</span><br><span class="line">http://虚拟机ip:8080/tmall/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\docker部署how2j项目实操\1657598367247.png" alt="1657598367247"></p>
<img src="/blknjyty.github.io/2022/07/12/docker%E9%83%A8%E7%BD%B2how2j%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%93%8D/1657598367247.png" class title="项目启动图">

]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>jooq使用</title>
    <url>/blknjyty.github.io/2022/07/15/jooq%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="JOOQ简介"><a href="#JOOQ简介" class="headerlink" title="JOOQ简介"></a>JOOQ简介</h3><blockquote>
<p><a href="https://jooq.org/">jOOQ</a>，是一个ORM框架，利用其生成的Java代码和流畅的API，可以快速构建有类型约束的安全的SQL语句 。 </p>
</blockquote>
<span id="more"></span>

<blockquote>
<p><strong>优点：</strong></p>
<ol>
<li><p>jOOQ的核心优势是可以将数据库表结构映射为Java类，包含表的基本描述和所有表字段。通过jOOQ提供的API，配合生成的Java代码，可以很方便的进行数据库操作 </p>
</li>
<li><p>生成的Java代码字段类型是根据数据库映射成的Java类型，在进行设置和查询操作时，因为是Java代码，都会有强类型校验，所以对于数据的输入，是天然安全的，极大的减少了SQL注入的风险 </p>
</li>
<li><p>jOOQ的代码生成策略是根据配置全量生成，任何对于数据库的改动，如果会影响到业务代码，在编译期间就会被发现，可以及时进行修复 </p>
</li>
</ol>
</blockquote>
<h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><blockquote>
<p>所有的操作jooq都提供两种方式， 第一种是使用 DSLContext API 以类SQL的语法进行调用，第二种是利用 Record API 进行调用 。这里面只记录第一种，了解第二种请点击<a href="https://jooq.diamondfsd.com/learn/section-2-base-curd.html">这里</a></p>
<p>了解：</p>
<ul>
<li><code>dslContext</code> 代表<code>DSLContext</code>实例</li>
<li><code>S1_USER</code> 由jOOQ插件生成的表描述常量</li>
<li><code>S1_USER.*</code> 由jOOQ插件生成的表内字段常量</li>
</ul>
<p>了解三个接口：</p>
<ul>
<li><code>org.jooq.Result</code> 结果集接口，此接口实现了List接口，可以当做一个集合来操作，是一个数据库查询结果集的包装类，除了集合的相关方法，该接口还提供了一些结果集转换，格式化，提取字段等方法。通常我们查询出来的结果都是此接口的实现类，掌握好此接口是jOOQ的基础接口，基本所有的SQL查询操作，都会碰到这个接口 </li>
<li><code>org.jooq.Record </code> 此接口再使用关系型数据库时，主要用于定义数据库表记录，储存的内容是一条表记录的字段和值，每个值会储存对应字段的类型，可以通过通用的 <code>getValue(Field field)</code> 方法，取到对应字段的值，也可以将这个接口看做是一条记录的字段/值映射 </li>
<li><code>org.jooq.DSLContext</code> jOOQ的核心接口之一，可以理解为一个SQL执行器，通过静态方法 <code>DSL.using</code>，可以获取一个 <code>DSLContext</code> 实例，此实例抽象了所有对于SQL的操作API，可以通过其提供的API方便的进行SQL操作  </li>
</ul>
</blockquote>
<h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类SQL语法 insertInto 方法第一个参数通常是表常量</span></span><br><span class="line">dslContext.insertInto(S1_USER, S1_USER.USERNAME, S1_USER.ADDRESS, S1_USER.EMAIL)</span><br><span class="line">        .values(<span class="string">&quot;username1&quot;</span>, <span class="string">&quot;demo-address1&quot;</span>, <span class="string">&quot;diamondfsd@gmail.com&quot;</span>)</span><br><span class="line">        .values(<span class="string">&quot;username2&quot;</span>, <span class="string">&quot;demo-address2&quot;</span>, <span class="string">&quot;diamondfsd@gmail.com&quot;</span>)</span><br><span class="line">        .execute();</span><br><span class="line"> <span class="comment">//批量插入</span></span><br><span class="line"> List&lt;S1UserRecord&gt; recordList = IntStream.range(<span class="number">0</span>, <span class="number">10</span>).mapToObj(i -&gt; &#123;</span><br><span class="line">    <span class="type">S1UserRecord</span> <span class="variable">s1UserRecord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">S1UserRecord</span>();</span><br><span class="line">    s1UserRecord.setUsername(<span class="string">&quot;usernameBatchInsert&quot;</span> + i);</span><br><span class="line">    s1UserRecord.setEmail(<span class="string">&quot;diamondfsd@gmail.com&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> s1UserRecord;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line">dslContext.batchInsert(recordList).execute();</span><br><span class="line"><span class="comment">//插入后获取主键</span></span><br><span class="line"><span class="comment">//通过此方法插入数据，可以通过 returning API读取想要返回的数据，此语法支持返回多个值，通过fetchOne()方法可以取到一个Record对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">userId</span> <span class="operator">=</span> dslContext.insertInto(S1_USER,</span><br><span class="line">    S1_USER.USERNAME, S1_USER.ADDRESS, S1_USER.EMAIL)</span><br><span class="line">    .values(<span class="string">&quot;username1&quot;</span>, <span class="string">&quot;demo-address1&quot;</span>, <span class="string">&quot;diamondfsd@gmail.com&quot;</span>)</span><br><span class="line">    .returning(S1_USER.ID)</span><br><span class="line">    .fetchOne().getId();</span><br><span class="line"><span class="comment">//插入时主键重复的处理办法</span></span><br><span class="line"><span class="comment">// 第一种 ：这里执行完，返回affecteRow影响行数为0，即不生效</span></span><br><span class="line"><span class="comment">// 生成的SQL: insert ignore into `learn-jooq`.`s1_user` (`id`, `username`) values (1, &#x27;username-1&#x27;)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">affecteRow</span> <span class="operator">=</span> dslContext.insertInto(S1_USER,</span><br><span class="line">    S1_USER.ID, S1_USER.USERNAME)</span><br><span class="line">    .values(<span class="number">1</span>, <span class="string">&quot;username-1&quot;</span>)</span><br><span class="line">    .onDuplicateKeyIgnore()</span><br><span class="line">    .execute();</span><br><span class="line"><span class="comment">// 第二种:更新主键所在列</span></span><br><span class="line"><span class="comment">//生成SQL: insert into `learn-jooq`.`s1_user` (`id`, `username`, `address`) values (1, &#x27;duplicateKey-update&#x27;, &#x27;hello world&#x27;) on duplicate key update `learn-jooq`.`s1_user`.`username` = &#x27;duplicateKey-update&#x27;, `learn-jooq`.`s1_user`.`address` = &#x27;update&#x27;</span></span><br><span class="line">dslContext.insertInto(S1_USER)</span><br><span class="line">    .set(S1_USER.ID, <span class="number">1</span>)</span><br><span class="line">    .set(S1_USER.USERNAME, <span class="string">&quot;duplicateKey-insert&quot;</span>)</span><br><span class="line">    .set(S1_USER.ADDRESS, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">    .onDuplicateKeyUpdate()</span><br><span class="line">    .set(S1_USER.USERNAME, <span class="string">&quot;duplicateKey-update&quot;</span>)</span><br><span class="line">    .set(S1_USER.ADDRESS, <span class="string">&quot;update&quot;</span>)</span><br><span class="line">    .execute();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dslContext.update(S1_USER)</span><br><span class="line">    .set(S1_USER.USERNAME, <span class="string">&quot;apiUsername-1&quot;</span>)</span><br><span class="line">    .set(S1_USER.ADDRESS, <span class="string">&quot;update-address&quot;</span>)</span><br><span class="line">    .where(S1_USER.ID.eq(<span class="number">1</span>))</span><br><span class="line">    .execute()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//批量更新</span></span><br><span class="line">  <span class="type">S1UserRecord</span> <span class="variable">record1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">S1UserRecord</span>();</span><br><span class="line">record1.setId(<span class="number">1</span>);</span><br><span class="line">record1.setUsername(<span class="string">&quot;batchUsername-1&quot;</span>);</span><br><span class="line"><span class="type">S1UserRecord</span> <span class="variable">record2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">S1UserRecord</span>();</span><br><span class="line">record2.setId(<span class="number">2</span>);</span><br><span class="line">record2.setUsername(<span class="string">&quot;batchUsername-2&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;S1UserRecord&gt; userRecordList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">userRecordList.add(record1);</span><br><span class="line">userRecordList.add(record2);</span><br><span class="line">dslContext.batchUpdate(userRecordList).execute();</span><br></pre></td></tr></table></figure>

<h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><blockquote>
<p> 基本查询方法，默认查询指定表的所有字段，返回一个结果集的包装，通过<code>Result.into</code>方法，可以将结果集转换为任意指定类型集合，当然也可以通过 <code>Record.getValue</code> 方法取得任意字段值，值类型依赖于字段类型 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// select `learn-jooq`.`s1_user`.`id`, `learn-jooq`.`s1_user`.`username`, `learn-jooq`.`s1_user`.`email`, `learn-jooq`.`s1_user`.`address`, `learn-jooq`.`s1_user`.`create_time`, `learn-jooq`.`s1_user`.`update_time` from `learn-jooq`.`s1_user`</span></span><br><span class="line">Result&lt;Record&gt; fetchResult = dslContext.select().from(S1_USER).fetch();</span><br><span class="line">List&lt;S1UserRecord&gt; result = fetch.into(S1UserRecord.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// select `learn-jooq`.`s1_user`.`id`, `learn-jooq`.`s1_user`.`username`, `learn-jooq`.`s1_user`.`email`, `learn-jooq`.`s1_user`.`address`, `learn-jooq`.`s1_user`.`create_time`, `learn-jooq`.`s1_user`.`update_time` from `learn-jooq`.`s1_user` where `learn-jooq`.`s1_user`.`id` in (1, 2)</span></span><br><span class="line">Result&lt;Record&gt; fetchAll = dslContext.select().from(S1_USER)</span><br><span class="line">                .where(S1_USER.ID.in(<span class="number">1</span>, <span class="number">2</span>)).fetch();</span><br><span class="line">fetchAll.forEach(record -&gt; &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> record.getValue(S1_USER.ID);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> record.getValue(S1_USER.USERNAME);</span><br><span class="line">    <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> record.getValue(S1_USER.ADDRESS);</span><br><span class="line">    <span class="type">Timestamp</span> <span class="variable">createTime</span> <span class="operator">=</span> record.getValue(S1_USER.CREATE_TIME);</span><br><span class="line">    <span class="type">Timestamp</span> <span class="variable">updateTime</span> <span class="operator">=</span> record.getValue(S1_USER.UPDATE_TIME);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>jooq也支持关联查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UserMessagePojo为新建的Pojo类，用于存储查询结果，可以忽略具体内容</span></span><br><span class="line">Result&lt;Record3&lt;String, String, String&gt;&gt; record3Result =</span><br><span class="line">        dslContext.select(S1_USER.USERNAME,</span><br><span class="line">        S2_USER_MESSAGE.MESSAGE_TITLE,</span><br><span class="line">        S2_USER_MESSAGE.MESSAGE_CONTENT)</span><br><span class="line">        .from(S2_USER_MESSAGE)</span><br><span class="line">        .leftJoin(S1_USER).on(S1_USER.ID.eq(S2_USER_MESSAGE.USER_ID))</span><br><span class="line">        .fetch();</span><br><span class="line">List&lt;UserMessagePojo&gt; userMessagePojoList = record3Result.into(UserMessagePojo.class)</span><br></pre></td></tr></table></figure>

<p><strong>Condition动态查询</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name,String age)</span> &#123;</span><br><span class="line">		Condition condition=DSL.trueCondition();<span class="comment">//真实条件</span></span><br><span class="line">		<span class="keyword">if</span>(name!=<span class="literal">null</span>) &#123;</span><br><span class="line">			condition=condition.and(Tables.STUDENT.NAME.eq(name));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(age!=<span class="literal">null</span>) &#123;</span><br><span class="line">			condition=condition.and(Tables.STUDENT.AGE.eq(Integer.parseInt(age)));</span><br><span class="line">		&#125;</span><br><span class="line">		List&lt;Student&gt; list=context.select().from(Tables.STUDENT).where(condition).fetch().into(Student.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dslContext.delete(S1_USER).where(S1_USER.USERNAME.eq(<span class="string">&quot;demo1&quot;</span>)).execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"><span class="type">S1UserRecord</span> <span class="variable">record1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">S1UserRecord</span>();</span><br><span class="line">record1.setId(<span class="number">1</span>);</span><br><span class="line"><span class="type">S1UserRecord</span> <span class="variable">record2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">S1UserRecord</span>();</span><br><span class="line">record2.setId(<span class="number">2</span>);</span><br><span class="line">dslContext.batchDelete(record1, record2).execute();</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">List&lt;S1UserRecord&gt; recordList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">recordList.add(record1);</span><br><span class="line">recordList.add(record2);</span><br><span class="line">dslContext.batchDelete(recordList).execute();</span><br></pre></td></tr></table></figure>

<h3 id="结果处理"><a href="#结果处理" class="headerlink" title="结果处理"></a>结果处理</h3><blockquote>
<p>查询操作通常以fetch API 作为结束API，例如常用的有，所有的读取类方法都差不多，掌握一个就能很快的举一反三</p>
<ul>
<li>读取多条<ul>
<li><code>fetch</code> 读取集合</li>
<li><code>fetchSet</code> 读取并返回一个Set集合，常用于去重</li>
<li><code>fetchArray</code> 读取并返回一个数组</li>
</ul>
</li>
<li>读取单条<ul>
<li><code>fetchOne</code> 读取单条记录，如果记录超过一条会报错</li>
<li><code>fetchAny</code> 读取单条记录，如果有多条，会取第一条数据</li>
<li><code>fetchSingle</code> 读取单条记录，如果记录为空或者记录超过一条会报错</li>
</ul>
</li>
<li>读取并返回Map<ul>
<li><code>fetchMap</code> 读取并返回一个Map</li>
<li><code>fetchGroups</code> 读取并返回一个分组Map</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><ul>
<li><p><code>fetch()</code><br>无参调用此方法，返回的是一个<code>Result</code>结果集对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Result&lt;Record&gt; records = dslContext.select().from(S1_USER).fetch();</span><br></pre></td></tr></table></figure></li>
<li><p><code>fetch(RecordMapper mapper)</code><br><code>RecordMapper</code>接口的提供<code>map</code>方法，用于来返回数据。<code>map</code> 方法传入一个 <code>Record</code> 对象。可以使用lambda表达式将 <code>Record</code> 对象转换成一个指定类型的POJO</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;S1UserPojo&gt; userPojoList = dslContext.select()</span><br><span class="line">            .from(S1_USER)</span><br><span class="line">            .where(S1_USER.ID.eq(<span class="number">1</span>))</span><br><span class="line">            .fetch(r -&gt; r.into(S1UserPojo.class));</span><br></pre></td></tr></table></figure>

<p>多表查询，字段相同时，直接用into方法将结果集转换为POJO时，相同字段名称的方法会以最后一个字段值为准。这时候，我们可以现将结果集通过 <code>into(Table table)</code> 方法将结果集转换为指定表的<code>Record</code>对象，然后再<code>into</code>进指定的POJO类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多表关联查询，查询s2_user_message.id = 2的数据，直接into的结果getId()却是1</span></span><br><span class="line"><span class="comment">// 这是因为同时关联查询了s1_user表，该表的id字段值为1</span></span><br><span class="line">List&lt;S2UserMessage&gt; userMessage = dslContext.select().from(S2_USER_MESSAGE)</span><br><span class="line">        .leftJoin(S1_USER).on(S1_USER.ID.eq(S2_USER_MESSAGE.USER_ID))</span><br><span class="line">        .where(S2_USER_MESSAGE.ID.eq(<span class="number">2</span>))</span><br><span class="line">        .fetch(r -&gt; r.into(S2UserMessage.class));</span><br><span class="line"><span class="comment">// userMessage.getId() == 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结果集into进指定的表描述中，然后在into至指定的POJO类</span></span><br><span class="line">List&lt;S2UserMessage&gt; userMessage2 = dslContext.select().from(S2_USER_MESSAGE)</span><br><span class="line">        .leftJoin(S1_USER).on(S1_USER.ID.eq(S2_USER_MESSAGE.USER_ID))</span><br><span class="line">        .where(S2_USER_MESSAGE.ID.eq(<span class="number">2</span>))</span><br><span class="line">        .fetch(r -&gt; &#123;</span><br><span class="line">            <span class="type">S2UserMessage</span> <span class="variable">fetchUserMessage</span> <span class="operator">=</span> r.into(S2_USER_MESSAGE).into(S2UserMessage.class);</span><br><span class="line">            fetchUserMessage.setUsername(r.get(S1_USER.USERNAME));</span><br><span class="line">            <span class="keyword">return</span> fetchUserMessage;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// userMessage.getId() == 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>fetch(Field field)</code><br><code>Field</code>是一个接口，代码生成器生成的表字段常量例如 <code>S1_USER.ID</code>, 都实现了 <code>Field</code> 接口，这个重载可以直接取出指定表字段，会自动根据传入的字段推测其类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; id = dslContext.select().from(S1_USER).where(S1_USER.ID.eq(<span class="number">1</span>))</span><br><span class="line">        .fetch(S1_USER.ID);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>fetch(String fieldName, Class type)</code><br>可以直接通过字段名称字符串获取指定字段值，可以通过第二个参数指定返回值，如果不指定，返回Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; idList = dslContext.select().from(S1_USER).where(S1_USER.ID.eq(<span class="number">1</span>))</span><br><span class="line">        .fetch(<span class="string">&quot;id&quot;</span>, Integer.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>fetch(int fieldIndex, Class type)</code><br>可以通过查询字段下标顺序进行查询指定字段，可以通过第二个参数指定返回值，如果不指定，返回Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; idList = dslContext.select(S1_USER.ID, S1_USER.USERNAME)</span><br><span class="line">        .from(S1_USER).where(S1_USER.ID.eq(<span class="number">1</span>)).fetch(<span class="number">0</span>, Integer.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="fetch-1"><a href="#fetch-1" class="headerlink" title="fetch"></a>fetch</h4><p>此方法可以将结果集处理为一个Map格式，此方法有很多重载，这里介绍几个常用的，注意，此方法作为key的字段必须确定是在当前结果集中是唯一的，如果出现重复key，此方法会抛出异常</p>
<ul>
<li><p><code>fetchMap(Field field, Class type)</code><br>以表字段值为key，返回一个 <code>K:V</code> 的Map对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, S1UserPojo&gt; idUserPojoMap = dslContext.select().from(S1_USER)</span><br><span class="line">                .fetchMap(S1_USER.ID, S1UserPojo.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>fetchMap(Feild field, Field field)</code><br>以表字段值为key，返回一个 <code>K:V</code> 的Map对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; idUserNameMap = dslContext.select().from(S1_USER)</span><br><span class="line">                .fetchMap(S1_USER.ID, S1_USER.USERNAME);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="fetchgroup"><a href="#fetchgroup" class="headerlink" title="fetchgroup"></a>fetchgroup</h4><p>此方法可以将结果集处理为一个Map格式，和<code>fetchMap</code>类似，只不过这里的值为一个指定类型的集合，通常在处理一对多数据时会用到</p>
<ul>
<li><p><code>fetchGroups(Field field, Class type)</code><br>以表字段值为Key，返回一个<code>K:List</code> 的Map对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;S2UserMessage&gt;&gt; userIdUserMessageMap = dslContext.select().from(S2_USER_MESSAGE)</span><br><span class="line">                .fetchGroups(S2_USER_MESSAGE.USER_ID, S2UserMessage.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>fetchGroups(Field keyField, Field valueField)</code></p>
</li>
<li><p>以表字段值为Key，返回一个K:List<V>的Map对象</V></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Integer&gt;&gt; userIdUserMessageIdMap = dslContext.select().from(S2_USER_MESSAGE)</span><br><span class="line">                .fetchGroups(S2_USER_MESSAGE.USER_ID, S2_USER_MESSAGE.ID);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><a href="https://jooq.diamondfsd.com/learn/section-1-how-to-start.html">参考JOOQ中文文档教程</a></p>
<p><a href="https://blog.csdn.net/qq_39940674/article/details/93383177">更多用法参考</a></p>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>jooq</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle</title>
    <url>/blknjyty.github.io/2022/07/07/gradle/</url>
    <content><![CDATA[<h2 id="Groovy简介"><a href="#Groovy简介" class="headerlink" title="Groovy简介"></a>Groovy简介</h2><p>整理自github仓库：<a href="https://github.com/kwf2030/gradle-tutorial">https://github.com/kwf2030/gradle-tutorial</a></p>
<p>为加强记忆和后续学习特此整理下来</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>基于JVM的的语言，Java家族中的一员,也是动态语言</p>
</blockquote>
<span id="more"></span>

<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote>
<ul>
<li>构建在Java语言之上，并结合了Python、Ruby、Smalltalk等语言的强大功能。</li>
<li>对Java开发者来说学习成本很低，无缝集成Java代码和类库。</li>
<li>既可用作面向对象语言，又可作为脚本语言使用。</li>
<li>引入了DSL（领域定义语言）概念，简单易读，方便维护。</li>
<li>支持函数式编程、运算符重载、闭包等特性。</li>
<li>可编译为Java字节码，在可运行Java的地方，就可运行Groovy。</li>
</ul>
</blockquote>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>as</td>
<td>简单粗暴的说就是类型强转（当然不仅仅是强转那么简单，目前只需要知道这个就够了），非常有用，到后面就知道了</td>
</tr>
<tr>
<td>def</td>
<td>变量定义（Groovy中使用def来定义一个变量，具体类型会在运行时进行类型推断，当然你也可以使用int, long等）</td>
</tr>
<tr>
<td>in</td>
<td>遍历集合之用，后面再说</td>
</tr>
</tbody></table>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p> Groovy中的数字在声明时可通过后缀的形式强制为其指定一个类型，例如： </p>
<table>
<thead>
<tr>
<th>类型</th>
<th>后缀</th>
</tr>
</thead>
<tbody><tr>
<td>BigInteger</td>
<td>G/g</td>
</tr>
<tr>
<td>Long</td>
<td>L/l</td>
</tr>
<tr>
<td>Integer</td>
<td>I/i</td>
</tr>
<tr>
<td>BigDecimal</td>
<td>G/g</td>
</tr>
<tr>
<td>Double</td>
<td>D/d</td>
</tr>
<tr>
<td>Float</td>
<td>F/f</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：assert 43i == new Integer(&#x27;43&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="数字分隔符"><a href="#数字分隔符" class="headerlink" title="数字分隔符"></a>数字分隔符</h4><p>当一个数字位数很多的时候，大家应该都有用鼠标比对的经验吧。</p>
<p>为数字添加分隔符用于增强其可读性，数字本身不受影响，例如：<code>12_038_472_361_561</code>，数字一目了然，分隔符加在第几位是随意的，不一定非要3个一组。</p>
<h4 id="科学计数"><a href="#科学计数" class="headerlink" title="科学计数"></a>科学计数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assert 1e3  == 1_000.0</span><br><span class="line">assert 2E4  == 20_000.0</span><br><span class="line">assert 3E+1 == 30.0</span><br><span class="line">assert 4e-2 == 0.04</span><br></pre></td></tr></table></figure>

<h4 id="幂指数运算"><a href="#幂指数运算" class="headerlink" title="幂指数运算"></a>幂指数运算</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assert 2 ** 3 instanceof Integer</span><br><span class="line">assert 5L ** 3 instanceof Long</span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="单引号字符串"><a href="#单引号字符串" class="headerlink" title="单引号字符串"></a>单引号字符串</h4><p><code>java.lang.String</code>的实例，支持转义，除了转义的字符外其它字符会原样输出，例如<code>&#39;Hello \&#39;Groovy\&#39;&#39;</code>。</p>
<h4 id="双引号字符串"><a href="#双引号字符串" class="headerlink" title="双引号字符串"></a>双引号字符串</h4><p>即所谓的<code>GString</code>，是<code>groovy.lang.GString</code>的实例，支持转义，可包含变量、表达式等（输出时会自动求值）</p>
<p>例如<code>&quot;Hello $groovy&quot;</code>，此处会去将groovy变量的值代入。</p>
<p>正如上面所说，另外一个比较有意思的是不仅支持变量，还支持表达式，例如<code>&quot;2+3=$&#123;2+3&#125;&quot;</code>会输出<code>2+3=5</code>。</p>
<p>更进一步，不仅是表达式，GString还支持语句，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;2+3=$&#123;def a = 2; def b = 3; a+b&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>如果只是单纯一个语句，没有任何返回值，该GString的计算结果就是<code>null</code>，所以最后一个语句应该返回一个值用来表示该次计算的结果（不用写<code>return</code>）。</p>
<p>尽管如此，请不要在GString中写过多过于复杂的语句，虽然看上去很NB的样子，最后也只会徒增烦恼。</p>
<p>GString还可以简写成$（不加大括号），不过仅适用于点号运算符前，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Hello $person.name&quot;</span><br></pre></td></tr></table></figure>

<h4 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h4><p>即三个单引号或三个双引号的字符串，不用像Java那样每一行都以<code>\</code>连字符结尾或字符串相加，会原样输出，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"> Hello Groovy</span><br><span class="line">    你好，我是Groovy！</span><br><span class="line">    单独来一行</span><br><span class="line">原样输出, Haha~~</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="斜杠字符串"><a href="#斜杠字符串" class="headerlink" title="斜杠字符串"></a>斜杠字符串</h4><p>即被斜杠包围的字符串，例如：<code>&quot;/.*foo.*/&quot;</code>。</p>
<p>常用于正则表达式和模板，这些字符串本身没有必要转义（斜杠本身除外），所以，被斜杠包围的字符串除了斜杠本身的转义外，其他会被原样输出（不会被转义）。</p>
<p><em>注：如果斜杠之间是空的，会被视为单行注释，而不会被视为空字符串。</em></p>
<p>还有一种<code>$/</code>字符串因为用的比较少这里就不说了，有兴趣的可以自行搜索。</p>
<p>下面是一个字符串对照说明表</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>语法</th>
<th>支持表达式等</th>
<th>多行</th>
<th>转义符</th>
</tr>
</thead>
<tbody><tr>
<td>单引号字符串</td>
<td><code>&#39;...&#39;</code></td>
<td>不支持</td>
<td>不支持</td>
<td>\</td>
</tr>
<tr>
<td>三单引号字符串</td>
<td><code>&#39;&#39;&#39;...&#39;&#39;&#39;</code></td>
<td>不支持</td>
<td>支持</td>
<td>\</td>
</tr>
<tr>
<td>双引号字符串</td>
<td><code>&quot;...&quot;</code></td>
<td>支持</td>
<td>不支持</td>
<td>\</td>
</tr>
<tr>
<td>三双引号字符串</td>
<td><code>&quot;&quot;&quot;...&quot;&quot;&quot;</code></td>
<td>支持</td>
<td>支持</td>
<td>\</td>
</tr>
<tr>
<td>斜杠字符串</td>
<td><code>/.../</code></td>
<td>支持</td>
<td>支持</td>
<td>\</td>
</tr>
<tr>
<td>美元斜杠字符串</td>
<td><code>$/.../$</code></td>
<td>支持</td>
<td>支持</td>
<td>$</td>
</tr>
</tbody></table>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>Java8中正式开始支持闭包，语法与Groovy中的闭包不太一样，这里仅简单介绍一下Groovy中的闭包，闭包的强大之处远不止于此。</p>
<p>初看闭包，长的与Java（Java8之前）的匿名内部类极为相似，比如实现一个<code>Listener</code>接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在Java中</span><br><span class="line">add(new Listener() &#123;</span><br><span class="line">	@Override</span><br><span class="line">	public void listen(Object obj) &#123;...&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//在Groovy的闭包中，这里用到了as关键字将闭包强转为Listener的实现</span><br><span class="line">def c = &#123; Object obj -&gt;</span><br><span class="line">	println obj</span><br><span class="line">&#125; as Listener</span><br><span class="line">add c</span><br></pre></td></tr></table></figure>

<p>就是这么简单，初学者还可以将闭包理解为可以传递的方法/函数，在Java中，方法/函数是不能传递的，现在Groovy中，我们就可以这么做了。上面的代码可以理解为给<code>add</code>方法传递了一个方法，在add方法体内调用执行这个传递的方法</p>
<p>闭包的形式为（<code>-&gt;</code>前面为闭包的参数）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; Type1 param1, Type2 param2... -&gt;</span><br><span class="line">	//闭包代码...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义一个闭包与定义变量没区别</span><br><span class="line">def var = &#123; p -&gt;</span><br><span class="line">	println(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>闭包的参数类型可以省略，当参数只有一个时，可以简写成<code>&#123;...&#125;</code>，唯一的参数用<code>it</code>表示（隐藏参数），调用闭包使用闭包的<code>call()</code>方法或者直接使用方法的调用形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//以下调用闭包的形式均是合法的</span><br><span class="line">var.call(5)</span><br><span class="line">var.call 8</span><br><span class="line">var(2)</span><br><span class="line">var 3</span><br><span class="line"></span><br><span class="line">//如果将一个闭包当作一个接口的实现，则调用时稍有不同</span><br><span class="line">//假设闭包var实现了上面的Listener接口，现在需要调用Listener接口的listen方法</span><br><span class="line">var.listen(obj)</span><br></pre></td></tr></table></figure>

<p>既然闭包可以作为参数传递，那么返回一个闭包也必然是可以的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def method() &#123;</span><br><span class="line">	return &#123;</span><br><span class="line">		println &quot;Hello World&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于闭包的几个隐含变量：</p>
<ul>
<li>it：上面已经说过了，如果一个闭包只有一个参数，可以省略，此时该参数的名字是<code>it</code></li>
<li>this：与Java中的this一致，定义该闭包的类的引用</li>
<li>owner：该层闭包的对象（如果闭包只有一层，则与this一致）</li>
<li>delegate：GroovyObject默认实现了代理设计模式，让代理来的更加方便，默认值是owner，但是可以随时改变代理对象。</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><h5 id="List的定义"><a href="#List的定义" class="headerlink" title="List的定义"></a>List的定义</h5><p>Groovy自身没有定义任何List类型，所有的<code>List</code>都是<code>java.util.List</code>类型，在定义时，默认使用<code>ArrayList</code>实现，当然也可以指定类型（例如<code>LinkedList</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//List的定义类似Java的数组，放在中括号之间</span><br><span class="line">def list = [1,2,3,4]</span><br><span class="line"></span><br><span class="line">assert list instanceof List</span><br><span class="line">assert list.size() == 4</span><br><span class="line"></span><br><span class="line">//也可以在List中包含不同类型的值</span><br><span class="line">def list2 = [1, &quot;1&quot;, true]</span><br></pre></td></tr></table></figure>

<p>上面定义的<code>List</code>都是<code>ArrayList</code>类型，如果要使用其他类型，必须在声明时指定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//下面两种都将list定义为LinkedList</span><br><span class="line">def list1 = [1,2,3] as LinkedList</span><br><span class="line">LinkedList list2 = [1,2,3]</span><br></pre></td></tr></table></figure>

<h5 id="List的操作"><a href="#List的操作" class="headerlink" title="List的操作"></a>List的操作</h5><p><code>List</code>的操作（读和写）可以通过类似数组下标的方式来实现，下标是正数为正向顺序（从零开始计数），下标是负数为反向顺序（从-1开始计数）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def list = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><span class="line">assert list[0] == &#x27;a&#x27;</span><br><span class="line">assert list[-1] == &#x27;d&#x27;</span><br><span class="line"></span><br><span class="line">//将第三个元素改为&#x27;X&#x27;</span><br><span class="line">list[2] = &#x27;X&#x27;</span><br><span class="line"></span><br><span class="line">//List的&lt;&lt;(左移运算符)已经重载，意思是向List的尾部添加一个元素，等同于List.add()</span><br><span class="line">list &lt;&lt; &#x27;Y&#x27;</span><br><span class="line">assert list[4] == &#x27;Y&#x27;</span><br><span class="line"></span><br><span class="line">//一次访问两个元素，返回一个List</span><br><span class="line">assert list[2,3] == [&#x27;c&#x27;, &#x27;d&#x27;]</span><br><span class="line"></span><br><span class="line">//一次访问第一个到第三个元素，返回一个List</span><br><span class="line">assert list[0..2] == [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure>

<p><code>List</code>可嵌套，类似多维数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def list = [[1,2],[3,4]]</span><br><span class="line">assert list[1][0] == 3</span><br></pre></td></tr></table></figure>

<p><em>Groovy的<code>List</code>使用非常方便，其实为了方便理解，完全可以把<code>List</code>当成长度可扩展的数组。</em></p>
<h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><p>在Groovy中，数组与<code>List</code>的格式是一样的，所以要使用数组形式，必须在定义时明确指类型或者强转（类似于使用非<code>ArrayList</code>的<code>List</code>类型）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] arr = [&#x27;AA&#x27;, &#x27;BB&#x27;, &#x27;CC&#x27;]</span><br><span class="line">assert arr instanceof String[]</span><br><span class="line"></span><br><span class="line">def num = [1, 2, 3] as int[]</span><br><span class="line">assert num instanceof int[]</span><br><span class="line"></span><br><span class="line">//多维数组</span><br><span class="line">Integer[][] matrix = [[1,2], [3,4]]</span><br><span class="line">assert matrix instanceof Integer[][]</span><br></pre></td></tr></table></figure>

<p>数组的访问与<code>List</code>完全一致，这里就不赘述了</p>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>Map</code>的语法类似于JSON数组，可使用两种形式访问/操作：</p>
<ul>
<li><code>map[key]</code> 类似数组的访问形式</li>
<li><code>map.key</code> 类似对象属性的访问形式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def colors = [red: &#x27;#FF0000&#x27;, green: &#x27;#00FF00&#x27;, blue: &#x27;#0000FF&#x27;]</span><br><span class="line">assert colors[&#x27;red&#x27;] == &#x27;#FF0000&#x27;</span><br><span class="line">assert colors.green = &#x27;#00FFFF&#x27;</span><br><span class="line"></span><br><span class="line">colors[&#x27;pink&#x27;] = &#x27;FF00FF&#x27;</span><br><span class="line">colors.yellow = &#x27;#FFFF00&#x27;</span><br><span class="line"></span><br><span class="line">//Groovy默认会使用`java.util.LinkedHashMap`来创建Map</span><br><span class="line">//要使用其他类型，请在声明时指定或使用强转</span><br><span class="line">assert colors instanceof java.util.LinkedHashMap</span><br></pre></td></tr></table></figure>

<p>如果访问一个不存在的key，则会返回null</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assert colors[&#x27;white&#x27;] == null</span><br></pre></td></tr></table></figure>

<p>上述的<code>colors</code>在创建时，虽然key没有用引号，但是Groovy会使用String作为key，这样就会产生一个问题 - 如果key中包含变量怎么办，会不会重复或导致语义混淆（怎么知道red是一个字符串而不是先前定义过的变量）？</p>
<p>Groovy可以使用其他类型来作为key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def map = [1:&#x27;hello&#x27;, 2:&#x27;world&#x27;]</span><br><span class="line">assert map[1] == &#x27;hello&#x27;</span><br></pre></td></tr></table></figure>

<p>数字不会导致语义混淆，因为它就是数字，不可能是变量，所以Groovy在创建上述Map时，就是用数字来作为key。</p>
<p><strong>除了数字之外，Groovy会将其他方式定义的key作为字符串存储，如果想要在key中使用变量，请使用小括号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def key = &#x27;name&#x27;</span><br><span class="line"></span><br><span class="line">//此时map1中只有键名为&#x27;key&#x27;的映射，而不是&#x27;name&#x27;</span><br><span class="line">def map1 = [key: &#x27;Mike&#x27;]</span><br><span class="line">assert map1.contains(&#x27;name&#x27;)</span><br><span class="line"></span><br><span class="line">//此时map2中只有键名为&#x27;name&#x27;的映射，而不是&#x27;key&#x27;</span><br><span class="line">def map2 = [(key): &#x27;Mike&#x27;]</span><br><span class="line">assert map1.contains(&#x27;key&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><h3 id="做什么的"><a href="#做什么的" class="headerlink" title="做什么的"></a>做什么的</h3><ul>
<li>约定优于配置，但绝不强制约定</li>
<li>强大的依赖管理（基于Apache Ivy）</li>
<li>强大的多项目构建</li>
<li>完全兼容Ant和Maven/Ivy</li>
<li>Groovy构建脚本</li>
<li>语义化的脚本编写</li>
</ul>
<h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><ul>
<li>下载、解压、配置环境变量、配置本地仓库</li>
</ul>
<h3 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h3>]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s</title>
    <url>/blknjyty.github.io/2022/07/05/k8s/</url>
    <content><![CDATA[<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><h4 id="1-1-什么是-Kubernetes"><a href="#1-1-什么是-Kubernetes" class="headerlink" title="1.1 什么是 Kubernetes"></a>1.1 什么是 <strong>Kubernetes</strong></h4> <span id="more"></span> 

<blockquote>
<p>我们只到Docker应用容器引擎，使得服务的创建、销毁、移植等变得十分快捷、方便。Kubernate可以理解为管理、编排容器的工具，管理多个应用(集群规模)的创建、部署、服务、扩容缩容、更新等等。就是类似于Docker-compose的功能。</p>
<p>   除集群规模管理外，k8s可以更快的更新新版本，打包应用，更新的时候可以做到不用中断服务，服务器故障不用停机，从开发环境到测试环境到生产环境的迁移极其方便，一个配置文件搞定，一次生成image，到处运行 </p>
</blockquote>
<h4 id="1-2-Kubernetes-在哪些地方使用"><a href="#1-2-Kubernetes-在哪些地方使用" class="headerlink" title="1.2  Kubernetes 在哪些地方使用"></a>1.2  <strong>Kubernetes</strong> 在哪些地方使用</h4><p>我们在企业生产过程中能够的使用步骤一般是：</p>
<ul>
<li><p>创建集群：master管理、监控，node打工人</p>
</li>
<li><p>部署应用：通过k8s的方式(默认容器是docker),即在yaml文件中指定容器镜像等配置</p>
</li>
<li><p>发布应用：部署完应用后必须发布才能被外部访问，因为此时的ip地址只有同一个集群才能访问</p>
</li>
<li><p>扩展应用：比如遇上双11等活动对机器进行扩容，过后再进行缩容。</p>
</li>
<li><p>更新应用：有新版本了，滚动更新，根据新的image创建一个pod，分配各种资源，然后自动负载均衡，删除老的pod，然后继续更新，不会中断服务； 更新错了怎么办，不会影响生产业务，回滚就好了</p>
</li>
</ul>
<h4 id="1-3-master"><a href="#1-3-master" class="headerlink" title="1.3 master"></a>1.3 master</h4><blockquote>
<p>Kubernetes 可以管理大规模的集群，使集群中的每一个节点彼此连接，能够像控制一台单一的计算机一样控制整个集群。</p>
<p> <strong>master</strong> 是集群的”大脑”，负责管理整个集群：像应用的调度、更新、扩缩容等。</p>
</blockquote>
<p>master上包含组件：</p>
<ul>
<li> <strong>kube-apiserver</strong> : 集群入口，所有操作都经过此</li>
<li> <strong>kube-controller-manager</strong> ：所有资源的控制中心</li>
<li> <strong>kube-scheduler</strong> ：具体负责资源调度的进程</li>
</ul>
<h4 id="1-4-node"><a href="#1-4-node" class="headerlink" title="1.4 node"></a>1.4 node</h4><blockquote>
<p>就是具体”干活”的，一个Node一般是一个虚拟机或物理机，它上面事先运行着 docker 服务和 kubelet 服务（ Kubernetes 的一个组件），当接收到 master 下发的”任务”后，Node 就要去完成任务（用docker 运行一个指定的应用）</p>
</blockquote>
<p>node上包含的组件：</p>
<ul>
<li> <strong>kubelet</strong> ：node上的Agent，负责pod对应容器的创建、启停等，听master指挥干活并随时汇报。</li>
<li> <strong>kube-proxy</strong> ： 在Node节点上实现Pod网络代理，实现Kubernetes Service的通信和负载均衡机制的重要组件。 </li>
<li> ** <strong>Container Runtime(docker)</strong> ： 默认Docker引擎，负责本机的容器的创建和管理工作 </li>
</ul>
<h4 id="1-5-Etcd"><a href="#1-5-Etcd" class="headerlink" title="1.5 Etcd"></a>1.5 Etcd</h4><blockquote>
<p>Etcd是Kubernetes提供默认的键值存储系统，保存所有集群数据，使用时需要为Etcd数据提供备份计划 </p>
</blockquote>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\1657022314159.png" alt="1657022314159"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/1657022314159.png" class title="Kubernetes网络架构图">

<h4 id="1-6-对象"><a href="#1-6-对象" class="headerlink" title="1.6 对象"></a>1.6 对象</h4><h5 id="1-6-1-Pod"><a href="#1-6-1-Pod" class="headerlink" title="1.6.1 Pod"></a>1.6.1 Pod</h5><blockquote>
<p>集群调度的最小单元，Pod 是一组容器（当然也可以只有一个）。容器本身就是一个小盒子了，Pod 相当于在容器上又包了一层小盒子。所以Pod里的容器有如下特点：</p>
<ul>
<li>可以直接通过 volume 共享存储。</li>
<li>有相同的网络空间，通俗点说就是有一样的ip地址，有一样的网卡和网络设置。</li>
<li>多个容器之间可以“了解”对方，比如知道其他人的镜像，知道别人定义的端口等。</li>
</ul>
</blockquote>
<p>通俗解释： 再打个形象的比喻，在同一个 Pod 里的几个 Docker 服务/程序，好像被部署在同一台机器上，可以通过 localhost 互相访问，并且可以共用 Pod 里的存储资源 </p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\1658136737531.png" alt="1658136737531"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/1658136737531.png" class title="pod">

<h5 id="1-6-2-Service"><a href="#1-6-2-Service" class="headerlink" title="1.6.2 Service"></a>1.6.2 Service</h5><blockquote>
<p>即服务发现，不管Deployment的Pod有多少个，不管它是更新、销毁还是重建，Service总是能发现并维护好它的ip列表。</p>
<p>Service通过标签Label，知道其负责了哪几个Pod。这样就更加灵活，使其和Deployment解耦开来</p>
</blockquote>
<h5 id="1-6-3-Volume"><a href="#1-6-3-Volume" class="headerlink" title="1.6.3 Volume"></a>1.6.3 Volume</h5><blockquote>
<p> Volume(存储卷)Volume是Pod中能够被多个容器共享的磁盘目录。即 <strong>数据卷 volume 是 Pod 内部的磁盘资源</strong>。 </p>
<p> Kubernetes提供了非常丰富的Volume类型:</p>
<ul>
<li>emptyDir：临时空间，Pod分配到Node时创建，无须指定宿主主机上对应的目录，在Kubernetes会自动分配当前Node的一个目录，当Pod被移除时，emptyDir中的数据也会永久删除。</li>
<li>hostPath：为Pod挂载宿主主机上的文件或目录。用于数据永久保存。在不同的Node上具有相同配置的Pod,可能会因为宿主机上的目录和文件不同而导致Volume上的目录和文件的访问结果不一致。</li>
<li>gcePersistentDisk：使用谷歌公有云提供的永久磁盘。数据永久保存。</li>
<li>NFS：NFS 是 Network File System 的缩写，即网络文件系统。Kubernetes 中通过简单地配置就可以挂载 NFS 到 Pod 中，而 NFS 中的数据是可以永久保存的，同时 NFS 支持同时写操作。</li>
</ul>
</blockquote>
<h5 id="1-6-4-Namespace"><a href="#1-6-4-Namespace" class="headerlink" title="1.6.4 Namespace"></a>1.6.4 Namespace</h5><blockquote>
<p>  namespace 跟 Pod 没有直接关系，而是 K8S 另一个维度的对象 。 <strong>namespace 是为了把一个 K8S 集群划分为若干个资源不可共享的虚拟集群而诞生的</strong>。 </p>
<p>  也就是说，<strong>可以通过在 K8S 集群内创建 namespace 来分隔资源和对象</strong>。比如我有 2 个业务 A 和 B，那么我可以创建 ns-a 和 ns-b 分别部署业务 A 和 B 的服务，如在 ns-a 中部署了一个 deployment，名字是 hello，返回用户的是“hello a”；在 ns-b 中也部署了一个 deployment，名字恰巧也是 hello，返回用户的是“hello b”（要知道，在同一个 namespace 下 deployment 不能同名；但是不同 namespace 之间没有影响）。本文提到的所有对象，都是在 namespace 下的； </p>
</blockquote>
<h5 id="1-6-5-Deployment"><a href="#1-6-5-Deployment" class="headerlink" title="1.6.5 Deployment"></a>1.6.5 Deployment</h5><blockquote>
<p> 通过Kubernetes的 <strong>Deployment</strong> 的配置文件去描述应用，比如应用叫什么名字、使用的镜像名字、要运行几个实例、需要多少的内存资源、cpu 资源等等。即应用管理者，是用于部署应用的对象。<strong>不会单独创建一个pod资源对象，而是创建Deployment对象，通过Deployment来管理pod。</strong> </p>
</blockquote>
<h5 id="1-6-6-ReplicaSet"><a href="#1-6-6-ReplicaSet" class="headerlink" title="1.6.6 ReplicaSet"></a>1.6.6 ReplicaSet</h5><blockquote>
<p> ReplicaSet 实现了 Pod 的多副本管理。使用 Deployment 时会自动创建 ReplicaSet，也就是说 Deployment 是通过 ReplicaSet 来管理 Pod 的多个副本，所以我们通常不需要直接使用 ReplicaSet。  因此，它通常用来保证给定数量的、完全相同的 Pod 的可用性。 </p>
</blockquote>
<p>通俗解释： ReplicaSet 的作用就是管理和控制 Pod，管控他们好好干活。但是，ReplicaSet 受控于 Deployment。形象来说，<strong>ReplicaSet 就是总包工头手下的小包工头</strong>。 </p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\1658136910839.png" alt="1658136910839"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/1658136910839.png" class title="rs">

<h3 id="2-项目部署"><a href="#2-项目部署" class="headerlink" title="2.项目部署"></a>2.项目部署</h3><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\20210111140539700.png" alt="20210111140539700"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/20210111140539700.png" class title="k8s架构图">

<blockquote>
<ul>
<li><p>服务器上有Docker和相关镜像的前提下</p>
</li>
<li><p>创建Deployment的YAML描述文件，根据yaml文件创建服务和集群</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl create deployment countgame --image=192.168.137.110:5000/countgame:0.91 --dry-run -o yaml  &gt; deploy.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pod的最基础的yaml文件最少需要以下的几个参数</span><br><span class="line">apiVersion: v1 # API版本号，注意：具有多个，不同的对象可能会使用不同API</span><br><span class="line">kind: Pod  # 对象类型，pod</span><br><span class="line">metadata:  # 元数据</span><br><span class="line">name: string # POD名称</span><br><span class="line">namespace: string # 所属的命名空间</span><br><span class="line">spec: # specification of the resource content(资源内容的规范)</span><br><span class="line">containers: # 容器列表</span><br><span class="line">      - name: string # 容器名称</span><br><span class="line">image: string # 容器镜像</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\2021011113290971.png" alt="2021011113290971"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/2021011113290971.png" class title="deployment配置文件">

<ul>
<li><p>创建Deployment对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f deploy.yaml </span><br></pre></td></tr></table></figure></li>
<li><p>创建了Deployment对象再查看pod</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\20210111143610186.png" alt="20210111143610186"></p>
<p>​      <img src="/blknjyty.github.io/2022/07/05/k8s/20210111143610186.png" class title="一个pod图"></p>
<p>​         x修改 spec.replicas为3之后再查看，就有三个pod。</p>
<ul>
<li><p>查看pod启动日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl logs +pod的name</span><br></pre></td></tr></table></figure></li>
</ul>
<p>此时集群内部已经可以访问项目了。··············</p>
<ul>
<li><p>使集群对外部提供服务，创建service关联，对外暴露ip提供服务</p>
<blockquote>
<p>运行pod ip是docker网桥的IP地址段进行分配的，通常是一个虚拟的二层网络，外部网络并没有办法访问，并且，pod ip是随时会变的，不是固定的，k8s引入了Service的概念，通过Service管理这些pod，Service创建后的Service IP是固定的。但是Service IP(Cluster IP)是一个虚拟的IP,由Kubernetes管理和分配P地址，外部网络无法访问。k8s有三种方式暴露Service给外部网络访问。</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\20210111163501631.png" alt="20210111163501631"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/20210111163501631.png" class title="pod的ip"></blockquote>
</li>
</ul>
</blockquote>
<h3 id="3-Serivce暴露ip方式"><a href="#3-Serivce暴露ip方式" class="headerlink" title="3.Serivce暴露ip方式"></a>3.Serivce暴露ip方式</h3><h4 id="3-1-NodePort"><a href="#3-1-NodePort" class="headerlink" title="3.1 NodePort"></a>3.1 NodePort</h4><blockquote>
<p> 在k8s上可以给Service设置成NodePort类型，这样的话可以让Kubernetes在其所有节点上开放一个端口给外部访问（所有节点上都使用相同的端口号）， 并将传入的连接转发给作为Service服务对象的pod。这样我们的pod就可以被外部请求访问到 </p>
</blockquote>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\20210111203759964.png" alt="20210111203759964"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/20210111203759964.png" class title="NodePort方式">

<ul>
<li><p>创建serivice的yaml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment countgame --port=8082 --target-port=8082 --type=NodePort -o yaml --dry-run &gt; svc.yaml</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<p>1.countgame 为指定的service对象名称<br>2.- -port 是指service暴露在cluster ip上的端口，通过<cluster ip>:port 访问集群内部service的入口<br>3.- -target-port指 对应pod容器里面监听的端口<br>4.- -type=NodePort ， <nodeIP>:nodePort 是提供给集群外部客户访问service的入口<br>5.–dry-run表示测试不在k8s运行（不会具体执行该命令）<br>6.-o yaml 生成yaml格式<br>7.最后面的 “&gt; deploy.yaml” 表示将生成yaml内容输出到deploy.yaml文件</nodeIP></cluster></p>
<p><strong>配置文件内容基本如下：</strong></p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\2021011117261340-1657085291453.png" alt="2021011117261340"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/2021011117261340-1657085291453.png" class title="service配置文件内容"></li>
<li><p>创建Service对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建service</span><br><span class="line">kubectl apply -f svc.yaml</span><br><span class="line">#查看service</span><br><span class="line">kubectl get svc</span><br><span class="line">#查看service关联的pod</span><br><span class="line">kubectl describe svc coutgame</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\20210111172704176.png" alt="20210111172704176"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/20210111172704176.png" class title="创建并查看">

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\20210111200610224.png" alt="20210111200610224"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/20210111200610224.png" class title="查看"></li>
<li><p> 可以看到service名称为countgame的service的对外端口为11413，会把通过这个端口访问的请求转发到service对象关联的pod对象的8082端口上 。访问192.168.137.110：11413/countgame/user/toGame可以访问项目</p>
</li>
<li><p><strong>缺点： 服务一旦多起来，NodePort 在每个节点上开启的端口会及其庞大，而且难以维护，所以生产环境不建议这么使用</strong> </p>
</li>
<li><p><strong>优点：</strong> <strong>Service 是 K8S 服务的核心，屏蔽了服务细节，统一对外暴露服务接口，真正做到了“微服务”</strong>。举个例子，我们的一个服务 A，部署了 3 个备份，也就是 3 个 Pod；对于用户来说，只需要关注一个 Service 的入口就可以，而不需要操心究竟应该请求哪一个 Pod。优势非常明显：<strong>一方面外部用户不需要感知因为 Pod 上服务的意外崩溃、K8S 重新拉起 Pod 而造成的 IP 变更，外部用户也不需要感知因升级、变更服务带来的 Pod 替换而造成的 IP 变化，另一方面，Service 还可以做流量负载均衡</strong> </p>
</li>
</ul>
<h4 id="3-2-Ingress"><a href="#3-2-Ingress" class="headerlink" title="3.2 Ingress"></a>3.2 Ingress</h4><blockquote>
<p> Service 主要负责 K8S 集群内部的网络拓扑。那么集群外部怎么访问集群内部呢？这个时候就需要 Ingress 了 .</p>
<p>Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。</p>
<p>Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。</p>
</blockquote>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/05/k8s/gitee\Blog\source_posts\k8s\2021011121501187.png" alt="2021011121501187"></p>
<img src="/blknjyty.github.io/2022/07/05/k8s/2021011121501187.png" class title="LoadBalane">

<p>参考：<a href="https://blog.csdn.net/qq_21187515/article/details/112359593?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165700886516782425182493%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165700886516782425182493&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112359593-null-null.142%5Ev30%5Epc_search_v2,185%5Ev2%5Econtrol&utm_term=k8s&spm=1018.2226.3001.4187">博文1</a></p>
<p><a href="https://blog.csdn.net/TM6zNf87MDG7Bo/article/details/79621510?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165700886516782425182493%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165700886516782425182493&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-79621510-null-null.142%5Ev30%5Epc_search_v2,185%5Ev2%5Econtrol&utm_term=k8s&spm=1018.2226.3001.4187">博文2</a></p>
<p><a href="http://www.imooc.com/article/285913?block_id=tuijian_wz">博文3</a></p>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s实操</title>
    <url>/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<h3 id="布置集群参考文章"><a href="#布置集群参考文章" class="headerlink" title="布置集群参考文章"></a><a href="https://blog.csdn.net/heian_99/article/details/103933928">布置集群参考文章</a></h3><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h4><span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建名为nginx-deployment 的nginx应用</span><br><span class="line">kubectl run nginx-deployment --image=wangyanglinux/myapp:v1  --port=80 --replicas=1</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\k8s实操\1658138094097.png" alt="1658138094097"></p>
 <img src="/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/1658138094097.png" class title="那你呢">

<h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">kubectl get pod </span><br><span class="line">//</span><br><span class="line">kubectl get pod -o wode</span><br><span class="line">//</span><br><span class="line">kubectl get deployment</span><br></pre></td></tr></table></figure>

<h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl delete deployment deployment名字</span><br><span class="line">kubectl delete pod pod名字</span><br></pre></td></tr></table></figure>

<h4 id="副本集扩容"><a href="#副本集扩容" class="headerlink" title="副本集扩容"></a>副本集扩容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl scale --replicas=3 deployment/nginx-deployment</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\k8s实操\1658141626141.png" alt="1658141626141"></p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\k8s实操\1658141641101.png" alt="1658141641101"></p>
 <img src="/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/1658141641101.png" class title="你那你看">

<h4 id="修改pod端口"><a href="#修改pod端口" class="headerlink" title="修改pod端口"></a>修改pod端口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//80修改为30003</span><br><span class="line">kubectl expose deployment nginx-deployment --port=30003 --target-port=80</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\k8s实操\1658141731008.png" alt="1658141731008"></p>
<img src="/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/1658141731008.png" class title="让你男人">

<p>修改Service类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl edit svc nginx-deployment</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\k8s实操\1658141810139.png" alt="1658141810139"></p>
<img src="/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/1658141810139.png" class title="斯诺克嫩">

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/gitee\Blog\source_posts\k8s实操\1658141824674.png" alt="1658141824674"></p>
<img src="/blknjyty.github.io/2022/07/25/k8s%E5%AE%9E%E6%93%8D/1658141810139.png" class title="说少了">



]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/blknjyty.github.io/2022/07/06/maven/</url>
    <content><![CDATA[<h5 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h5><blockquote>
<p>1.jar包依赖2.jar依赖传递3.jar版本冲突4.项目生命周期</p>
</blockquote>
<span id="more"></span>

<h5 id="文件解析："><a href="#文件解析：" class="headerlink" title="文件解析："></a>文件解析：</h5><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/06/maven/gitee\TechnologyStack\images\1625198265(1).jpg" alt="1625198265(D:\gitee\Blog\source\_posts\maven\1625198265(1).jpg)"><img src="/blknjyty.github.io/2022/07/06/maven/1625198265(1).jpg" class title="maven目录"></p>
<h5 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h5><p>1.找mvn可执行文件—bin下面的运行脚本</p>
<p>2.找配置文件 conf/setting.xml ,优先找目录优先级：~/.m2 &gt; M2_HOME/conf</p>
<p>3.本地仓库寻找插件clean，没有则去远程仓库下载</p>
<p>4.运行插件</p>
<h5 id="标签详解："><a href="#标签详解：" class="headerlink" title="标签详解："></a>标签详解：</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>项目包名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目唯一标识<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>版本号<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打包类型：jar/war/pom--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--父级文件用pm：install时不会生成jar或者war包</span></span><br><span class="line"><span class="comment">	主要作用：1.可以通过&lt;modules&gt;标签来整合子模块的编译顺序（Maven引入依赖使用最短路径原则，例如a&lt;–b&lt;–c1.0 ，d&lt;–e&lt;–f&lt;–c1.1，由于路径最短，最终引入的为c1.0；但路径长度相同时，则会引入先申明的依赖）。因此尽量将更加底层的service放在更先的位置优先加载依赖较为合适。</span></span><br><span class="line"><span class="comment">2.可以将一些子项目中共用的依赖或将其版本统一写到父级配置中，以便统一管理。</span></span><br><span class="line"><span class="comment">3.groupId, artifactId, version能直接从父级继承，减少子项目的pom配置。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需要部署用war：编译后的.class文件按层级结构形成文件树后打包形成的压缩包。它会将项目中依赖的所有jar包都放在WEB-INF/lib这个文件夹下--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内部调用用jar：当我们使用mvn install命令的时候，能够发现在项目中与src文件夹同级新生成了一个target文件夹，这个文件夹内的classes文件夹即为刚才提到的编译后形成的文件夹--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>打包类型<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 </span></span><br><span class="line"><span class="comment">            目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact </span></span><br><span class="line"><span class="comment">        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         	<span class="comment">&lt;!--依赖的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， </span></span><br><span class="line"><span class="comment">                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span></span><br><span class="line"><span class="comment">                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 </span></span><br><span class="line"><span class="comment">                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--构建项目所需要的信息--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用的插件列表 。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--插件在仓库里的group ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--被使用的插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--execution元素包含了插件执行需要的信息 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--配置的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--配置是否被传播到子POM --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--项目引入插件所需要的额外依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            ......</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="maven仓库"><a href="#maven仓库" class="headerlink" title="maven仓库"></a>maven仓库</h5><p>分为本地和远程两个仓库</p>
<p>本地：~/.m2/settings.xml  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>本地仓库地址<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>远程：在配置文件中找到repositories和mirror，设置远程仓库和镜像。</p>
<p>mirror相当于一个拦截器，它会拦截maven对remote repository的相关请求，把请求里的remote repository地址，重定向到mirror里配置的地址。</p>
<h5 id="mvn构建生命周期："><a href="#mvn构建生命周期：" class="headerlink" title="mvn构建生命周期："></a>mvn构建生命周期：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">:valid：验证项目;</span><br><span class="line">:compile：执行编译;</span><br><span class="line">:test:使用合适的框架进行测试;</span><br><span class="line">:package：创建jar/war包;</span><br><span class="line">:verify:对继承测试的结果进行检查;</span><br><span class="line">:install：打包到本地仓库，供其他项目使用;</span><br><span class="line">:depoly：拷贝到远程仓库;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<p>为了完成 default 生命周期，这些阶段（包括其他未在上面罗列的生命周期阶段）将被按顺序地执行。</p>
<p>Maven 有以下三个标准的生命周期：</p>
<ul>
<li><strong>clean</strong>：项目清理的处理</li>
<li>**default(或 build)**：项目部署的处理</li>
<li><strong>site</strong>：项目站点文档创建的处理</li>
</ul>
<p>常用命令和生命周期的关系：</p>
<p><em>注：当一个阶段通过 Maven 命令调用时，例如 mvn compile，只有该阶段之前以及包括该阶段在内的所有阶段会被执行。</em></p>
<p> mvn clean: 移除上一下次构建生成的文件（具体涉及clean生命周期，有兴趣可以自己查查）</p>
<p>mvn clean install :执行clean，然后再从头valid一直到install</p>
<p>clean install -DskipTests：跳过测试执行clean install</p>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>springEL</title>
    <url>/blknjyty.github.io/2022/07/25/springEL/</url>
    <content><![CDATA[<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>参考文档：<a href="https://blog.csdn.net/u012045045/article/details/85338962">https://blog.csdn.net/u012045045/article/details/85338962</a></p>
<span id="more"></span>

<blockquote>
<ol>
<li>文字表达<ol start="2">
<li>算术运算符<pre><code>3.  正则表达式
    4.  类
        5.  访问属性,数组,集合和Map
            6.  方法调用
                7.  关系运算符
                    8.  任务
                        9.  调用构造方法
                            10.  关联bean对象
                                11.  构造数组
                                    12.  内联集合
                                        13.  内联Map
                                            14.  三元云算符
                                                15.  变量
                                                    16.  用户定义方法
                                                        17.  集合投影
                                                            18.  集合选择
                                                                19.  模板表达式 
</code></pre>
</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在类上标注</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="comment">//文件里存放的是book.name = spring boot，在该类里面取值就可以如下</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;book.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String normal;</span><br><span class="line">spring boot</span><br></pre></td></tr></table></figure>

<h4 id="字符串注入"><a href="#字符串注入" class="headerlink" title="字符串注入"></a>字符串注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;spring boot&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String spring;</span><br></pre></td></tr></table></figure>

<h4 id="系统属性取值"><a href="#系统属性取值" class="headerlink" title="系统属性取值"></a>系统属性取值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出是PC的操作系统,例如Windows 10,他能获取系统的属性值</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;os.name&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String osName;</span><br></pre></td></tr></table></figure>

<h4 id="调用类的方法"><a href="#调用类的方法" class="headerlink" title="调用类的方法"></a>调用类的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出的是随机的一个0~100的double值,T()中填写的是调用的java中类.他可以直接使用算术运算符计算值</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;T(java.lang.Math).random() * 100&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> randomNumber;</span><br></pre></td></tr></table></figure>

<h4 id="获取类的属性"><a href="#获取类的属性" class="headerlink" title="获取类的属性"></a>获取类的属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getpName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setpName</span><span class="params">(String pName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pName = pName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意:这里Person类的pName属性是私有的,所以必须提供get方法.不然会报错.但是如果pName是共有方法,则不需要提供get方法也可以获取值.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//然后去获取其pName:</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;person.pName&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String pName;</span><br></pre></td></tr></table></figure>

<h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Person为例</span><br><span class="line">@Value(&quot;#&#123;person.getpName().toUpperCase()&#125;&quot;)</span><br><span class="line">private String pName;</span><br></pre></td></tr></table></figure>

<p> 如果是null会抛出org.springframework.beans.factory.UnsatisfiedDependencyException的异常</p>
<h4 id><a href="#" class="headerlink" title="?."></a>?.</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//?号的作用就是在调用方法之前,先判断结果是不是null值,如果是则直接返回null,如果不是,才会继续调用后面的方法.</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;person.getpName()?.toUpperCase()&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String pName;</span><br></pre></td></tr></table></figure>

<h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;(1+2)&gt;3&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> count;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;(1+2)&gt;3 ? &#x27;yes&#x27; : &#x27;no&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String count;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="？："><a href="#？：" class="headerlink" title="？："></a>？：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;person.getpName()?:&#x27;zhangsan&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String pName;</span><br><span class="line"><span class="comment">//有值取值，无值返回zhangsan</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pName, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pName = pName;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setpName</span><span class="params">(String pName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pName = pName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getpName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> List&lt;Person&gt; list = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">19</span>),<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">19</span>), <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wangwu&quot;</span>,<span class="number">20</span>));</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; map;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestBean</span><span class="params">()</span>&#123;</span><br><span class="line"> </span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;testBean.list[2]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line">Person&#123;pName=<span class="string">&#x27;wangwu&#x27;</span>, age=<span class="number">20</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;testBean.map[key1]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String value;</span><br><span class="line"><span class="comment">//输出value1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="-1"><a href="#-1" class="headerlink" title=".? .^ .$"></a>.? .^ .$</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;testBean.list.?[age==19]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Person&gt; person;</span><br><span class="line">[Person&#123;pName=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">19</span>&#125;, Person&#123;pName=<span class="string">&#x27;lisi&#x27;</span>, age=<span class="number">19</span>&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>SpEL取出了age为19的对象.注意要拿list去接收,不然会报错.其中.?[]是查询所有,而.^[]是查询第一个,满足条件的,.$[]是查询最后一个满足条件的.</p>
<h5 id="-2"><a href="#-2" class="headerlink" title=".!"></a>.!</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;testBean.list.![pName]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; pNames;</span><br><span class="line">[zhangsan, lisi, wangwu]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  SpEL使用.![]进行集合投影,将Person集合中的pName属性都拿了出来,并且塞到了一个新的集合之中, </p>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客创建教程</title>
    <url>/blknjyty.github.io/2022/04/15/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/102592286">参考文章链接</a></p>
<h3 id="1-新建github-安装Git并且绑定账号"><a href="#1-新建github-安装Git并且绑定账号" class="headerlink" title="1.新建github,安装Git并且绑定账号"></a>1.新建github,安装Git并且绑定账号</h3><h3 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2.安装nodejs"></a>2.安装nodejs</h3><ul>
<li><p>安装完成后，用 node -v 和 npm -v 命令检查</p>
</li>
<li><p>设置nodejs全局变量的安装路径和环境变量</p>
 <span id="more"></span> 

<blockquote>
<ul>
<li><p>在 nodejs 文件夹中新建两个空文件夹 node_cache、node_global ;</p>
</li>
<li><p>打开cmd，输入如下两个命令：</p>
</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>环境变量配置： <strong>win10系统 –&gt; 打开控制面板 –&gt; 系统 –&gt;高级系统设置 –&gt; 环境变量</strong> </li>
<li> 然后在系统变量中新建一个变量名为“NODE_PATH”，值为“…\nodejs\node_global\node_modules”</li>
<li> 然后编辑用户变量里的Path，将相应npm的路径改为：”…\nodejs\node_global”</li>
<li> 检查：在 cmd 命令下执行 npm install webpack -g 。检查…\nodejs\node_global\node_modules里是否有webpack包</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><ul>
<li><p>新建Blog文件夹，用git bush 在该目录下输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li><p> 安装完成后，输入 hexo init 命令初始化博客， 然后输入 hexo g 静态部署， 这时网页已经部署完成，输入 hexo s 命令可以 浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a>  查看。</p>
</li>
</ul>
<h3 id="4-Hexo部署到github"><a href="#4-Hexo部署到github" class="headerlink" title="4.Hexo部署到github"></a>4.Hexo部署到github</h3><ul>
<li> Blog 文件夹，用笔记本打开 _config.yml 文件 (<font color="red">注意后边的空格，例type: git</font>)</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/fengye97/fengye97.github.io.git  #你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ul>
<li> 然后回到 Blog 文件夹中，打开 Git Bash，安装Git部署插件，输入命令： </li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ul>
<li><p>三步走.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure></li>
<li><p> 打开浏览器，输入 <a href="https://xxx.github.io/">https://xxx.github.io</a> 就可以打开你的网页了 </p>
</li>
</ul>
<h3 id="5-装饰博客"><a href="#5-装饰博客" class="headerlink" title="5.装饰博客"></a>5.装饰博客</h3><h4 id="5-1-下载一个好看的主题"><a href="#5-1-下载一个好看的主题" class="headerlink" title="5.1 下载一个好看的主题"></a>5.1 下载一个好看的主题</h4><p>例如下载next主题，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>此时在Blog/themes下就有next主题文件夹。</p>
<p>在根目录 _config.yml(称为<strong>站点配置文件</strong>)，修改主题（<strong>注意冒号后都要有空格</strong>） </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title:  #标题</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description:  #简介或者格言</span><br><span class="line">keywords:</span><br><span class="line">author:#作者</span><br><span class="line">language: zh-CN  #主题语言</span><br><span class="line">timezone: Asia/Shanghai  #中国的时区</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next   #主题改为next</span><br></pre></td></tr></table></figure>

<p>next主题也可以进一步配置： next主题有四种，如下图依次为Muse、Mist、Pisces、Gemini 。 打开目录Blog/themes/next/下的_config.yml（称为<strong>主题配置文件</strong>），只要将你选的主题前的#删除就行了： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini    #这是我选的主题</span><br></pre></td></tr></table></figure>

<p>最后就可以三步走hexo clean , hexo g, hexo d 部署到gtihub上即可(本地可以先调试看看 hexo s，访问 <a href="http://localhost:4000看看，没问题再部署">http://localhost:4000看看，没问题再部署</a>)</p>
<h4 id="5-2-配置菜单"><a href="#5-2-配置菜单" class="headerlink" title="5.2 配置菜单"></a>5.2 配置菜单</h4><p> 打开主题配置文件即themes/next下的_config.yml，查找menu，将前面的#删除就行了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home                      #首页</span><br><span class="line">  archives: /archives/ || archive      #归档</span><br><span class="line">  categories: /categories/ || th       #分类</span><br><span class="line">  tags: /tags/ || tags                 #标签</span><br><span class="line">  about: /about/ || user               #关于</span><br><span class="line">  resources: /resources/ || download   #资源</span><br><span class="line">  #schedule: /schedule/ || calendar    #日历</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span><br><span class="line">  #commonweal: /404/ || heartbeat      #腾讯公益404</span><br></pre></td></tr></table></figure>

<p>“||”前面的是目标链接，后面的是图标名称，next使用的图标全是<a href="https://link.zhihu.com/?target=http://www.fontawesome.com.cn/faicons/%23web-application">图标库 - Font Awesome 中文网</a>这一网站的，有想用的图标直接在fontawesome上面找图标的名称就行。resources是我自己添加的。</p>
<p> 新添加的菜单需要翻译对应的中文，打开theme/next/languages/zh-CN.yml，在menu下设置： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">	resources: 资源</span><br></pre></td></tr></table></figure>

<p>在根目录下 打开Git Bash，输入如下代码： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;about&quot;</span><br><span class="line">hexo new page &quot;resources&quot;</span><br></pre></td></tr></table></figure>

<p> 此时在根目录的sources文件夹下会生成categories、tags、about、resources四个文件，每个文件中有一个<code>index.md</code>文件，修改内容分别如下： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 资源</span><br><span class="line">date: 2020-02-10 22:07:08</span><br><span class="line">type: &quot;resources&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p> 注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。 </p>
<h4 id="5-3-图片显示问题"><a href="#5-3-图片显示问题" class="headerlink" title="5.3 图片显示问题"></a>5.3 图片显示问题</h4><p>在站点配置文件中设置：post_asset_folder: true，此时当我们hexo n 创建博客时，会创建同名文件夹存放博客中的图片等各种资源。在博客中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img image.jpg 这是一张图片 %&#125;</span><br></pre></td></tr></table></figure>

<p>引用图片即可</p>
<h3 id="6-写博客"><a href="#6-写博客" class="headerlink" title="6.写博客"></a>6.写博客</h3><p>Blog主目录下hexo n “博客名”，即可创建要书写的博客。</p>
<p>在上面的属性编辑栏中设置一些标签，分类之类的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 个人博客创建教程</span><br><span class="line">date: 2022-04-15 10:07:03</span><br><span class="line">tags: 教程</span><br><span class="line">categories: 教程</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举类</title>
    <url>/blknjyty.github.io/2022/07/25/%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="什么是枚举类"><a href="#什么是枚举类" class="headerlink" title="什么是枚举类"></a>什么是枚举类</h1><blockquote>
<p>​    实例（也叫对象）有限且固定不变的类，在Java里被称为<a href="https://so.csdn.net/so/search?q=%E6%9E%9A%E4%B8%BE&spm=1001.2101.3001.7020">枚举</a>类。</p>
<p>  例如，季节类，它只有4个实例（春、夏、秋、冬），并且这4个实例不会改变。可以用枚举类来表示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SeasonEnum</span>&#123;</span><br><span class="line">    SPRING,SUMMER,FALL,WINTER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>   枚举类是一种特殊的类，它一样可以有自己的成员变量、方法，可以实现一个或多个接口，也可以有自己的构造器。 </p>
<span id="more"></span>

<h1 id="为什么需要枚举类"><a href="#为什么需要枚举类" class="headerlink" title="为什么需要枚举类"></a>为什么需要枚举类</h1><blockquote>
<p>（1）就如上面所说的，有些类的实例有限且固定，需要有一种特定且方便的方式来表示这种类。</p>
<p>  （2）使用枚举类可以使程序更加健壮，避免创建对象的随意性。</p>
<p>  （3）避免一些常量值的意义不明确</p>
</blockquote>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><blockquote>
<pre><code>（1） 枚举类默认继承 java.lang.Enum 类，而不是 Object 类，因此枚举类不能显示继承其他父类。
（2） 使用 enum 定义的非抽象的枚举类默认会使用 final 修饰，因此非抽象枚举类不能派生子类（即不能被继承）。

         &gt; final关键字回顾：final修饰的类不能被继承、修饰的方法不能被重写、修饰的属性其值不能改变。

（3） 枚举类的构造器只能使用 private 访问控制符，如果忽略访问控制符的话，则默认使用 private 修饰；如果强制指定其他的访问控制符（例如public、procted等）,则会报错。

（4） 枚举类的所有实例必须在枚举类的第一行显示列出，否则这个枚举类永远都不可能产生实例。列出的这些实例，系统会自动给它们加上 public static final 修饰。枚举类的实例以逗号分隔，分号结束，这些列出的枚举值代表了该枚举类的所有可能的实例
</code></pre>
</blockquote>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Weekday</span> &#123;</span><br><span class="line">    SUN(<span class="number">0</span>),MON(<span class="number">1</span>),TUS(<span class="number">2</span>),WED(<span class="number">3</span>),THU(<span class="number">4</span>),FRI(<span class="number">5</span>),SAT(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Weekday</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Weekday <span class="title function_">getNextDay</span><span class="params">(Weekday nowDay)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextDayValue</span> <span class="operator">=</span> nowDay.value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (++nextDayValue == <span class="number">7</span>)&#123;</span><br><span class="line">            nextDayValue =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getWeekdayByValue(nextDayValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Weekday <span class="title function_">getWeekdayByValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Weekday c : Weekday.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.value == value) &#123;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;nowday ====&gt; &quot;</span> + Weekday.SAT);</span><br><span class="line">        System.out.println(<span class="string">&quot;nowday int ====&gt; &quot;</span> + Weekday.SAT.ordinal());</span><br><span class="line">        System.out.println(<span class="string">&quot;nextday ====&gt; &quot;</span> + Weekday.getNextDay(Weekday.SAT)); <span class="comment">// 输出 SUN</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出：</span></span><br><span class="line">        <span class="comment">//nowday ====&gt; SAT</span></span><br><span class="line">        <span class="comment">//nowday int ====&gt; 6</span></span><br><span class="line">        <span class="comment">//nextday ====&gt; SUN</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="枚举类的方法"><a href="#枚举类的方法" class="headerlink" title="枚举类的方法"></a>枚举类的方法</h2><blockquote>
<p> Weekday可以调用的方法和参数。发现它有两个方法：value()和valueOf()。还有我们刚刚定义的七个变量。 </p>
</blockquote>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/%E6%9E%9A%E4%B8%BE%E7%B1%BB/gitee\Blog\source_posts\枚举类\20170213132500481.png" alt="20170213132500481"></p>
<img src="/blknjyty.github.io/2022/07/25/%E6%9E%9A%E4%B8%BE%E7%B1%BB/20170213132500481.png" class title="哈哈">

<h2 id="枚举类变量的方法"><a href="#枚举类变量的方法" class="headerlink" title="枚举类变量的方法"></a>枚举类变量的方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Weekday</span> &#123;</span><br><span class="line">    SUN,MON,TUS,WED,THU,FRI,SAT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//它的作用是传来一个字符串，然后将它转变为对应的枚举变量。前提是你传的字符串和定义枚举变量的字符串一抹一样，区分大小写。如果你传了一个不存在的字符串，那么会抛出异常。</span></span><br><span class="line">        System.out.println(Weekday.valueOf(<span class="string">&quot;mon&quot;</span>.toUpperCase()));</span><br><span class="line">        <span class="comment">//MON</span></span><br><span class="line">		<span class="comment">//这个方法会返回包括所有枚举变量的数组。在该例中，返回的就是包含了七个星期的Weekday[]。可以方便的用来做循环。</span></span><br><span class="line">        <span class="keyword">for</span> (Weekday w : Weekday.values())&#123;</span><br><span class="line">            <span class="comment">//默认请款下，枚举类会给所有的枚举变量一个默认的次序，该次序从0开始，类似于数组的下标。而.ordinal()方法就是获取这个次序（或者说下标）</span></span><br><span class="line">            System.out.println(w + <span class="string">&quot;.ordinal()  ====&gt;&quot;</span> +w.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//SUN.ordinal()  ====&gt;0</span></span><br><span class="line">        <span class="comment">//MON.ordinal()  ====&gt;1</span></span><br><span class="line">        <span class="comment">//TUS.ordinal()  ====&gt;2</span></span><br><span class="line">        <span class="comment">//WED.ordinal()  ====&gt;3</span></span><br><span class="line">        <span class="comment">//THU.ordinal()  ====&gt;4</span></span><br><span class="line">        <span class="comment">//FRI.ordinal()  ====&gt;5</span></span><br><span class="line">        <span class="comment">//SAT.ordinal()  ====&gt;6</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//该方法用来比较两个枚举变量的”大小”，实际上比较的是两个枚举变量的次序，返回两个次序相减后的结果，如果为负数，就证明变量1”小于”变量2 （变量1.compareTo(变量2)，返回【变量1.ordinal() - 变量2.ordinal()】）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Weekday.MON.compareTo(Weekday.FRI) ===&gt; &quot;</span> + Weekday.MON.compareTo(Weekday.FRI));</span><br><span class="line">        System.out.println(<span class="string">&quot;Weekday.MON.compareTo(Weekday.MON) ===&gt; &quot;</span> + Weekday.MON.compareTo(Weekday.MON));</span><br><span class="line">        System.out.println(<span class="string">&quot;Weekday.MON.compareTo(Weekday.SUM) ===&gt; &quot;</span> + Weekday.MON.compareTo(Weekday.SUN));</span><br><span class="line">        <span class="comment">//Weekday.MON.compareTo(Weekday.FRI) ===&gt; -4</span></span><br><span class="line">        <span class="comment">//Weekday.MON.compareTo(Weekday.MON) ===&gt; 0</span></span><br><span class="line">        <span class="comment">//Weekday.MON.compareTo(Weekday.SUM) ===&gt; 1</span></span><br><span class="line">		</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//它和toString()方法的返回值一样</span></span><br><span class="line">        <span class="comment">//唯一的区别是，你可以重写toString方法。name变量就是枚举变量的字符串形式。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Weekday.MON.name() ====&gt; &quot;</span> + Weekday.MON.name());</span><br><span class="line">        <span class="comment">//Weekday.MON.name() ====&gt; MON</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="定义的扩展"><a href="#定义的扩展" class="headerlink" title="定义的扩展"></a>定义的扩展</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Weekday</span> &#123;</span><br><span class="line">    MON(<span class="number">1</span>,<span class="string">&quot;mon&quot;</span>),TUS(<span class="number">2</span>,<span class="string">&quot;tus&quot;</span>),WED(<span class="number">3</span>,<span class="string">&quot;wed&quot;</span>),THU(<span class="number">4</span>,<span class="string">&quot;thu&quot;</span>),FRI(<span class="number">5</span>,<span class="string">&quot;fri&quot;</span>),SAT(<span class="number">6</span>,<span class="string">&quot;sat&quot;</span>),SUN(<span class="number">0</span>,<span class="string">&quot;sun&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Weekday</span><span class="params">(<span class="type">int</span> value,String label)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="枚举类中定义抽象方法"><a href="#枚举类中定义抽象方法" class="headerlink" title="枚举类中定义抽象方法"></a>枚举类中定义抽象方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">TrafficLamp</span> &#123;</span><br><span class="line">    RED(<span class="number">30</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> TrafficLamp <span class="title function_">getNextLamp</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> GREEN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, GREEN(<span class="number">45</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> TrafficLamp <span class="title function_">getNextLamp</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> YELLOW;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, YELLOW(<span class="number">5</span>) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> TrafficLamp <span class="title function_">getNextLamp</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">TrafficLamp</span><span class="params">(<span class="type">int</span> time)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> TrafficLamp <span class="title function_">getNextLamp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 因为RED本身就是一个TrafficLamp对象的引用。实际上，在初始化这个枚举类的时候，你可以理解为执行的是<code>TrafficLamp RED = new TrafficLamp（30）</code> ，但是因为TrafficLamp里面有抽象方法，还记得匿名内部类么？ </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TrafficLamp</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrafficLamp</span>（<span class="number">30</span>）&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TrafficLamp <span class="title function_">getNextLamp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GREEN;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p> 而在枚举类中，我们只需要像上面那样写【<code>RED(30)&#123;&#125;</code>】就可以了，因为java会自动的去帮我们完成这一系列操作。 </p>
</blockquote>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Signal</span> &#123;</span><br><span class="line">    GREEN, YELLOW, RED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrafficLight</span> &#123;</span><br><span class="line">    <span class="type">Signal</span> <span class="variable">color</span> <span class="operator">=</span> Signal.RED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">        <span class="keyword">case</span> RED:</span><br><span class="line">            color = Signal.GREEN;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> YELLOW:</span><br><span class="line">            color = Signal.RED;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> GREEN:</span><br><span class="line">            color = Signal.YELLOW;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><blockquote>
<p> 虽然枚举类不能继承其他类，但是还是可以实现接口的 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Behaviour</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Color</span> <span class="keyword">implements</span> <span class="title class_">Behaviour</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>, <span class="number">1</span>), GREEN(<span class="string">&quot;绿色&quot;</span>, <span class="number">2</span>), BLANK(<span class="string">&quot;白色&quot;</span>, <span class="number">3</span>), YELLO(<span class="string">&quot;黄色&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Color</span><span class="params">(String name, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.index + <span class="string">&quot;:&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用接口组织枚举类"><a href="#使用接口组织枚举类" class="headerlink" title="使用接口组织枚举类"></a>使用接口组织枚举类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Coffee</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">        BLACK_COFFEE, DECAF_COFFEE, LATTE, CAPPUCCINO</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Dessert</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">        FRUIT, CAKE, GELATO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用枚举类创建单例模式"><a href="#使用枚举类创建单例模式" class="headerlink" title="使用枚举类创建单例模式"></a>使用枚举类创建单例模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EasySingleton</span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双检索实现单例"><a href="#双检索实现单例" class="headerlink" title="双检索实现单例"></a><strong>双检索实现单例</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleCheckedLockingSingleton</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span>  DoubleCheckedLockingSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="title function_">DoubleCheckedLockingSingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> DoubleCheckedLockingSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(DoubleCheckedLockingSingleton.class)&#123;</span><br><span class="line">                <span class="comment">//double checking Singleton instance</span></span><br><span class="line">                <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>)&#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">DoubleCheckedLockingSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> INSTANCE;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用静态工厂方法实现单例："><a href="#用静态工厂方法实现单例：" class="headerlink" title="用静态工厂方法实现单例："></a><strong>用静态工厂方法实现单例：</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/zhou520yue520/article/details/80952404">博文1</a></p>
<p><a href="https://sharember.blog.csdn.net/article/details/55049192?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-55049192-blog-80952404.pc_relevant_multi_platform_featuressortv2dupreplace&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-55049192-blog-80952404.pc_relevant_multi_platform_featuressortv2dupreplace&utm_relevant_index=1">博文2</a></p>
]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/blknjyty.github.io/2022/07/01/Docker/</url>
    <content><![CDATA[<h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><h4 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1 什么是Docker"></a>1.1 什么是Docker</h4><blockquote>
<p>Docker是开源的应用容器引擎，或者说是一种容器标准。<strong>开发者可以使用其将自身的应用、依赖包、开发环境等打包到一个轻量级、可移植的容器中。</strong> 打包之后可以发布到Linux等系统上，具有开销小、启动快等优点。</p>
</blockquote>
 <span id="more"></span> 

<h4 id="1-2-Docker应用场景有哪些"><a href="#1-2-Docker应用场景有哪些" class="headerlink" title="1.2 Docker应用场景有哪些"></a>1.2 Docker应用场景有哪些</h4><ul>
<li>Web 应用的自动化打包和发布</li>
<li>自动化测试和持续集成、发布</li>
<li> 在服务型环境中部署和调整数据库或其他的后台应用 </li>
</ul>
<h4 id="1-3-Docker和虚拟机的区别"><a href="#1-3-Docker和虚拟机的区别" class="headerlink" title="1.3 Docker和虚拟机的区别"></a>1.3 Docker和虚拟机的区别</h4><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/01/Docker/gitee\Blog\source_posts\Docker\1656937545326.png" alt="1656937545326"></p>
<img src="/blknjyty.github.io/2022/07/01/Docker/1656937545326.png" class title="虚拟机结构图">

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/01/Docker/gitee\Blog\source_posts\Docker\1656937564921.png" alt="1656937564921"></p>
<img src="/blknjyty.github.io/2022/07/01/Docker/1656937564921.png" class title="Docker结构图">

<blockquote>
<p>从上图可以看出，虚拟机和Docker的底层都是基础硬件设施，倒数第二层虚拟机是管理系统(进行资源的隔离、分配等)、而Docker的倒数第二层是操作系统。**这就是最主要的区别，Docker是虚拟OS(复用OS)，而虚拟机是虚拟硬件(复用硬件)**。</p>
<p>故Docker的优缺点也显而易见了：</p>
<ul>
<li>由于其<strong>复用OS</strong>，所以如果有容器把内核搞挂了，那么宿主内核也会挂掉。</li>
<li>由于其少了虚拟机管理的两层，故其创建开销小、速度快，使得应用程序和基础架构分开，达到快速迭代和交付软件的目的。简而言之，**1.<strong>快速一致的交付应用程序</strong>2.**使项目可移植性更高，更轻量级 **</li>
</ul>
</blockquote>
<h4 id="1-4-Docker的组成"><a href="#1-4-Docker的组成" class="headerlink" title="1.4 Docker的组成"></a>1.4 Docker的组成</h4><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/01/Docker/gitee\Blog\source_posts\Docker\1384642-20191227100415937-2126100108.png" alt="1384642-20191227100415937-2126100108"></p>
<img src="/blknjyty.github.io/2022/07/01/Docker/1384642-20191227100415937-2126100108.png" class title="Docker的构成">

<blockquote>
<p>上图囊括了Docker的基本常用操作，同时也可以看出Docker的组成部分：镜像(images)、容器(Containers)、客户端、主机、Docker仓库。</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>镜像(Images)</td>
<td>基于联合文件系统的一种层次式结构，由一系列指令构建出来，是从最底层到最高层依次修改的最终结果，不同镜像可以共享层。</td>
</tr>
<tr>
<td>容器(Containers)</td>
<td>独立运行的一个或一组应用，基于镜像创建。<strong>镜像就相当于类，容器相当于对象。</strong></td>
</tr>
<tr>
<td>客户端</td>
<td>客户端通过命令行或其他工具使用Docker API和Docker的守护进程通信。</td>
</tr>
<tr>
<td>守护进程</td>
<td>Docker服务端进行，负责支撑容器运行和镜像管理</td>
</tr>
<tr>
<td>主机</td>
<td>物理或者虚拟机器(用于执行守护进程和容器)</td>
</tr>
<tr>
<td>仓库</td>
<td>类似于github，镜像管理平台</td>
</tr>
</tbody></table>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p><a href="https://www.runoob.com/docker/centos-docker-install.html">可参考官方文档或者菜鸟教程均可</a></p>
<p>以CentOS为例，安装步骤分为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#yum包更新到最新</span><br><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#卸载旧版本docker和相关依赖</span><br><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。</span><br><span class="line">#先安装所需软件包</span><br><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置稳定的仓库：官方源、阿里云等等</span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">#或者</span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装最新版本的 Docker Engine-Community</span><br><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装完成后，启动Docker </span><br><span class="line">$ sudo systemctl start docker </span><br><span class="line">#查看版本</span><br><span class="line">$ sudo docker version</span><br><span class="line">#停止docker服务</span><br><span class="line">$ sudo systemctl stop docker</span><br><span class="line">#重启docker服务</span><br><span class="line">$ sudo systemctl restart docker</span><br><span class="line">#查看服务状态</span><br><span class="line">$ sudo  systemctl status docker</span><br><span class="line">#设置开机启动</span><br><span class="line">$ sudo  systemctl enable docker</span><br></pre></td></tr></table></figure>

<h3 id="3-镜像"><a href="#3-镜像" class="headerlink" title="3.镜像"></a>3.镜像</h3><blockquote>
<p>概念理解：镜像就相当于我们设置好运行环境、所需软件的这么一个包，简单的说就是一个应用。</p>
<p>具体解释：比如开发人员可以从docker仓库拉取（下载）一个只包含centos7系统的基础镜像，然后在这个镜像中安装jdk、mysql、Tomcat和自己开发的应用，最后将这些环境打一个新的镜像。开发人员将这个新的镜像提交给测试人员进行测试，测试人员只需要在测试环境下运行这个镜像就可以了，这样就可以保证开发人员的环境和测试人员的环境完全一致。</p>
<p><strong>有镜像了我们才能基于其创建容器。</strong></p>
</blockquote>
<h4 id="3-1-查看镜像-本地主机上的镜像"><a href="#3-1-查看镜像-本地主机上的镜像" class="headerlink" title="3.1 查看镜像(本地主机上的镜像)"></a>3.1 查看镜像(本地主机上的镜像)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/01/Docker/gitee\Blog\source_posts\Docker\1656985651701.png" alt="1656985651701"></p>
<img src="/blknjyty.github.io/2022/07/01/Docker/1656985651701.png" class title="Docker查看镜像">

<ul>
<li><strong>REPOSITORY：</strong>表示镜像的仓库源</li>
<li><strong>TAG：</strong>镜像的标签</li>
<li><strong>IMAGE ID：</strong>镜像ID</li>
<li><strong>CREATED：</strong>镜像创建时间</li>
<li><strong>SIZE：</strong>镜像大小</li>
</ul>
<h4 id="3-2-拉取镜像"><a href="#3-2-拉取镜像" class="headerlink" title="3.2 拉取镜像"></a>3.2 拉取镜像</h4><blockquote>
<p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:13.10</span><br></pre></td></tr></table></figure>

<h4 id="3-3-删除镜像"><a href="#3-3-删除镜像" class="headerlink" title="3.3 删除镜像"></a>3.3 删除镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi ubuntu:13.10</span><br></pre></td></tr></table></figure>

<h4 id="3-4-搜索镜像"><a href="#3-4-搜索镜像" class="headerlink" title="3.4 搜索镜像"></a>3.4 搜索镜像</h4><blockquote>
<p> 我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。 </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search httpd</span><br></pre></td></tr></table></figure>

<h4 id="3-5-创建镜像"><a href="#3-5-创建镜像" class="headerlink" title="3.5 创建镜像"></a>3.5 创建镜像</h4><blockquote>
<p>创建镜像有两种选择：</p>
<ul>
<li> 从已经创建的容器中更新镜像，并且提交这个镜像 </li>
<li> 使用 Dockerfile 指令来创建一个新的镜像 </li>
</ul>
</blockquote>
<h5 id="3-5-1-根据容器更新"><a href="#3-5-1-根据容器更新" class="headerlink" title="3.5.1 根据容器更新"></a><strong>3.5.1</strong> 根据容器更新</h5><p>对于第一种，我们需要先根据原镜像创建一个容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -t -i ubuntu:15.10 /bin/bash</span><br><span class="line">root@e218edb10161:/# </span><br></pre></td></tr></table></figure>

<p>在运行的容器内使用 <strong>apt-get update</strong> 命令进行更新。</p>
<p>在完成操作之后，输入 <strong>exit</strong> 命令来退出这个容器。</p>
<p>此时 ID 为 e218edb10161 的容器，是按我们的需求更改的容器。我们可以通过命令 <strong>docker commit</strong> 来提交容器副本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker commit -m=&quot;has update&quot; -a=&quot;runoob&quot; e218edb10161 runoob/ubuntu:v2</span><br><span class="line">sha256:70bf1840fd7c0d2d8ef0a42a817eb29f854c1af8f7c59fc03ac7bdee9545aff8</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><strong>-m:</strong> 提交的描述信息</li>
<li><strong>-a:</strong> 指定镜像作者</li>
<li><strong>e218edb10161：</strong>容器 ID</li>
<li><strong>runoob/ubuntu:v2:</strong> 指定要创建的目标镜像名:标签</li>
</ul>
<h5 id="3-5-2-Dockerfile创建新的镜像"><a href="#3-5-2-Dockerfile创建新的镜像" class="headerlink" title="3.5.2 Dockerfile创建新的镜像"></a>3.5.2 Dockerfile创建新的镜像</h5><p> 我们需要创建一个 <strong>Dockerfile 文件</strong>，其中包含一组指令来告诉 Docker 如何构建我们的镜像。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ cat Dockerfile </span><br><span class="line">FROM    centos:6.7</span><br><span class="line">MAINTAINER      Fisher &quot;fisher@sudops.com&quot;</span><br><span class="line"></span><br><span class="line">RUN     /bin/echo &#x27;root:123456&#x27; |chpasswd</span><br><span class="line">RUN     useradd runoob</span><br><span class="line">RUN     /bin/echo &#x27;runoob:123456&#x27; |chpasswd</span><br><span class="line">RUN     /bin/echo -e &quot;LANG=\&quot;en_US.UTF-8\&quot;&quot; &gt;/etc/default/local</span><br><span class="line">EXPOSE  22</span><br><span class="line">EXPOSE  80</span><br><span class="line">CMD     /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>

<p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</p>
<p>第一条FROM，指定使用哪个镜像源</p>
<p>RUN 指令告诉docker 在镜像内执行命令，安装了什么。</p>
<p> 我们使用 Dockerfile 文件，通过 <strong>docker build</strong> 命令来构建一个镜像 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runoob@runoob:~$ docker build -t runoob/centos:6.7 .</span><br><span class="line">Sending build context to Docker daemon 17.92 kB</span><br><span class="line">Step 1 : FROM centos:6.7</span><br><span class="line"> ---&amp;gt; d95b5ca17cc3</span><br><span class="line">Step 2 : MAINTAINER Fisher &quot;fisher@sudops.com&quot;</span><br><span class="line"> ---&amp;gt; Using cache</span><br><span class="line"> ---&amp;gt; 0c92299c6f03</span><br><span class="line">Step 3 : RUN /bin/echo &#x27;root:123456&#x27; |chpasswd</span><br><span class="line"> ---&amp;gt; Using cache</span><br><span class="line"> ---&amp;gt; 0397ce2fbd0a</span><br><span class="line">Step 4 : RUN useradd runoob</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><strong>-t</strong> ：指定要创建的目标镜像名</li>
<li><strong>.</strong> ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</li>
</ul>
<h4 id="3-6-设置镜像标签"><a href="#3-6-设置镜像标签" class="headerlink" title="3.6 设置镜像标签"></a>3.6 设置镜像标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag 860c279d2fec runoob/centos:dev</span><br></pre></td></tr></table></figure>

<p> docker tag 镜像ID，这里是 860c279d2fec ,镜像源名(repository name)和新的标签名(tag)。 </p>
<h3 id="4-容器"><a href="#4-容器" class="headerlink" title="4.容器"></a>4.容器</h3><blockquote>
<p>容器就是基于镜像(类)生成的具体对象</p>
</blockquote>
<p>故生成容器之前，本地得有相应的镜像。</p>
<h4 id="4-1-生成容器"><a href="#4-1-生成容器" class="headerlink" title="4.1 生成容器"></a>4.1 生成容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#若无镜像则先拉取</span><br><span class="line">docker pull ubuntu</span><br><span class="line">#根据镜像生成容器</span><br><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>此时终端进入如下界面，表示进行容器内部的终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@0123ce188bd8:/#</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><strong>-i</strong>: 允许和容器进行交互式操作。</li>
<li><strong>-t</strong>: 在新的容器内指定一个伪终端</li>
<li><strong>ubuntu</strong>: ubuntu 镜像。</li>
<li><strong>/bin/bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li>
</ul>
<p>在容器终端输入exit退出，不指定名称docker会自动命名，当然我们也可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name myubuntu ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="4-2-查看所有容器"><a href="#4-2-查看所有容器" class="headerlink" title="4.2 查看所有容器"></a>4.2 查看所有容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dockers ps -a</span><br></pre></td></tr></table></figure>

<h4 id="4-3-启停容器"><a href="#4-3-启停容器" class="headerlink" title="4.3 启停容器"></a>4.3 启停容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器id</span><br><span class="line">docker restart 容器id</span><br><span class="line">docker stop 容器id</span><br></pre></td></tr></table></figure>

<h4 id="4-4-后台运行"><a href="#4-4-后台运行" class="headerlink" title="4.4 后台运行"></a>4.4 后台运行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p> 我们希望 docker 的服务是在后台运行的，我们可以过 <strong>-d</strong> 指定容器的运行模式。 加了 <strong>-d</strong> 参数默认不会进入容器，想要进入容器需要使用指令 <strong>docker exec</strong> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 243c32535da7 /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="4-5-导入导出容器"><a href="#4-5-导入导出容器" class="headerlink" title="4.5 导入导出容器"></a>4.5 导入导出容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#到处容器快照到本地</span><br><span class="line">docker export 容器id&gt;ubuntu.tar</span><br><span class="line">#可以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:</span><br><span class="line">cat docker/ubuntu.tar | docker import - test/ubuntu:v1</span><br><span class="line">#此外，也可以通过指定 URL 或者某个目录来导入</span><br><span class="line">$ docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>

<h4 id="4-6-删除容器"><a href="#4-6-删除容器" class="headerlink" title="4.6 删除容器"></a>4.6 删除容器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f 1e560fca3906</span><br></pre></td></tr></table></figure>

<h4 id="4-7-具体例子"><a href="#4-7-具体例子" class="headerlink" title="4.7 具体例子"></a>4.7 具体例子</h4><p>运行一个 web 应用</p>
<p>前面我们运行的容器并没有一些什么特别的用处。</p>
<p>接下来让我们尝试使用 docker 构建一个 web 应用程序。</p>
<p>我们将在docker容器中运行一个 Python Flask 应用来运行一个web应用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull training/webapp</span><br><span class="line">docker run -d -P training/webapp python app.py</span><br></pre></td></tr></table></figure>

<p>参数说明:</p>
<ul>
<li>**-d:**让容器在后台运行。</li>
<li>**-P:**将容器内部使用的网络端口随机映射到我们使用的主机上。</li>
</ul>
<p>此时 使用 <strong>docker ps</strong> 来查看我们正在运行的容器： </p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/01/Docker/gitee\Blog\source_posts\Docker\1656989652436.png" alt="1656989652436"></p>
<img src="/blknjyty.github.io/2022/07/01/Docker/1656989652436.png" class title="运行容器">

<p>可以看到， Docker 开放了 5000 端口（默认 Python Flask 端口）映射到主机端口 32769 上。 </p>
<p>访问192.168.239.130:32769即可访问到web应用。</p>
<p><strong>改变运行端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000：5000 training/webapp python app.py</span><br></pre></td></tr></table></figure>

<p>当然我们也可以通过指定容器绑定的网络地址，比如绑定127.0.0.1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure>

<p>此时就可以通过127.0.0.1：5000来访问容器的5000端口</p>
<h4 id="4-8-容器日志"><a href="#4-8-容器日志" class="headerlink" title="4.8 容器日志"></a>4.8 容器日志</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -f bf08b7f2cd89</span><br></pre></td></tr></table></figure>

<p> <strong>-f:</strong> 让 <strong>docker logs</strong> 像使用 <strong>tail -f</strong> 一样来输出容器内部的标准输出。 </p>
<h4 id="4-9-查看容器内部进程"><a href="#4-9-查看容器内部进程" class="headerlink" title="4.9 查看容器内部进程"></a>4.9 查看容器内部进程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker top 容器名或者id</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/01/Docker/gitee\Blog\source_posts\Docker\1656990335923.png" alt="1656990335923"></p>
<img src="/blknjyty.github.io/2022/07/01/Docker/1656990335923.png" class title="运行容器">

<h4 id="4-10-查看某个容器底层信息"><a href="#4-10-查看某个容器底层信息" class="headerlink" title="4.10 查看某个容器底层信息"></a>4.10 查看某个容器底层信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 容器名或者id</span><br></pre></td></tr></table></figure>

<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/01/Docker/gitee\Blog\source_posts\Docker\1656990480994.png" alt="1656990480994"></p>
<img src="/blknjyty.github.io/2022/07/01/Docker/1656990335923.png" class title="运行容器">

<h4 id="4-11-容器互联"><a href="#4-11-容器互联" class="headerlink" title="4.11 容器互联"></a>4.11 容器互联</h4><p>运行容器并且新建test-net网络，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name test1 --network test-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p> 打开新的终端，再运行一个容器并加入到 test-net 网络: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -itd --name test2 --network test-net ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<p>在容器test1内部ping test2,可以ping通，同理反过来也可以i。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it test1 /bin/bash</span><br><span class="line">root@432432fd231e3f:/# ping test2</span><br></pre></td></tr></table></figure>

<h4 id="4-12-文件拷贝"><a href="#4-12-文件拷贝" class="headerlink" title="4.12 文件拷贝"></a>4.12 文件拷贝</h4><ul>
<li><p>从宿主机拷贝到容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br><span class="line"># 创建一个文件abc.txt</span><br><span class="line">touch abc.txt</span><br><span class="line"># 复制abc.txt到mycentos2的容器的 / 目录下</span><br><span class="line">docker cp abc.txt mycentos2:/</span><br><span class="line"># 进入mycentos2容器</span><br><span class="line">docker exec -it mycentos2 /bin/bash</span><br><span class="line"># 查看容器 / 目录下文件</span><br><span class="line">ll</span><br></pre></td></tr></table></figure></li>
<li><p>从容器拷贝到宿主机器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br><span class="line">#进入容器后创建文件cba.txt</span><br><span class="line">touch cba.txt</span><br><span class="line"># 退出容器</span><br><span class="line">exit</span><br><span class="line"># 在Linux宿主机器执行复制；将容器mycentos2的/cba.txt文件复制到 宿主机器的/root目录下</span><br><span class="line">docker cp mycentos2:/cba.txt /root</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-13-目录挂载"><a href="#4-13-目录挂载" class="headerlink" title="4.13 目录挂载"></a>4.13 目录挂载</h4><ul>
<li><p>可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。</p>
</li>
<li><p>创建容器时添加-v参数，后边为宿主机目录:容器目录，例如： docker run -di -v /usr/local/test:/usr/local/test –name=mycentos3 centos:7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建linux宿主机器要挂载的目录</span><br><span class="line">mkdir /usr/local/test</span><br><span class="line"># 创建并启动容器mycentos3,并挂载linux中的/usr/local/test目录到容器的/usr/local/test；也就是在</span><br><span class="line">linux中的/usr/local/test中操作相当于对容器相应目录操作</span><br><span class="line">docker run -di -v /usr/local/test:/usr/local/test --name=mycentos3 centos:7</span><br><span class="line"># 在linux下创建文件</span><br><span class="line">touch /usr/local/test/def.txt</span><br><span class="line"># 进入容器</span><br><span class="line">docker exec -it mycentos3 /bin/bash</span><br><span class="line"># 在容器中查看目录中是否有对应文件def.txt</span><br><span class="line">ll /usr/local/test</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-网络"><a href="#5-网络" class="headerlink" title="5.网络"></a>5.网络</h3><h3 id="6-Docker-Compose"><a href="#6-Docker-Compose" class="headerlink" title="6.Docker Compose"></a>6.Docker Compose</h3><h4 id="6-1-compose简介"><a href="#6-1-compose简介" class="headerlink" title="6.1 compose简介"></a>6.1 compose简介</h4><blockquote>
<p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。 </p>
</blockquote>
<blockquote>
<p>使用步骤：</p>
<blockquote>
<ul>
<li>使用 Dockerfile 定义应用程序的环境。</li>
<li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li>
<li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li>
</ul>
</blockquote>
</blockquote>
<h4 id="6-2-compose的安装"><a href="#6-2-compose的安装" class="headerlink" title="6.2 compose的安装"></a>6.2 compose的安装</h4><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#从Github上下载软件包</span><br><span class="line">$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">#设置文件可执行权限</span><br><span class="line">chomod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">#验证安装是否成功</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="6-3-具体例子"><a href="#6-3-具体例子" class="headerlink" title="6.3 具体例子"></a>6.3 具体例子</h4><h5 id="6-3-1-准备文件"><a href="#6-3-1-准备文件" class="headerlink" title="6.3.1 准备文件"></a>6.3.1 准备文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir composetest</span><br><span class="line">$ cd composetest</span><br><span class="line">#在该目录下有app.py web应用运行文件，同时包含requirements.txt文佳，里面是两行文本flask、redis。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="6-3-2-Dockerfile文件"><a href="#6-3-2-Dockerfile文件" class="headerlink" title="6.3.2 Dockerfile文件"></a>6.3.2 Dockerfile文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在 composetest 目录中，创建一个名为 Dockerfile 的文件，用于生成镜像</span><br><span class="line">FROM python:3.7-alpine</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP app.py</span><br><span class="line">ENV FLASK_RUN_HOST 0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">COPY . .</span><br><span class="line">CMD [&quot;flask&quot;, &quot;run&quot;]</span><br></pre></td></tr></table></figure>

<p><strong>Dockerfile 内容解释：</strong></p>
<ul>
<li><p><strong>FROM python:3.7-alpine</strong>: 从 Python 3.7 映像开始构建镜像。</p>
</li>
<li><p><strong>WORKDIR /code</strong>: 将工作目录设置为 /code。</p>
</li>
<li><p>```<br>ENV FLASK_APP app.py<br>ENV FLASK_RUN_HOST 0.0.0.0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  设置 flask 命令使用的环境变量。</span><br><span class="line"></span><br><span class="line">- **RUN apk add --no-cache gcc musl-dev linux-headers**: 安装 gcc，以便诸如 MarkupSafe 和 SQLAlchemy 之类的 Python 包可以编译加速。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  COPY requirements.txt requirements.txt</span><br><span class="line">  RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>复制 requirements.txt 并安装 Python 依赖项。</p>
</li>
<li><p><strong>COPY . .</strong>: 将 . 项目中的当前目录复制到 . 镜像中的工作目录。</p>
</li>
<li><p><strong>CMD [“flask”, “run”]</strong>: 容器提供默认的执行命令为：flask run。</p>
</li>
</ul>
<h5 id="6-3-3-配置文件"><a href="#6-3-3-配置文件" class="headerlink" title="6.3.3 配置文件"></a>6.3.3 配置文件</h5><p> 在测试目录中创建一个名为 docker-compose.yml 的文件 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yaml 配置</span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">     - &quot;5000:5000&quot;</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该 Compose 文件定义了两个服务：web 和 redis。</p>
<ul>
<li><strong>web</strong>：该 web 服务使用从 Dockerfile 当前目录中构建的镜像。然后，它将容器和主机绑定到暴露的端口 5000。此示例服务使用 Flask Web 服务器的默认端口 5000 。</li>
<li><strong>redis</strong>：该 redis 服务使用 Docker Hub 的公共 Redis 映像。</li>
</ul>
</blockquote>
<h5 id="6-3-4-运行"><a href="#6-3-4-运行" class="headerlink" title="6.3.4 运行"></a>6.3.4 运行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line">#或者后台运行</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h4 id="6-4-配置文件详细参数"><a href="#6-4-配置文件详细参数" class="headerlink" title="6.4  配置文件详细参数"></a>6.4  配置文件详细参数</h4><h5 id="6-4-1-version"><a href="#6-4-1-version" class="headerlink" title="6.4.1 version"></a>6.4.1 version</h5><p> 指定本 yml 依从的 compose 哪个版本制定的。 </p>
<h5 id="6-4-2-指定为构建镜像上下文路径："><a href="#6-4-2-指定为构建镜像上下文路径：" class="headerlink" title="6.4.2  指定为构建镜像上下文路径："></a>6.4.2  指定为构建镜像上下文路径：</h5><p>例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    build: ./dir</span><br></pre></td></tr></table></figure>

<p>或者，作为具有在上下文指定的路径的对象，以及可选的 Dockerfile 和 args：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    build:</span><br><span class="line">      context: ./dir</span><br><span class="line">      dockerfile: Dockerfile-alternate</span><br><span class="line">      args:</span><br><span class="line">        buildno: 1</span><br><span class="line">      labels:</span><br><span class="line">        - &quot;com.example.description=Accounting webapp&quot;</span><br><span class="line">        - &quot;com.example.department=Finance&quot;</span><br><span class="line">        - &quot;com.example.label-with-empty-value&quot;</span><br><span class="line">      target: prod</span><br></pre></td></tr></table></figure>

<ul>
<li>context：上下文路径。</li>
<li>dockerfile：指定构建镜像的 Dockerfile 文件名。</li>
<li>args：添加构建参数，这是只能在构建过程中访问的环境变量。</li>
<li>labels：设置构建镜像的标签。</li>
<li>target：多层构建，可以指定构建哪一层。</li>
</ul>
<h5 id="6-4-3-cap-add，cap-drop"><a href="#6-4-3-cap-add，cap-drop" class="headerlink" title="6.4.3 cap_add，cap_drop"></a>6.4.3 cap_add，cap_drop</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cap_add:</span><br><span class="line">  - ALL # 开启全部权限</span><br><span class="line"></span><br><span class="line">cap_drop:</span><br><span class="line">  - SYS_PTRACE # 关闭 ptrace权限</span><br></pre></td></tr></table></figure>

<h5 id="6-4-4-cgroup-parent"><a href="#6-4-4-cgroup-parent" class="headerlink" title="6.4.4 cgroup_parent"></a>6.4.4 cgroup_parent</h5><p> 为容器指定父 cgroup 组，意味着将继承该组的资源限制。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cgroup_parent: m-executor-abcd</span><br></pre></td></tr></table></figure>

<h5 id="6-4-5-command"><a href="#6-4-5-command" class="headerlink" title="6.4.5 command"></a>6.4.5 command</h5><p> 覆盖容器启动的默认命令。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command: [&quot;bundle&quot;, &quot;exec&quot;, &quot;thin&quot;, &quot;-p&quot;, &quot;3000&quot;]</span><br></pre></td></tr></table></figure>

<h5 id="6-4-6-container-name"><a href="#6-4-6-container-name" class="headerlink" title="6.4.6 container_name"></a>6.4.6 container_name</h5><p> 指定自定义容器名称，而不是生成的默认名称。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">container_name: my-web-container</span><br></pre></td></tr></table></figure>

<h5 id="6-4-7-depends-on"><a href="#6-4-7-depends-on" class="headerlink" title="6.4.7 depends_on"></a>6.4.7 depends_on</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置依赖关系。</p>
<ul>
<li>docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。</li>
<li>docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。</li>
<li>docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。</li>
</ul>
</blockquote>
<p><a href="https://www.runoob.com/docker/docker-compose.html">更多参数访问官网或者菜鸟教程，本问参数参考菜鸟</a></p>
<h3 id="7-卷"><a href="#7-卷" class="headerlink" title="7.卷"></a>7.卷</h3>]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>React入门游戏</title>
    <url>/blknjyty.github.io/2022/07/08/React%E5%85%A5%E9%97%A8%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p><a href="https://react.docschina.org/tutorial/tutorial.html#picking-a-key">官网的入门教程小游戏</a></p>
<p><code> 游戏规则，“三子棋”</code></p>
<h3 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h3><span id="more"></span>

<blockquote>
<p>其中涉及三个组件，一个函数组件 Square ，两个  React 组件 </p>
</blockquote>
<p>Square 负责渲染每个按钮， Board  负责渲染整个方块，Game组件负责整个棋盘。</p>
<p>函数式组件： 如果你想写的组件只包含一个 <code>render</code> 方法，并且不包含 state，那么使用<strong>函数组件</strong>就会更简单。 </p>
<p>组件之间通过<strong>Props</strong>传递数据， 一个组件接收一些参数，我们把这些参数叫做 <code>props</code>（“props” 是 “properties” 简写） </p>
<p>用<strong>state</strong>实现数据存储，即“记忆功能”（每个组件的私有属性）， 每次在组件中调用 <code>setState</code> 时，React 都会自动更新其子组件 </p>
<h3 id="构建空棋盘流程"><a href="#构建空棋盘流程" class="headerlink" title="构建空棋盘流程"></a>构建空棋盘流程</h3><h4 id="项目启动时"><a href="#项目启动时" class="headerlink" title="项目启动时"></a>项目启动时</h4><p>先进入最顶层的父组件加载构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//history记录每一步后的棋盘布局。一开始棋盘中全部为null</span></span><br><span class="line"><span class="comment">//stepNumber表示 哪一项历史记录，即数组history的下标</span></span><br><span class="line"><span class="comment">//xIsNext表示下一步该谁走，true表示X，false表示O</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">       <span class="variable language_">super</span>(props);</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">           <span class="attr">history</span>: [</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="attr">squares</span>: <span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           ],</span><br><span class="line">           <span class="attr">stepNumber</span>: <span class="number">0</span>,</span><br><span class="line">           <span class="attr">xIsNext</span>: <span class="literal">true</span></span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Game组件render方法进行内容展示"><a href="#Game组件render方法进行内容展示" class="headerlink" title="Game组件render方法进行内容展示"></a>Game组件render方法进行内容展示</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//将state的history变量取出来</span></span><br><span class="line">        <span class="keyword">const</span> history = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>;</span><br><span class="line">        <span class="comment">//以一开始为例，stempNumber为0，故取数组history中的第一个，即history[0]</span></span><br><span class="line">        <span class="keyword">const</span> current = history[<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">stepNumber</span>];</span><br><span class="line">        <span class="comment">//calculateWinner表示计算谁是获胜者，返回获胜者名称或者null</span></span><br><span class="line">        <span class="keyword">const</span> winner = <span class="title function_">calculateWinner</span>(current.<span class="property">squares</span>);</span><br><span class="line">		<span class="comment">//将每次的描述都赋值给moves，多个&lt;li&gt;</span></span><br><span class="line">        <span class="keyword">const</span> moves = history.<span class="title function_">map</span>(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> desc = move ?</span><br><span class="line">                <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">                <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jumpTo(move)&#125;&gt;&#123;desc&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">	    <span class="comment">//判读那是否游戏结束，显示相应的信息</span></span><br><span class="line">        <span class="keyword">let</span> status;</span><br><span class="line">        <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">            status = <span class="string">&quot;Winner: &quot;</span> + winner;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            status = <span class="string">&quot;Next player: &quot;</span> + (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span> ? <span class="string">&quot;X&quot;</span> : <span class="string">&quot;O&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//return里是屏幕上显示的具体内容</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                //棋盘信息</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Board</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">onClick</span>=<span class="string">&#123;i</span> =&gt;</span> this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">                     /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				//游戏进行信息</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="进入Board组件render方法"><a href="#进入Board组件render方法" class="headerlink" title="进入Board组件render方法"></a>进入Board组件render方法</h4><p>由于Game组件里面使用Board组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Board</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">//调用Square组件</span></span><br><span class="line">    <span class="title function_">renderSquare</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">value</span>=<span class="string">&#123;this.props.squares[i]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.onClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//调用renderSquare方法</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="language-xml">                    &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="进入Square组件"><a href="#进入Square组件" class="headerlink" title="进入Square组件"></a>进入Square组件</h4><p>由于Board组件里面使用Square组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收参数，返回button，button里面的值是prop.value</span></span><br><span class="line"><span class="comment">//也就Board组件里的value=this.props.squares[i]，以i=0为例，</span></span><br><span class="line"><span class="comment">//value的值是由Gama组件squares=&#123;current.squares&#125;传递给Board的squares</span></span><br><span class="line"><span class="comment">//Board再取squares的第i个(0个)传递给Square的value，值为null</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Square</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;props.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="构建了一个空的棋盘"><a href="#构建了一个空的棋盘" class="headerlink" title="构建了一个空的棋盘"></a>构建了一个空的棋盘</h4><h3 id="下棋的时候发生什么"><a href="#下棋的时候发生什么" class="headerlink" title="下棋的时候发生什么"></a>下棋的时候发生什么</h3><h4 id="点击棋盘"><a href="#点击棋盘" class="headerlink" title="点击棋盘"></a>点击棋盘</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//点击棋盘时候，触发Square的onclick触发器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Square</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;props.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发Square的onclick触发器,里面是Board传入的函数onClick，故此时调用Board的onClick</span></span><br><span class="line"><span class="title function_">renderSquare</span>(<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">value</span>=<span class="string">&#123;this.props.squares[i]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.onClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//同理，Board的onClick里面是Game的handleClick函数</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Board</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">onClick</span>=<span class="string">&#123;i</span> =&gt;</span> this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">                    /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br></pre></td></tr></table></figure>

<h4 id="调用handleClick"><a href="#调用handleClick" class="headerlink" title="调用handleClick"></a>调用handleClick</h4><p>到这一步就是用户点击一个格子，经过三次传递到了handleClick函数。比如点击的是0方格，0方格的Square触发器检测到，找到Board的renderSquare(0)，在找到handleClick(0) </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleClick</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="comment">//将history里面所有的下棋记录取出来</span></span><br><span class="line">      <span class="keyword">const</span> history = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">stepNumber</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//current即当前的棋盘布局</span></span><br><span class="line">    <span class="keyword">const</span> current = history[history.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//取出当前棋盘布局备份</span></span><br><span class="line">      <span class="keyword">const</span> squares = current.<span class="property">squares</span>.<span class="title function_">slice</span>();</span><br><span class="line">    <span class="comment">//如果此时已经有胜者或者点击了有值的格子，则直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">calculateWinner</span>(squares) || squares[i]) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//判断一下点击的格子是X还O并且赋值</span></span><br><span class="line">      squares[i] = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span> ? <span class="string">&quot;X&quot;</span> : <span class="string">&quot;O&quot;</span>;</span><br><span class="line">    <span class="comment">//讲此时组件内值重新设计，此时该组件和其子组件会重新刷新</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">          <span class="comment">//history后加了一天记录</span></span><br><span class="line">          <span class="attr">history</span>: history.<span class="title function_">concat</span>([</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="attr">squares</span>: squares</span><br><span class="line">              &#125;</span><br><span class="line">          ]),</span><br><span class="line">          <span class="comment">//历史长度+1，即当前走的步数+1</span></span><br><span class="line">          <span class="attr">stepNumber</span>: history.<span class="property">length</span>,</span><br><span class="line">          <span class="comment">//下一步该谁走变一下</span></span><br><span class="line">          <span class="attr">xIsNext</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="重新加载Gama及其子组件"><a href="#重新加载Gama及其子组件" class="headerlink" title="重新加载Gama及其子组件"></a>重新加载Gama及其子组件</h4><p>即就是重新构建棋盘，步骤和构建空棋盘差不多，只不过此时squares不是全为null，而是里面有值了。</p>
<h3 id="在游戏历史记录列表显示每一步棋的坐标"><a href="#在游戏历史记录列表显示每一步棋的坐标" class="headerlink" title="在游戏历史记录列表显示每一步棋的坐标"></a>在游戏历史记录列表显示每一步棋的坐标</h3><p>格式为 (列号, 行号) ,思路是在Game组件中记录每次下棋的位置，类似history一样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//1.构造函数 state属性上 加上currentPoint表示当前下棋的坐标</span></span><br><span class="line"> <span class="attr">currentPoint</span>: []</span><br><span class="line"> <span class="comment">//2.每次下棋之后，将当前坐标加上去(数组类型)</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">history</span>: history.<span class="title function_">concat</span>([</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">squares</span>: squares</span><br><span class="line">                &#125;</span><br><span class="line">            ]),</span><br><span class="line">            <span class="attr">stepNumber</span>: history.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">xIsNext</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>,</span><br><span class="line">            <span class="attr">currentPoint</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">currentPoint</span>.<span class="title function_">concat</span>(i),</span><br><span class="line">        &#125;);</span><br><span class="line"> <span class="comment">//3.render方法中在每个步骤之后，根据currentPoint计算横纵坐标进行显示</span></span><br><span class="line">  <span class="keyword">const</span> moves = history.<span class="title function_">map</span>(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">            move=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHistoryAsc</span>?<span class="attr">move</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>.<span class="property">length</span> - <span class="number">1</span>-move</span><br><span class="line">            <span class="keyword">const</span> desc = move ?</span><br><span class="line">                <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">                <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">            <span class="keyword">const</span>  bold=move===history.<span class="property">length</span>-<span class="number">1</span>?<span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;desc&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span>:desc;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jumpTo(move)&#125;&gt;&#123;bold&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        ---------这一步的坐标是(&#123;calcRowPoint(this.state.currentPoint[move - 1])[0]&#125;,&#123;calcRowPoint(this.state.currentPoint[move - 1])[1]&#125;)</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line"> <span class="comment">//4.calcRowPoint为自己定义的，根据数组坐标计算棋盘上横纵坐标的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcRowPoint</span>(<span class="params">point</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(point===<span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> row=<span class="title class_">Math</span>.<span class="title function_">floor</span>(point/<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> line=point%<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> [line,row];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在历史记录列表中加粗显示当前选择的项目"><a href="#在历史记录列表中加粗显示当前选择的项目" class="headerlink" title="在历史记录列表中加粗显示当前选择的项目"></a>在历史记录列表中加粗显示当前选择的项目</h3><p>就是进行到哪一步，历史记录列表中的哪一项进行加粗</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单的判断一下 当前步骤move是否是历史步骤的最后一个即可</span></span><br><span class="line"><span class="keyword">const</span> moves = history.<span class="title function_">map</span>(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> desc = move ?</span><br><span class="line">                <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">                <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">            <span class="keyword">const</span>  bold=move===history.<span class="property">length</span>-<span class="number">1</span>?<span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;desc&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span>:desc;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jumpTo(move)&#125;&gt;&#123;bold&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        ---------这一步的坐标是(&#123;calcRowPoint(this.state.currentPoint[move - 1])[0]&#125;,&#123;calcRowPoint(this.state.currentPoint[move - 1])[1]&#125;)</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使用两个循环来渲染出棋盘的格子"><a href="#使用两个循环来渲染出棋盘的格子" class="headerlink" title="使用两个循环来渲染出棋盘的格子"></a>使用两个循环来渲染出棋盘的格子</h3><p>两个for循环</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Board组件中</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 采用循环生成九宫格</span></span><br><span class="line">        <span class="keyword">const</span> boardLine = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">item, itemIndex</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span> <span class="attr">key</span>=<span class="string">&#123;itemIndex&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;[1, 2, 3].map((numbers, numIndex) =&gt; this.renderSquare(item * 3 - (3 - numbers) - 1))&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;boardLine&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加一个可以升序或降序显示历史记录的按钮"><a href="#添加一个可以升序或降序显示历史记录的按钮" class="headerlink" title="添加一个可以升序或降序显示历史记录的按钮"></a>添加一个可以升序或降序显示历史记录的按钮</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//总体思路：改变渲染顺序即可</span></span><br><span class="line"><span class="comment">//增加一个button，在Game的render的return结果中</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Board</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">onClick</span>=<span class="string">&#123;i</span> =&gt;</span> this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">                    /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;-----</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;this.changeOrder();&#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                            历史记录&#123;this.state.isHistoryAsc ? &#x27;升序&#x27; : &#x27;降序&#x27;&#125;排列</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;tieResult &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>平局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                )&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line"><span class="comment">//Game的构造函数state中增加属性isHistoryAsc</span></span><br><span class="line"><span class="attr">isHistoryAsc</span>:<span class="literal">true</span></span><br><span class="line"><span class="comment">//增加一个改变这个属性的方法</span></span><br><span class="line"><span class="comment">// 切换升序降序</span></span><br><span class="line">    <span class="title function_">changeOrder</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>(&#123; <span class="attr">isHistoryAsc</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHistoryAsc</span> &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//显示的时候判断一下</span></span><br><span class="line"><span class="keyword">const</span> moves = history.<span class="title function_">map</span>(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">            move=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHistoryAsc</span>?<span class="attr">move</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>.<span class="property">length</span> - <span class="number">1</span>-move</span><br><span class="line">            <span class="keyword">const</span> desc = move ?</span><br><span class="line">                <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">                <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">            <span class="keyword">const</span>  bold=move===history.<span class="property">length</span>-<span class="number">1</span>?<span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;desc&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span>:desc;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jumpTo(move)&#125;&gt;&#123;bold&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        ---------这一步的坐标是(&#123;calcRowPoint(this.state.currentPoint[move - 1])[0]&#125;,&#123;calcRowPoint(this.state.currentPoint[move - 1])[1]&#125;)</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="每当有人获胜时，高亮显示连成一线的-3-颗棋子"><a href="#每当有人获胜时，高亮显示连成一线的-3-颗棋子" class="headerlink" title="每当有人获胜时，高亮显示连成一线的 3 颗棋子"></a>每当有人获胜时，高亮显示连成一线的 3 颗棋子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//胜利时判断出哪三个棋子，然后进行高亮就行</span></span><br><span class="line"><span class="comment">//修改判断胜利者的返回格式，除了返回谁是胜利者，还要返回坐标</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateWinner</span>(<span class="params">squares</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> lines = [</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">        [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">        <span class="keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">winner</span>:squares[a],</span><br><span class="line">                <span class="attr">point</span>:[a,b,c]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//修改之前调用calculateWinner的地方</span></span><br><span class="line"><span class="comment">//Game的render方法</span></span><br><span class="line"><span class="keyword">const</span> winnerResult = <span class="title function_">calculateWinner</span>(current.<span class="property">squares</span>);</span><br><span class="line">        <span class="keyword">const</span>  winner = winnerResult?.<span class="property">winner</span>;</span><br><span class="line"><span class="comment">//Game的handleClick(i) 方法    </span></span><br><span class="line"> <span class="keyword">if</span> (<span class="title function_">calculateWinner</span>(squares)?.<span class="property">winner</span> || squares[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//Game传递胜利者坐标 没有则为[]</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Board</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">onClick</span>=<span class="string">&#123;i</span> =&gt;</span> this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">                        point=&#123;winnerResult?.point || []&#125;</span></span><br><span class="line"><span class="language-xml">                    /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;-----</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;this.changeOrder();&#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                            历史记录&#123;this.state.isHistoryAsc ? &#x27;升序&#x27; : &#x27;降序&#x27;&#125;排列</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line"><span class="comment">//Board进行参数接受</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Board</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">onClick</span>=<span class="string">&#123;i</span> =&gt;</span> this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">                        point=&#123;winnerResult?.point || []&#125;</span></span><br><span class="line"><span class="language-xml">                    /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;-----</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;this.changeOrder();&#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                            历史记录&#123;this.state.isHistoryAsc ? &#x27;升序&#x27; : &#x27;降序&#x27;&#125;排列</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;tieResult &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>平局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                )&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="当无人获胜时，显示一个平局的消息。"><a href="#当无人获胜时，显示一个平局的消息。" class="headerlink" title="当无人获胜时，显示一个平局的消息。"></a>当无人获胜时，显示一个平局的消息。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//加上一个判断即可</span><br><span class="line">let status;</span><br><span class="line">let tieResult = false;</span><br><span class="line">if (winner) &#123;</span><br><span class="line">    status = &quot;Winner: &quot; + winner;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">   status = &quot;Next player: &quot; + (this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">if(current.squares.every((item)=&gt;item)&amp;&amp;!winner)&#123;</span><br><span class="line">    tieResult=true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//显示</span><br><span class="line">  return (</span><br><span class="line">            &lt;div className=&quot;game&quot;&gt;</span><br><span class="line">                &lt;div className=&quot;game-board&quot;&gt;</span><br><span class="line">                    &lt;Board</span><br><span class="line">                        squares=&#123;current.squares&#125;</span><br><span class="line">                        onClick=&#123;i =&gt; this.handleClick(i)&#125;</span><br><span class="line">                        point=&#123;winnerResult?.point || []&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div className=&quot;game-info&quot;&gt;</span><br><span class="line">                    &lt;div&gt;&#123;status&#125;-----</span><br><span class="line">                        &lt;button onClick=&#123;() =&gt; &#123;this.changeOrder();&#125;&#125;&gt;</span><br><span class="line">                            历史记录&#123;this.state.isHistoryAsc ? &#x27;升序&#x27; : &#x27;降序&#x27;&#125;排列</span><br><span class="line">                        &lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;ol&gt;&#123;moves&#125;&lt;/ol&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &#123;tieResult &amp;&amp; (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        &lt;h1&gt;平局&lt;/h1&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>jdbc的使用</title>
    <url>/blknjyty.github.io/2022/07/15/SpringDataJdbc%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="入门例子"><a href="#入门例子" class="headerlink" title="入门例子"></a>入门例子</h2><p>以maven项目为例，需要引入SpringDataJdbc依赖，数据库驱动依赖，配置数据源。</p>
<span id="more"></span>

<p>参考文章：<a href="https://blog.csdn.net/m0_67392182/article/details/125243331">https://blog.csdn.net/m0_67392182/article/details/125243331</a></p>
<p>假设有表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id          <span class="type">bigint</span> unsigned auto_increment comment <span class="string">&#x27;主键&#x27;</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    username    <span class="type">varchar</span>(<span class="number">20</span>)  <span class="keyword">null</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password    <span class="type">varchar</span>(<span class="number">20</span>)  <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    version     <span class="type">int</span> unsigned <span class="keyword">null</span> comment <span class="string">&#x27;版本号&#x27;</span>,</span><br><span class="line">    create_by   <span class="type">varchar</span>(<span class="number">20</span>)  <span class="keyword">null</span> comment <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    create_time datetime     <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_by   <span class="type">varchar</span>(<span class="number">20</span>)  <span class="keyword">null</span> comment <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">    update_time datetime     <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>java对应实体类为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> Java 类遵循驼峰命名规范，数据库表遵循下划线命名规范，这样 Spring Data 会自动将两者映射。唯一要注意的是 <code>@Id</code> 注解是必须的，这个注解表示数据库表的主键。 </p>
<p> Spring Data 中使用 Repository 操作 Domain，我们还需要定义一个 Repository。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">PagingAndSortingRepository</span>&lt;User,Long&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = Application.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDataJdbcTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRepository</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;hkp&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userRepository.save(user);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Spring Boot 内置了对 Spring Data 的支持，引入 spring-boot-starter-data-jdbc、配置数据源之后，Spring Boot 进行一些自动化的配置，最重要的是会自动将 Repository 的子接口注册为 bean，方法执行时解析接口方法为具体的 SQL，使用 JdbcTemplate 操作数据库</p>
<h2 id="对象和数据库表映射"><a href="#对象和数据库表映射" class="headerlink" title="对象和数据库表映射"></a>对象和数据库表映射</h2><p>一般情况，ORM 框架内部会实现 JDBC 操作数据库的通用流程，例如 Connection 的获取与关闭、Statement 的创建与关闭、参数设置、SQL 的执行等，而将一些不确定的部分交给用户控制，例如 SQL 定义、参数提供、结果映射。</p>
<p>spring-data-jdbc 将 ORM 框架做到了极致，用户可以只提供对象与数据库表的映射关系。不过 spring-data-jdbc 与 Hibernate 相比还可以灵活的提供 SQL 与参数，因此更灵活一些。<br><strong>下面看下用户唯一必须要配置的映射关系。</strong> </p>
<h3 id="表名与列名"><a href="#表名与列名" class="headerlink" title="表名与列名"></a>表名与列名</h3><p>类名与表名、类属性与表字段的映射关系，默认情况下使用驼峰命名到下划线命名转换关系。如果需要修改，可以使用对应的注解。</p>
<ul>
<li>表名：使用 @Table 注解自定义表名，例如 @Table(“user”)。</li>
<li>主键：使用 @Id 注解定义主键列，这个注解是必须的。</li>
<li>表字段：使用 @Column 注解定义表字段，例如 @Column(“username”)。</li>
</ul>
<h3 id="支持类型"><a href="#支持类型" class="headerlink" title="支持类型"></a>支持类型</h3><p>数据库的字段类型与 Java 类的字段类型之间有一个默认的对应关系，spring-data-jdbc 默认支持的类型如下。</p>
<ul>
<li>基本类型及其包装类型。</li>
<li>枚举类型，通过表中存入的名称转换为具体的枚举值。</li>
<li>String、Date、LocalDate、LocalDateTime、LocalTime。</li>
<li>Entity、Set<Entity>、List<Entity>、Map&lt;Key,Entity&gt;，其中 Entity 表示关联的表对应的类型。</Entity></Entity></li>
</ul>
<p> 由于 Repository 操作的是单个 Domain，spring-data-jdbc 仅支持 <code>1-1</code>、<code>1-n</code> 的映射关系。 </p>
<h4 id="1-1关系"><a href="#1-1关系" class="headerlink" title="1-1关系"></a>1-1关系</h4><p> <code>1-1</code> 的关系直接在 Domain 类中定义关联表对应的 Domain 类型的字段即可，不过关联表中需要有一个和主表名称相同的字段用来存储外键值。例如，<code>user</code> 表可能有一些扩展信息记录在 <code>user_ext</code> 表中。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_ext</span><br><span class="line">(</span><br><span class="line">    id   <span class="type">bigint</span> unsigned auto_increment comment <span class="string">&#x27;主键&#x27;</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age  <span class="type">int</span>         <span class="keyword">null</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    <span class="keyword">user</span> <span class="type">bigint</span>      <span class="keyword">null</span> comment <span class="string">&#x27;外键&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <code>user_ext</code> 表对应的 Domain 类型如下，注意有一个 <code>user</code> 字段记录 <code>user</code> 表的 id 值 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserExt</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long user;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 此时需要修改 <code>User</code> 类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    ... 省略其他字段</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserExt ext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-n关系"><a href="#1-n关系" class="headerlink" title="1-n关系"></a>1-n关系</h4><p> <code>1-n</code> 的关系可以在主表对应的 Domain 类上使用 <code>Set</code>、<code>List</code>、或者 <code>Map</code> 类型的字段表示关联表。例如用户可能有多个收获地址，使用如下的表来表示。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> address</span><br><span class="line">(</span><br><span class="line">    id            <span class="type">bigint</span> unsigned auto_increment comment <span class="string">&#x27;主键&#x27;</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    user_id       <span class="type">bigint</span> unsigned <span class="keyword">null</span> comment <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">    user_key      <span class="type">int</span> unsigned    <span class="keyword">null</span> comment <span class="string">&#x27;用户地址的索引，从 0 开始&#x27;</span>,</span><br><span class="line">    province_name <span class="type">varchar</span>(<span class="number">20</span>)     <span class="keyword">null</span> comment <span class="string">&#x27;省份名称&#x27;</span>,</span><br><span class="line">    city_name     <span class="type">varchar</span>(<span class="number">20</span>)     <span class="keyword">null</span> comment <span class="string">&#x27;城市名称&#x27;</span>,</span><br><span class="line">    create_by     <span class="type">varchar</span>(<span class="number">20</span>)     <span class="keyword">null</span> comment <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    create_time   datetime        <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_by     <span class="type">varchar</span>(<span class="number">20</span>)     <span class="keyword">null</span> comment <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">    update_time   datetime        <span class="keyword">null</span> comment <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 对应的 Domain 类型如下。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="keyword">private</span> Integer userKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String createBy;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String updateBy;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 分别用 <code>Set</code>、<code>List</code>、<code>Map</code> 类型在 <code>User</code> 类中表示如下。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    ... 省略其他字段</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MappedCollection(idColumn = &quot;user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Address&gt; addressSet;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MappedCollection(idColumn = &quot;user_id&quot;, keyColumn = &quot;user_key&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Address&gt; addressList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MappedCollection(idColumn = &quot;user_id&quot;, keyColumn = &quot;user_key&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Address&gt; addressMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 注意使用到了 <code>@MappedCollection</code> 注解，<code>idColumn</code> 表示外键，记录主表 ID，<code>keyColumn</code> 表示关联表在主表中的顺序，也就是 <code>List</code> 或 <code>Map</code> 中的索引位置，从 0 开始。 </p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>spring-data-jdbc 支持乐观锁，在表示版本号的字段上加上 @Version 字段即可。</p>
<p>调用 save 方法的时候会根据版本号字段判断是否为新记录，如果是新记录执行 insert 操作，如果非新记录执行 update 操作并将版本号作为条件。</p>
<p>将 User 类型的 version 字段上加上 @Version 注解，修改代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    ... 省略其他字段</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRepository</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1L</span>).setUsername(<span class="string">&quot;hkp&quot;</span>).setPassword(<span class="string">&quot;123&quot;</span>).setVersion(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    userRepository.save(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行的sql如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">USER</span>` </span><br><span class="line"><span class="keyword">SET</span> `USERNAME` <span class="operator">=</span> ?, `PASSWORD` <span class="operator">=</span> ?, `VERSION` <span class="operator">=</span> ?, `CREATE_BY` <span class="operator">=</span> ?, `CREATE_TIME` <span class="operator">=</span> ?, `UPDATE_BY` <span class="operator">=</span> ?, `UPDATE_TIME` <span class="operator">=</span> ? </span><br><span class="line"><span class="keyword">WHERE</span> `<span class="keyword">USER</span>`.`ID` <span class="operator">=</span> ? <span class="keyword">AND</span> `<span class="keyword">USER</span>`.`VERSION` <span class="operator">=</span> ?</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="新实体判断"><a href="#新实体判断" class="headerlink" title="新实体判断"></a>新实体判断</h3><p>save 方法兼具 insert 和 update 的功能，这取决于是否为新记录。</p>
<p>默认情况下先判断 id 的值，为 null 或 0 则为新记录，否则再判断 @Version 字段是否为 null 或 0 ，如果是则为新记录，否则为旧记录。</p>
<p>如果默认的规则不适用，可以让 Domain 类实现接口 Persistable 自定义判断逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Persistable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNew</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.id != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="命名查询"><a href="#命名查询" class="headerlink" title="命名查询"></a>命名查询</h3><p>spring data jdbc最底层的接口是Repository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Repository</span>&lt;T, ID&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其次是CrudRepository，其继承Repository接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CrudRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;T, ID&gt; &#123;</span><br><span class="line"><span class="comment">//里面有很多定义好的方法</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后是PagingAndSortingRepository，其继承CrudRepository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PagingAndSortingRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;T, ID&gt; &#123;</span><br><span class="line"><span class="comment">//比CrudRepository多了分页和排序的方法</span></span><br><span class="line">Iterable&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Sort sort)</span>;</span><br><span class="line">Page&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Pageable pageable)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一种使用方法就是自定义Repository接口，继承PagingAndSortingRepository接口，然后可以使用其默认的实现好的方法，只要按照其规定好的方法格式，框架会帮我们生成sql语句，与数据库交互，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">JobRepository</span> <span class="keyword">extends</span> <span class="title class_">PagingAndSortingRepository</span>&lt;Job, Long&gt; &#123;</span><br><span class="line">	<span class="comment">//根据工作id查询工作</span></span><br><span class="line">  List&lt;Job&gt; <span class="title function_">findByJobId</span><span class="params">(<span class="type">long</span> jobId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Table(&quot;job&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> jobId;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>官网提供了一些其他的形象查询方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">interface</span> <span class="title class_">PersonRepository</span> <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;Person, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">&gt;List&lt;Person&gt; <span class="title function_">findByEmailAddressAndLastname</span><span class="params">(EmailAddress emailAddress, String lastname)</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// Enables the distinct flag for the query</span></span><br><span class="line">&gt;List&lt;Person&gt; <span class="title function_">findDistinctPeopleByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span>;</span><br><span class="line">&gt;List&lt;Person&gt; <span class="title function_">findPeopleDistinctByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// Enabling ignoring case for an individual property</span></span><br><span class="line">&gt;List&lt;Person&gt; <span class="title function_">findByLastnameIgnoreCase</span><span class="params">(String lastname)</span>;</span><br><span class="line">&gt;<span class="comment">// Enabling ignoring case for all suitable properties</span></span><br><span class="line">&gt;List&lt;Person&gt; <span class="title function_">findByLastnameAndFirstnameAllIgnoreCase</span><span class="params">(String lastname, String firstname)</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">// Enabling static ORDER BY for a query</span></span><br><span class="line">&gt;List&lt;Person&gt; <span class="title function_">findByLastnameOrderByFirstnameAsc</span><span class="params">(String lastname)</span>;</span><br><span class="line">&gt;List&lt;Person&gt; <span class="title function_">findByLastnameOrderByFirstnameDesc</span><span class="params">(String lastname)</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同时也支持<strong>嵌套属性</strong>的查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;List&lt;Person&gt; <span class="title function_">findByAddress_ZipCode</span><span class="params">(ZipCode zipCode)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同时除了我们传入的实体类的属性，Spring Data Jdbc还识别 <strong>Page ， Sort</strong> 等参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;Page&lt;User&gt; <span class="title function_">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span>;</span><br><span class="line"></span><br><span class="line">&gt;Slice&lt;User&gt; <span class="title function_">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span>;</span><br><span class="line"></span><br><span class="line">&gt;List&lt;User&gt; <span class="title function_">findByLastname</span><span class="params">(String lastname, Sort sort)</span>;</span><br><span class="line"></span><br><span class="line">&gt;List&lt;User&gt; <span class="title function_">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="type">Sort</span> <span class="variable">sort</span> <span class="operator">=</span> Sort.by(<span class="string">&quot;firstname&quot;</span>).ascending()</span><br><span class="line">&gt;.and(Sort.by(<span class="string">&quot;lastname&quot;</span>).descending());</span><br><span class="line">&gt;<span class="comment">//当然也可以这样，更加地安全</span></span><br><span class="line">&gt;TypedSort&lt;Person&gt; person = Sort.sort(Person.class);</span><br><span class="line">&gt;<span class="type">Sort</span> <span class="variable">sort</span> <span class="operator">=</span> person.by(Person::getFirstname).ascending()</span><br><span class="line">&gt;.and(person.by(Person::getLastname).descending());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;Pageable pageable=PageRequest.of(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>甚至可以<strong>限制查询个数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;Page&lt;User&gt; <span class="title function_">queryFirst10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span>;</span><br><span class="line"></span><br><span class="line">&gt;Slice&lt;User&gt; <span class="title function_">findTop3ByLastname</span><span class="params">(String lastname, Pageable pageable)</span>;</span><br><span class="line"></span><br><span class="line">&gt;List&lt;User&gt; <span class="title function_">findFirst10ByLastname</span><span class="params">(String lastname, Sort sort)</span>;</span><br><span class="line"></span><br><span class="line">&gt;List&lt;User&gt; <span class="title function_">findTop10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>返回类型 <code>Streamable</code>    <code>Iterable</code>  <code>Collections </code>  <code>Stream</code>可以自定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//Streamable和StreamStream的区别在于Stream必须关闭</span></span><br><span class="line">&gt;<span class="keyword">try</span> (Stream&lt;User&gt; stream = repository.findAllByCustomQueryAndStream()) &#123;</span><br><span class="line">&gt;stream.forEach(…);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;Streamable&lt;Person&gt; result = repository.findByFirstnameContaining(<span class="string">&quot;av&quot;</span>)</span><br><span class="line">&gt;.and(repository.findByLastnameContaining(<span class="string">&quot;ea&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>空值</strong>的指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">&gt;<span class="comment">//入参和返回值有一个为空，抛出异常IllegalArgumentException </span></span><br><span class="line">&gt;User <span class="title function_">getByEmailAddress</span><span class="params">(EmailAddress emailAddress)</span>;    </span><br><span class="line">&gt;<span class="comment">//入参和返回值均可以是null</span></span><br><span class="line">&gt;<span class="meta">@Nullable</span></span><br><span class="line">&gt;User <span class="title function_">findByEmailAddress</span><span class="params">(<span class="meta">@Nullable</span> EmailAddress emailAdress)</span>;</span><br><span class="line">&gt;<span class="comment">//没有查询到返回Optional.empty()，但是入参为空时抛出异常IllegalArgumentException </span></span><br><span class="line">&gt;Optional&lt;User&gt; <span class="title function_">findOptionalByEmailAddress</span><span class="params">(EmailAddress emailAddress)</span>; </span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>异步返回</strong>结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">@Async</span></span><br><span class="line">&gt;Future&lt;User&gt; <span class="title function_">findByFirstname</span><span class="params">(String firstname)</span>;               </span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Async</span></span><br><span class="line">&gt;CompletableFuture&lt;User&gt; <span class="title function_">findOneByFirstname</span><span class="params">(String firstname)</span>; </span><br><span class="line"></span><br><span class="line">&gt;<span class="meta">@Async</span></span><br><span class="line">&gt;ListenableFuture&lt;User&gt; <span class="title function_">findOneByLastname</span><span class="params">(String lastname)</span>; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Query注解"><a href="#Query注解" class="headerlink" title="@Query注解"></a>@Query注解</h3><p>优先注解查询，没有注解去找命名查询。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query(&quot;select firstName, lastName from User u where u.emailAddress = :email&quot;)</span></span><br><span class="line">  User <span class="title function_">findByEmailAddress</span><span class="params">(<span class="meta">@Param(&quot;email&quot;)</span> String email)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以使用 @Modifying on 查询方法将查询标记为修改查询，如以下示例所示</span></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query(&quot;UPDATE DUMMYENTITY SET name = :name WHERE id = :id&quot;)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateName</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id, <span class="meta">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="jdbcTempalte"><a href="#jdbcTempalte" class="headerlink" title="jdbcTempalte"></a>jdbcTempalte</h3><p><a href>参考文章</a>(<a href="https://www.cnblogs.com/wenxuehai/p/14716372.html">https://www.cnblogs.com/wenxuehai/p/14716372.html</a>)</p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote>
<p>JdbcTemplate 是 Spring 对 JDBC 的封装，目的是使JDBC更加易于使用，JdbcTemplate是Spring的一部分。JdbcTemplate 处理了资源的建立和释放，它帮助我们避免一些常见的错误，比如忘了总要关闭连接。他运行核心的JDBC工作流，如Statement的建立和执行，而我们只需要提供SQL语句和提取结果即可。</p>
<p>Spring为了简化数据库访问，主要做了以下几点工作：</p>
<ul>
<li>提供了简化的访问JDBC的模板类，不必手动释放资源；</li>
<li>提供了一个统一的 DAO 类以实现 Data Access Object 模式；</li>
<li>把<code>SQLException</code>封装为<code>DataAccessException</code>，这个异常是一个<code>RuntimeException</code>，并且让我们能区分SQL异常的原因，例如，<code>DuplicateKeyException</code>表示违反了一个唯一约束；</li>
<li>能方便地集成Hibernate、JPA和MyBatis这些数据库访问框架。</li>
</ul>
</blockquote>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><blockquote>
<p>jdbcTemplate主要提供的5类方法及使用：</p>
<p>（1）execute() 方法：可以执行任何SQL语句，一般用于执行DDL语句。</p>
<p>（2）update(sqlStr, 参数列表) 方法：用于执行新增、修改、删除等语句。</p>
<p>（3）batchUpdate() 方法：用于执行批处理相关语句，batchUpdate方法第二参数是一个元素为 Object[] 数组类型的 List 集合。</p>
<p>（4）query() 方法及 queryForXXX() 方法：用于执行查询相关语句，查询结果为基本数据类型或者是单个对象一般使用 queryForObject()</p>
<ul>
<li>queryForInt()：查询一行数据并返回 int 型结果。例子：jdbcTemplate.queryForInt(“select count(*) from user”)</li>
<li>queryForObject(sqlStr, 指定的数据类型, 参数列表)：查询一行任何类型的数据，最后一个参数指定返回结果类型。例子：jdbcTemplate.queryForObject(“selct count(*) from user”, Integer.class)</li>
<li>queryForMap(sqlStr, 参数列表)：查询一行数据并将该行数据转换为 Map 返回。将会将列名作为key，列值作为 value 封装成 map。当查询出来的行数大于1时会报错。例子：jdbcTemplate.queryForMap(“select * from user where username = ?”, “aaa”);``</li>
<li>List&lt;Map&lt;String, Object&gt;&gt; queryForList(sqlStr, 参数列表)：将查询结果集封装为 list 集合，该集合的每一条元素都是一个 map。</li>
<li>query(sqlStr, RowMapper对象, 参数列表)：查询多行数据，并将结果集封装为元素是 JavaBean 的 list。（注意，指定的JavaBean的属性最好不要是基本类型，因为查询出来的结果可能是null，而null赋值为基本数据类型将会报错。比如int最好定义为Integer）</li>
</ul>
<p>（5）call() 方法：用于执行存储过程、函数相关语句。</p>
</blockquote>
<h4 id="具体方法介绍"><a href="#具体方法介绍" class="headerlink" title="具体方法介绍"></a>具体方法介绍</h4><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单个新增</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//创建SQL语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user values(?, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="comment">//调用方法执行SQL</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">updateRow</span> <span class="operator">=</span> jdbcTemplate.update(sql, user.getId(), user.getName(), user.getPassword());</span><br><span class="line">        </span><br><span class="line">        System.out.println(updateRow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量新增</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBath</span><span class="params">(List&lt;Object[]&gt; userList)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user values(?, ?, ?)&quot;</span>;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        List&lt;Object[]&gt; userList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        Object[] arr1 = &#123;1, &quot;name1&quot;, &quot;password1&quot;&#125;;</span></span><br><span class="line"><span class="comment">        Object[] arr2 = &#123;2, &quot;name2&quot;, &quot;password2&quot;&#125;;</span></span><br><span class="line"><span class="comment">        Object[] arr3 = &#123;3, &quot;name3&quot;, &quot;password3&quot;&#125;;</span></span><br><span class="line"><span class="comment">        userList.add(arr1);</span></span><br><span class="line"><span class="comment">        userList.add(arr2);</span></span><br><span class="line"><span class="comment">        userList.add(arr3);</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, userList);  <span class="comment">//batchUpdate方法第二个参数是集合，该集合元素是数组，数组里面的每个值对应着添加到数据库表里面的字段值。该方法返回影响行数数组</span></span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="改删"><a href="#改删" class="headerlink" title="改删"></a>改删</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单个修改 删除</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set name=?, password=? where id=?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">updateRow</span> <span class="operator">=</span> jdbcTemplate.update(sql, user.getName(), user.getPassword(), user.getId());</span><br><span class="line">        System.out.println(updateRow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from user where id=?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">updateRow</span> <span class="operator">=</span> jdbcTemplate.update(sql, userId);</span><br><span class="line">        System.out.println(updateRow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量修改 删除</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="comment">//批量修改</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBatch</span><span class="params">(List&lt;Object[]&gt; listArg)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set name=?, password=? where id=?&quot;</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        List&lt;Object[]&gt; userList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        Object[] arr1 = &#123;1, &quot;name1&quot;, &quot;password1&quot;&#125;;</span></span><br><span class="line"><span class="comment">        Object[] arr2 = &#123;2, &quot;name2&quot;, &quot;password2&quot;&#125;;</span></span><br><span class="line"><span class="comment">        Object[] arr3 = &#123;3, &quot;name3&quot;, &quot;password3&quot;&#125;;</span></span><br><span class="line"><span class="comment">        userList.add(arr1);</span></span><br><span class="line"><span class="comment">        userList.add(arr2);</span></span><br><span class="line"><span class="comment">        userList.add(arr3);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">        <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, listArg);</span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//批量删除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBath</span><span class="params">(List&lt;Object[]&gt; listArg)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from user where id=?&quot;</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        List&lt;Object[]&gt; userList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        Object[] arr1 = &#123;6&#125;;</span></span><br><span class="line"><span class="comment">        Object[] arr2 = &#123;7&#125;;</span></span><br><span class="line"><span class="comment">        userList.add(arr1);</span></span><br><span class="line"><span class="comment">        userList.add(arr2);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, listArg);</span><br><span class="line">        System.out.println(Arrays.toString(ints));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p> <strong>queryForObject</strong>  (sqlStr, 指定的数据类型, 参数列表)：查询一行任何类型的数据，最后一个参数指定返回结果类型。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from user&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">userCount</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="type">int</span>.class);  <span class="comment">//第二个参数是返回类型的class</span></span><br><span class="line">        <span class="keyword">return</span> userCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserInfo</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where id=?&quot;</span>;</span><br><span class="line">        <span class="comment">// rowMapper 是一个接口，可以使用这个接口里面的实现类完成数据的封装，规定每一行记录和JavaBean的属性如何映射</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class), userId);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <strong>query</strong>  (sqlStr, RowMapper对象, 参数列表)：查询多行数据，并将结果集封装为元素是 JavaBean 的 list。（注意，指定的 JavaBean 的属性最好不要是基本类型，因为查询出来的结果可能是null，而null赋值为基本数据类型将会报错。比如int最好定义为Integer） </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        List&lt;User&gt; userList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class));</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实体回调"><a href="#实体回调" class="headerlink" title="实体回调"></a>实体回调</h2><h3 id="概念了解"><a href="#概念了解" class="headerlink" title="概念了解"></a>概念了解</h3><p> Spring Data JDBC 触发事件，这些事件被发布到应用程序上下文中的任何匹配的 <code>ApplicationListener bean</code> </p>
<table>
<thead>
<tr>
<th><strong>事件</strong></th>
<th><strong>何时发布</strong></th>
</tr>
</thead>
<tbody><tr>
<td>BeforeDeleteEvent</td>
<td>在聚合根被删除之前</td>
</tr>
<tr>
<td>AfterDeleteEvent</td>
<td>在聚合根被删除之后</td>
</tr>
<tr>
<td>BeforeConvertEvent</td>
<td>在聚合根被转换为执行 <code>SQL</code> 语句的计划之前，但在决定聚合是否是新的之后，即是否按顺序进行更新或插入。如果你想以编程方式设置 id，这是正确的事件。</td>
</tr>
<tr>
<td>BeforeSaveEvent</td>
<td>在保存聚合根之前（即插入或更新，但在决定是否插入或更新之后）。</td>
</tr>
<tr>
<td>AfterSaveEvent</td>
<td>在保存聚合根之后（即插入或更新）。</td>
</tr>
<tr>
<td>AfterLoadEvent</td>
<td>在从数据库 <code>ResultSet</code> 创建聚合根并设置其所有属性之后。注意：这已被弃用。改用 <code>AfterConvert</code></td>
</tr>
<tr>
<td>AfterConvertEvent</td>
<td>在从数据库 <code>ResultSet</code> 创建聚合根并设置其所有属性之后</td>
</tr>
</tbody></table>
<blockquote>
<p>补充：值对象、实体和聚合根。</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/15/SpringDataJdbc%E7%9A%84%E4%BD%BF%E7%94%A8/gitee\Blog\source_posts\SpringDataJdbc的使用\1658388181671.png" alt="1658388181671"></p>
<p><strong>实体</strong>具有ID，<a href="https://so.csdn.net/so/search?q=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&spm=1001.2101.3001.7020">生命周期</a>，状态用值对象描述状态，实体通过ID进行区分是这个实体还是那个实体 。</p>
<p><strong>聚合根</strong>是实体，聚合根的ID全局唯一，聚合根下面的实体的ID在聚合根内唯一即可； </p>
<p><strong>值对象</strong>无生命周期，本质是一个值，通过两个值对象的值是否相同来区分是都是同一个值对象 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//聚合根</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">order</span>&#123;</span><br><span class="line"><span class="keyword">public</span> string ID;<span class="comment">//值对象，订单的ID，全局唯一</span></span><br><span class="line"><span class="keyword">public</span> string OrderNo;<span class="comment">//值对象</span></span><br><span class="line"><span class="keyword">public</span> Address CustomerAddress;<span class="comment">//值对象</span></span><br><span class="line"><span class="keyword">public</span> IList&lt;orderItem&gt;Items;<span class="comment">//实体集合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> String  Production;<span class="comment">//实体的主键，Order内唯一即可</span></span><br><span class="line"><span class="keyword">public</span> String  ProductName;<span class="comment">//值对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> price;<span class="comment">//值对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> Count;<span class="comment">//值对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> string Province;<span class="comment">//值对象</span></span><br><span class="line"><span class="keyword">public</span> string City;<span class="comment">//值对象</span></span><br><span class="line"><span class="keyword">public</span> string County;<span class="comment">//值对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="注册Entity-Callbacks"><a href="#注册Entity-Callbacks" class="headerlink" title="注册Entity Callbacks"></a>注册Entity Callbacks</h3><p><strong>实现上述所说的事件回调接口</strong>，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order(1)</span>  <span class="comment">//注解排序                                                         </span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">First</span> <span class="keyword">implements</span> <span class="title class_">BeforeSaveCallback</span>&lt;Person&gt; &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Person <span class="title function_">onBeforeSave</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="comment">// ...</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者用下面这种</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultingEntityCallback</span> <span class="keyword">implements</span> <span class="title class_">BeforeSaveCallback</span>&lt;Person&gt;,</span><br><span class="line">                                                           Ordered &#123; <span class="comment">//实现ordered接口排序</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">onBeforeSave</span><span class="params">(Person entity, String collection)</span> &#123;</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">100</span>;                                                  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具体应用：</p>
<p>比如操作数据库表info时，执行sql执行和保存具体类的时候，想去一个信息进行加密和解密(数据库存储的是加密信息，程序实体类存储的是加密之后的，为了安全考虑)。就有了如下的实体类回调。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">InfoRepository</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">PagingAndSortingRepository</span>&lt;Info, String&gt;, CommonRepository&lt;Info&gt; &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Component</span></span><br><span class="line">  <span class="meta">@AllArgsConstructor(onConstructor_ = &#123;@Autowired&#125;)</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">ManagerInfoCallbacks</span></span><br><span class="line">      <span class="keyword">implements</span> <span class="title class_">BeforeSaveCallback</span>&lt;ManagerInfo&gt;, AfterConvertCallback&lt;ManagerInfo&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] symEncKey;</span><br><span class="line">    <span class="comment">/** The keys of manager infos that should be encrypted. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; KEYS =</span><br><span class="line">        Sets.newHashSet(</span><br><span class="line">            <span class="string">&quot;addkld&quot;</span>,</span><br><span class="line">            <span class="string">&quot;jkjpojpo&quot;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ManagerInfo <span class="title function_">onAfterConvert</span><span class="params">(<span class="meta">@NotNull</span> Info info)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (KEYS.contains(aggregate.getKey())) &#123;</span><br><span class="line">        info.setValue(Utils.symDecrypt(info.getValue(), symEncKey));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Info <span class="title function_">onBeforeSave</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@NotNull</span> Info info,</span></span><br><span class="line"><span class="params">        <span class="meta">@NotNull</span> MutableAggregateChange&lt;Info&gt; infoChange)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (KEYS.contains(info.getKey())) &#123;</span><br><span class="line">        info.setValue(Utils.symEncrypt(info.getValue(), symEncKey));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>SpringDataJdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>stream</title>
    <url>/blknjyty.github.io/2022/04/01/stream/</url>
    <content><![CDATA[<h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p>
<ul>
<li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li>
<li><strong>数据源</strong> 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等—不可以是map！！</li>
<li><strong>聚合操作</strong> 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。l</li>
</ul>
 <span id="more"></span> 

<h4 id="接口继承关系图："><a href="#接口继承关系图：" class="headerlink" title="接口继承关系图："></a>接口继承关系图：</h4><p><img src="/blknjyty.github.io/stream%5C1623152105(1).jpg" alt="流接口图"></p>
<img src="/blknjyty.github.io/2022/04/01/stream/1623152105(1).jpg" class title="stream接口图">

<p>图中4种<em>stream</em>接口继承自<code>BaseStream</code>，其中<code>IntStream, LongStream, DoubleStream</code>对应三种基本类型（<code>int, long, double</code>，注意不是包装类型），<code>Stream</code>对应所有剩余类型的<em>stream</em>视图。为不同数据类型设置不同<em>stream</em>接口，可以1.提高性能，2.增加特定接口函数。</p>
<h4 id="和collections的比较"><a href="#和collections的比较" class="headerlink" title="和collections的比较"></a>和collections的比较</h4><ul>
<li><strong>无存储</strong>。<em>stream</em>不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I/O channel等。</li>
<li><strong>为函数式编程而生</strong>。对<em>stream</em>的任何修改都不会修改背后的数据源，比如对<em>stream</em>执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新<em>stream</em>。</li>
<li><strong>惰式执行</strong>。<em>stream</em>上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。</li>
<li><strong>可消费性</strong>。<em>stream</em>只能被“消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。</li>
</ul>
<h4 id="常见api："><a href="#常见api：" class="headerlink" title="常见api："></a>常见api：</h4><p>对<em>stream</em>的操作分为为两类，**中间操作(*intermediate operations*)和结束操作(*terminal operations*)**，二者特点是：</p>
<ol>
<li><strong>中间操作总是会惰式执行</strong>，调用中间操作只会生成一个标记了该操作的新<em>stream</em>，仅此而已。</li>
<li><strong>结束操作会触发实际计算</strong>，计算发生时会把所有中间操作积攒的操作以<em>pipeline</em>的方式执行，这样可以减少迭代次数。计算完成之后<em>stream</em>就会失效。</li>
</ol>
<table>
<thead>
<tr>
<th>操作类型</th>
<th>接口方法</th>
</tr>
</thead>
<tbody><tr>
<td>中间操作</td>
<td>concat() distinct() filter() flatMap() limit() map() peek() skip() sorted() parallel() sequential() unordered()</td>
</tr>
<tr>
<td>结束操作</td>
<td>allMatch() anyMatch() collect() count() findAny() findFirst() forEach() forEachOrdered() max() min() noneMatch() reduce() toArray()</td>
</tr>
</tbody></table>
<p>区分中间操作和结束操作最简单的方法，就是看方法的返回值，返回值为<em>stream</em>的大都是中间操作，否则是结束操作。</p>
<h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Stream.forEach()迭代</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>

<h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保留长度等于3的字符串</span></span><br><span class="line">Stream&lt;String&gt; stream= Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.filter(str -&gt; str.length()==<span class="number">3</span>)</span><br><span class="line">    .forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>

<h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream= Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.distinct()</span><br><span class="line">    .forEach(str -&gt; System.out.println(str));</span><br><span class="line"><span class="comment">//去重 将第二个too去掉</span></span><br></pre></td></tr></table></figure>

<h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>排序函数有两个，一个是用自然顺序排序，一个是使用自定义比较器排序，函数原型分别为<code>Stream&lt;T&gt;　sorted()</code>和<code>Stream&lt;T&gt;　sorted(Comparator&lt;? super T&gt; comparator)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream= Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.sorted((str1, str2) -&gt; str1.length()-str2.length())</span><br><span class="line">    .forEach(str -&gt; System.out.println(str));</span><br><span class="line"><span class="comment">//按照长度升序排序</span></span><br></pre></td></tr></table></figure>

<h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>函数原型为<code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T,? extends R&gt; mapper)</code>，作用是返回一个对当前所有元素执行执行<code>mapper</code>之后的结果组成的<code>Stream</code>。直观的说，就是对每个元素按照某种操作进行转换，转换前后<code>Stream</code>中元素的个数不会改变，但元素的类型取决于转换之后的类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream　= Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">stream.map(str -&gt; str.toUpperCase())</span><br><span class="line">    .forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>

<p>项目常用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ADto&gt; rules = elist.stream().map(e -&gt; &#123;</span><br><span class="line">            <span class="type">ADto</span> <span class="variable">aDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADto</span>();</span><br><span class="line">            aDto.setBagId(e.getBagId());</span><br><span class="line">            aDto.setLocale(e.getLocale());</span><br><span class="line">            aDto.setRuleId(e.getRuleId());</span><br><span class="line">            <span class="keyword">return</span> aDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"><span class="comment">//或者封装一个方法</span></span><br><span class="line">List&lt;ADto&gt; rules = elist.stream().map(e -&gt; convertA(e)</span><br><span class="line">        ).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h5 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h5><p><code>Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action)</code></p>
<blockquote>
<p>map和peek的区别</p>
</blockquote>
<p>首先看定义</p>
<blockquote>
<p> Stream<T> peek(Consumer&lt;? super T&gt; action);</T></p>
<p> peek方法接收一个Consumer的入参。了解λ表达式的应该明白 Consumer的实现类 应该只有一个方法，该方法返回类型为void如:Consumer<Integer> c =  i -&gt; System.out.println(“hello” + i);</Integer></p>
</blockquote>
<blockquote>
<p>map方法的入参为 Function。<R> Stream<R> map(Function&lt;? super T, ? extends R&gt; mapper);</R></R></p>
<p>Function 的 λ表达式 可以这样写Function&lt;Integer,String&gt; f = x -&gt; {return  “hello” + i;};</p>
</blockquote>
<p>map函数对Stream中元素执行的是映射操作，会以新的元素(map的结果)填充新的Stream，严格的讲map不是修改原来的元素。peek只能消费Stream中的元素，是否可以更该Stream中的元素，取决于Stream中的元素是否是不可变对象。如果是不可变对象，则不可修改Stream中的元素；如果是可变对象，则可以修改对象的值，但是无法修改对象的引用.</p>
<p>不可变对象:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">        .filter(e -&gt; e.length() &gt; <span class="number">3</span>)</span><br><span class="line">        .peek(s -&gt; &#123;</span><br><span class="line">            s = s + <span class="string">&quot;-&quot;</span> + s;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;)</span><br><span class="line">        .map(String::toUpperCase)</span><br><span class="line">        .peek(e -&gt; System.out.println(<span class="string">&quot;Mapped value: &quot;</span> + e))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">three-three</span><br><span class="line">Mapped value: THREE</span><br><span class="line">four-four</span><br><span class="line">Mapped value: FOUR</span><br><span class="line">[THREE, FOUR]</span><br></pre></td></tr></table></figure>

<p>可变对象:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//peek常用案例</span></span><br><span class="line">  List&lt;User&gt; userList=Stream.of(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;a&quot;</span>),<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;b&quot;</span>),<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;c&quot;</span>)).peek(u-&gt;u.setName(<span class="string">&quot;kkk&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,userList);</span><br><span class="line"><span class="comment">//10:25:59.784 [main] INFO com.flydean.PeekUsage - [PeekUsage.User(name=kkk), PeekUsage.User(name=kkk), PeekUsage.User(name=kkk)]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h5><p>函数原型为<code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</code>，作用是对每个元素执行<code>mapper</code>指定的操作，并用所有<code>mapper</code>返回的<code>Stream</code>中的元素组成一个新的<code>Stream</code>作为最终返回结果。说起来太拗口，通俗的讲<code>flatMap()</code>的作用就相当于把原<em>stream</em>中的所有元素都”摊平”之后组成的<code>Stream</code>，转换前后元素的个数和类型都可能会改变。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;List&lt;Integer&gt;&gt; stream = Stream.of(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>), Arrays.asList(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">stream.flatMap(list -&gt; list.stream())</span><br><span class="line">    .forEach(i -&gt; System.out.println(i));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码中，原来的<code>stream</code>中有两个元素，分别是两个<code>List&lt;Integer&gt;</code>，执行<code>flatMap()</code>之后，将每个<code>List</code>都“摊平”成了一个个的数字，所以会新产生一个由5个数字组成的<code>Stream</code>。所以最终将输出1~5这5个数字。</p>
<p>形象的例子：</p>
<p>现在学校通知关于数学教学的通知给家长。思路：找到所有教数学的老师，找到老师教的学生，找到学生的家长进行通知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 找到所有数学老师的学生的家长的电话,并找他们开家长会</span></span><br><span class="line">        List&lt;Parents&gt; collect = teacs.stream()</span><br><span class="line">                <span class="comment">// 过滤数学老师</span></span><br><span class="line">                .filter(t -&gt; Subject.Math.getValue().equals(t.getSubject()))</span><br><span class="line">                <span class="comment">// 通过老师找学生</span></span><br><span class="line">                .flatMap(t -&gt; stus.stream().filter(s -&gt; s.getTechId().equals(t.getId())))</span><br><span class="line">                <span class="comment">// 过滤重复的学生(使用student的equals和hashCode方法)</span></span><br><span class="line">                .distinct()</span><br><span class="line">                <span class="comment">// 通过学生找家长(这里就简化为创建家长对象)</span></span><br><span class="line">                .map(s -&gt; &#123;</span><br><span class="line">                    <span class="type">Parents</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parents</span>();</span><br><span class="line">                    p.setId(UUID.randomUUID().toString());</span><br><span class="line">                    p.setChirldId(s.getId());</span><br><span class="line">                    p.setName(s.getName().toUpperCase() + <span class="string">&quot;&#x27;s Parent&quot;</span>);</span><br><span class="line">                    p.setEmail((<span class="type">int</span>) (Math.random() * <span class="number">1000000</span>) + <span class="string">&quot;@qq.com&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 打印到控制台看看</span></span><br><span class="line">        collect.stream()</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对于调用flatmap的流的每一个元素，执行flatmap入参中的函数式方法，由于该函数式方法必须返回一个stream<T>类型的流，这样对于调用flatmap的操作来说，就收集了另一种类型(<T>)的流，并在后续的操作中将<T>类型进行合并，最终产生一个stream<T>的流，而不是一个stream&lt;stream<T>&gt;类型的流。</T></T></T></T></T></p>
<h4 id="规约操作"><a href="#规约操作" class="headerlink" title="规约操作"></a>规约操作</h4><p>规约操作（<em>reduction operation</em>）又被称作折叠操作（<em>fold</em>），是通过某个连接动作将所有元素汇总成一个汇总结果的过程。元素求和、求最大值或最小值、求出元素总个数、将所有元素转换成一个列表或集合，都属于规约操作。<em>Stream</em>类库有两个通用的规约操作<code>reduce()</code>和<code>collect()</code>，也有一些为简化书写而设计的专用规约操作，比如<code>sum()</code>、<code>max()</code>、<code>min()</code>、<code>count()</code>等。</p>
<h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h5><p><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code></p>
<p><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></p>
<p><code>&lt;U&gt; U reduce(U identity, BiFunction&lt;U,? super T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</code></p>
<p>！！擅长生成一个值！！</p>
<p><code>reduce()</code>最常用的场景就是从一堆值中生成一个值。用这么复杂的函数去求一个最大或最小值，你是不是觉得设计者有病。其实不然，因为“大”和“小”或者“求和”有时会有不同的语义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出最长的单词</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; longest = stream.reduce((s1, s2) -&gt; s1.length()&gt;=s2.length() ? s1 : s2);</span><br><span class="line"><span class="comment">//Optional&lt;String&gt; longest = stream.max((s1, s2) -&gt; s1.length()-s2.length());</span></span><br><span class="line">System.out.println(longest.get());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求出一组单词的长度之和。这是个“求和”操作，操作对象输入类型是String，而结果类型是Integer。</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">lengthSum</span> <span class="operator">=</span> stream.reduce(<span class="number">0</span>,　<span class="comment">// 初始值　// (1)</span></span><br><span class="line">        (sum, str) -&gt; sum+str.length()) <span class="comment">// 累加器 // (2)</span></span><br><span class="line"> <span class="comment">//       (a, b) -&gt; a+b);　</span></span><br><span class="line"><span class="comment">// int lengthSum = stream.mapToInt(str -&gt; str.length()).sum();</span></span><br><span class="line">System.out.println(lengthSum);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具体例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//下面的代码演示了如何将配置文件的每一行配置通过map()和reduce()操作聚合成一个Map&lt;String, String&gt;：</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 按行读取配置文件:</span><br><span class="line">        List&lt;String&gt; props = List.of(&quot;profile=native&quot;, &quot;debug=true&quot;, &quot;logging=warn&quot;, &quot;interval=500&quot;);</span><br><span class="line">        Map&lt;String, String&gt; map = props.stream()</span><br><span class="line">                // 把k=v转换为Map[k]=v:</span><br><span class="line">                .map(kv -&gt; &#123;</span><br><span class="line">                    String[] ss = kv.split(&quot;\\=&quot;, 2);</span><br><span class="line">                    return Map.of(ss[0], ss[1]);</span><br><span class="line">                &#125;)</span><br><span class="line">                // 把所有Map聚合到一个Map:</span><br><span class="line">                .reduce(new HashMap&lt;String, String&gt;(), (m, kv) -&gt; &#123;</span><br><span class="line">                    m.putAll(kv);</span><br><span class="line">                    return m;</span><br><span class="line">                &#125;);</span><br><span class="line">        // 打印结果:</span><br><span class="line">        map.forEach((k, v) -&gt; &#123;</span><br><span class="line">            System.out.println(k + &quot; = &quot; + v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="collect！！！！！！"><a href="#collect！！！！！！" class="headerlink" title="collect！！！！！！"></a>collect！！！！！！</h5><p>！！擅长生成一个集合或者是Map等复杂对象！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将Stream转换成容器或Map</span></span><br><span class="line"><span class="comment">//上述代码分别列举了如何将Stream转换成List、Set和Map</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(Collectors.toList()); <span class="comment">// (1)</span></span><br><span class="line"><span class="comment">// Set&lt;String&gt; set = stream.collect(Collectors.toSet()); // (2)</span></span><br><span class="line"><span class="comment">// Map&lt;String, Integer&gt; map = stream.collect(Collectors.toMap(Function.identity(), String::length)); // (3)</span></span><br><span class="line"><span class="comment">//System.out.println(map);</span></span><br><span class="line"><span class="comment">//&#123;love=4, too=3, I=1, you=3&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>Function</em>是一个接口，那么<code>Function.identity()</code>是什么意思呢？这要从两方面解释：</p>
</blockquote>
<ol>
<li>Java 8允许在接口中加入具体方法。接口中的具体方法有两种，<em>default</em>方法和<em>static</em>方法，<code>identity()</code>就是<em>Function</em>接口的一个静态方法。</li>
<li><code>Function.identity()</code>是Lambda表达式对象，意思是返回的输出和输入一样，等价于形如<code>t -&gt; t</code>形式的Lambda表达式。</li>
</ol>
<blockquote>
<p>::</p>
</blockquote>
<p>诸如<code>String::length</code>的语法形式叫做方法引用（<em>method references</em>），这种语法用来替代某些特定形式Lambda表达式。如果Lambda表达式的全部内容就是调用一个已有的方法，那么可以用方法引用来替代Lambda表达式。方法引用可以细分为四类：</p>
<table>
<thead>
<tr>
<th>方法引用类别</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>引用静态方法</td>
<td><code>Integer::sum</code></td>
</tr>
<tr>
<td>引用某个对象的方法</td>
<td><code>list::add</code></td>
</tr>
<tr>
<td>引用某个类的方法</td>
<td><code>String::length</code></td>
</tr>
<tr>
<td>引用构造方法</td>
<td><code>HashMap::new</code></td>
</tr>
</tbody></table>
<blockquote>
<p>转成list，set</p>
</blockquote>
<p><em>collect()<em>方法定义为<code>&lt;R&gt; R collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R,? super T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</code>，三个参数依次对应上述三条分析。不过每次调用</em>collect()<em>都要传入这三个参数太麻烦，收集器</em>Collector</em>就是对这三个参数的简单封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//　将Stream规约成List</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(ArrayList::<span class="keyword">new</span>, ArrayList::add, ArrayList::addAll);<span class="comment">// 方式１</span></span><br><span class="line"><span class="comment">//List&lt;String&gt; list = stream.collect(Collectors.toList());// 方式2</span></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当想要确切的制定返回的类型，而不是接口类型的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用toCollection()指定规约容器的类型</span></span><br><span class="line">ArrayList&lt;String&gt; arrayList = stream.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));<span class="comment">// (3)</span></span><br><span class="line">HashSet&lt;String&gt; hashSet = stream.collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));<span class="comment">// (4)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>转成map</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用toMap()统计学生GPA</span></span><br><span class="line">Map&lt;Student, Double&gt; studentToGPA =</span><br><span class="line">     students.stream().collect(Collectors.toMap(Functions.identity(),<span class="comment">// 如何生成key</span></span><br><span class="line">                                     student -&gt; computeGPA(student)));<span class="comment">// 如何生成value</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Partition students into passing and failing</span></span><br><span class="line">Map&lt;Boolean, List&lt;Student&gt;&gt; passingFailing = students.stream()</span><br><span class="line">         .collect(Collectors.partitioningBy(s -&gt; s.getGrade() &gt;= PASS_THRESHOLD));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Group employees by department</span></span><br><span class="line">Map&lt;Department, List&lt;Employee&gt;&gt; byDept = employees.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(Employee::getDepartment));</span><br><span class="line"><span class="comment">//增强版groupingBy</span></span><br><span class="line"><span class="comment">// 使用下游收集器统计每个部门的人数</span></span><br><span class="line">Map&lt;Department, Integer&gt; totalByDept = employees.stream()</span><br><span class="line">                    .collect(Collectors.groupingBy(Employee::getDepartment,</span><br><span class="line">                                                   Collectors.counting()));<span class="comment">// 下游收集器</span></span><br><span class="line"><span class="comment">//下游收集器还可以有更下游的收集器</span></span><br><span class="line"><span class="comment">// 按照部门对员工分布组，并只保留员工的名字</span></span><br><span class="line">Map&lt;Department, List&lt;String&gt;&gt; byDept = employees.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(Employee::getDepartment,</span><br><span class="line">                        Collectors.mapping(Employee::getName,<span class="comment">// 下游收集器</span></span><br><span class="line">                                Collectors.toList())));<span class="comment">// 更下游的收集器</span></span><br><span class="line">                               </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Collectors.joining()</span></span><br><span class="line"><span class="comment">// 使用Collectors.joining()拼接字符串</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line"><span class="comment">//String joined = stream.collect(Collectors.joining());// &quot;Iloveyou&quot;</span></span><br><span class="line"><span class="comment">//String joined = stream.collect(Collectors.joining(&quot;,&quot;));// &quot;I,love,you&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">joined</span> <span class="operator">=</span> stream.collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>));<span class="comment">// &quot;&#123;I,love,you&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="收集器"><a href="#收集器" class="headerlink" title="收集器"></a>收集器</h4><p>收集器（<em>Collector</em>）是为<code>Stream.collect()</code>方法量身打造的工具接口（类）。考虑一下将一个<em>Stream</em>转换成一个容器（或者<em>Map</em>）需要做哪些工作？我们至少需要两样东西：</p>
<ol>
<li>目标容器是什么？是<em>ArrayList</em>还是<em>HashSet</em>，或者是个<em>TreeMap</em>。</li>
<li>新元素如何添加到容器中？是<code>List.add()</code>还是<code>Map.put()</code></li>
</ol>
<p>如果并行的进行规约，还需要告诉<em>collect()</em> 3. 多个部分结果如何合并成一个。</p>
<p>详情见上面的例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用 Java 7: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算空字符串</span></span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;列表: &quot;</span> +strings);</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> getCountEmptyStringUsingJava7(strings);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;空字符数量为: &quot;</span> + count);</span><br><span class="line">        count = getCountLength3UsingJava7(strings);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;字符串长度为 3 的数量为: &quot;</span> + count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除空字符串</span></span><br><span class="line">        List&lt;String&gt; filtered = deleteEmptyStringsUsingJava7(strings);</span><br><span class="line">        System.out.println(<span class="string">&quot;筛选后的列表: &quot;</span> + filtered);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除空字符串，并使用逗号把它们合并起来</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mergedString</span> <span class="operator">=</span> getMergedStringUsingJava7(strings,<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;合并字符串: &quot;</span> + mergedString);</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取列表元素平方数</span></span><br><span class="line">        List&lt;Integer&gt; squaresList = getSquares(numbers);</span><br><span class="line">        System.out.println(<span class="string">&quot;平方数列表: &quot;</span> + squaresList);</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">17</span>,<span class="number">8</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;列表: &quot;</span> +integers);</span><br><span class="line">        System.out.println(<span class="string">&quot;列表中最大的数 : &quot;</span> + getMax(integers));</span><br><span class="line">        System.out.println(<span class="string">&quot;列表中最小的数 : &quot;</span> + getMin(integers));</span><br><span class="line">        System.out.println(<span class="string">&quot;所有数之和 : &quot;</span> + getSum(integers));</span><br><span class="line">        System.out.println(<span class="string">&quot;平均数 : &quot;</span> + getAverage(integers));</span><br><span class="line">        System.out.println(<span class="string">&quot;随机数: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出10个随机数</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            System.out.println(random.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 Java 8: &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;列表: &quot;</span> +strings);</span><br><span class="line">		<span class="comment">//过滤器！！！！！</span></span><br><span class="line">        count = strings.stream().filter(string-&gt;string.isEmpty()).count();</span><br><span class="line">        System.out.println(<span class="string">&quot;空字符串数量为: &quot;</span> + count);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(string -&gt; string.length() == <span class="number">3</span>).count();</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串长度为 3 的数量为: &quot;</span> + count);</span><br><span class="line">		</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//过滤器后转化为其他类型</span></span><br><span class="line">        filtered = strings.stream().filter(string -&gt;!string.isEmpty()).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;筛选后的列表: &quot;</span> + filtered);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	//用这种方法也已将类集合选择其中两个属性转化为map形式</span></span><br><span class="line"><span class="comment">	Map&lt;String, String&gt; map = tagsList.stream().collect(Collectors.toMap(Tag::getTagName, Tag::getTagColor));</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        mergedString = strings.stream().filter(string -&gt;!string.isEmpty()).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;合并字符串: &quot;</span> + mergedString);</span><br><span class="line"></span><br><span class="line">        squaresList = numbers.stream().map( i -&gt;i*i).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;Squares List: &quot;</span> + squaresList);</span><br><span class="line">        System.out.println(<span class="string">&quot;列表: &quot;</span> +integers);</span><br><span class="line"></span><br><span class="line">        <span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> integers.stream().mapToInt((x) -&gt;x).summaryStatistics();</span><br><span class="line">        List&lt;Integer&gt; reverseIntegers = integers.stream().map(i -&gt; i * i).sorted((x, y) -&gt; y - x).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;数字平方倒序输出：&quot;</span>+reverseIntegers);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;列表中最大的数 : &quot;</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">&quot;列表中最小的数 : &quot;</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">&quot;所有数之和 : &quot;</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">&quot;平均数 : &quot;</span> + stats.getAverage());</span><br><span class="line">        System.out.println(<span class="string">&quot;随机数: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行处理</span></span><br><span class="line">        count = strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">        System.out.println(<span class="string">&quot;空字符串的数量为: &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCountEmptyStringUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string: strings)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(string.isEmpty())&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCountLength3UsingJava7</span><span class="params">(List&lt;String&gt; strings)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string: strings)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(string.length() == <span class="number">3</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">deleteEmptyStringsUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span>&#123;</span><br><span class="line">        List&lt;String&gt; filteredList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string: strings)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!string.isEmpty())&#123;</span><br><span class="line">                filteredList.add(string);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filteredList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getMergedStringUsingJava7</span><span class="params">(List&lt;String&gt; strings, String separator)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String string: strings)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!string.isEmpty())&#123;</span><br><span class="line">                stringBuilder.append(string);</span><br><span class="line">                stringBuilder.append(separator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mergedString</span> <span class="operator">=</span> stringBuilder.toString();</span><br><span class="line">        <span class="keyword">return</span> mergedString.substring(<span class="number">0</span>, mergedString.length()-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">getSquares</span><span class="params">(List&lt;Integer&gt; numbers)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; squaresList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Integer number: numbers)&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">square</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(number.intValue() * number.intValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!squaresList.contains(square))&#123;</span><br><span class="line">                squaresList.add(square);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> squaresList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(List&lt;Integer&gt; numbers)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i &lt; numbers.size();i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(number.intValue() &gt; max)&#123;</span><br><span class="line">                max = number.intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">(List&lt;Integer&gt; numbers)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i &lt; numbers.size();i++)&#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> numbers.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(number.intValue() &lt; min)&#123;</span><br><span class="line">                min = number.intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(List numbers)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">int</span>)(numbers.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i &lt; numbers.size();i++)&#123;</span><br><span class="line">            sum += (<span class="type">int</span>)numbers.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getAverage</span><span class="params">(List&lt;Integer&gt; numbers)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSum(numbers) / numbers.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>React基础</title>
    <url>/blknjyty.github.io/2022/07/25/React/</url>
    <content><![CDATA[<h1 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h1><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>用于构建用户界面的JavaScript库</p>
<p>1.发送请求获取数据</p>
<p>2.处理数据</p>
<p>3.<strong>操作DOM呈现页面(React只关注这个)</strong></p>
</blockquote>
<p>简答的说，就是将数据渲染为html视图的开源JavaScript库。由Facebook开发。</p>
<p>==react开发时在浏览器安装react组件，方便我们查看组件信息。==</p>
<span id="more"></span>

<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>以前操作DOM有以下缺点：</p>
<blockquote>
<p>1.原生的js操作dom繁琐，效率低下，会大量的重绘重排。</p>
<p>2.没有组件化的编码方案，代码复用率低下。</p>
</blockquote>
<p>相反这些是React优点：</p>
<blockquote>
<p>1.采用组件化编码。声明式编码，提高开发效率和组件复用率。</p>
<p>2.React native可以进行使用React语法进行移动端开发。</p>
<p>3.使用虚拟<strong>DOM技术+Diffing算法</strong>，尽量减少与真是DOM的交互。</p>
</blockquote>
<h3 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h3><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/React/gitee\Blog\source_posts\React\1659093092214.png" alt="1659093092214"></p>
 <img src="/blknjyty.github.io/2022/07/25/React/1659093092214.png" class title="都能拿到">

<blockquote>
<p>如果，新增一些人，就会重新遍历，把以前的DOM全部替换掉。</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/React/gitee\Blog\source_posts\React\1659320571185.png" alt="1659320571185"></p>
 <img src="/blknjyty.github.io/2022/07/25/React/1659320571185.png" class title="都能到">

<p><strong>React的做法：</strong></p>
<p>第二次加入数据之后，会先进行虚拟DOM比较，发现前两个一样的，直接用前面生成的DOM加上新增数据的真实DOM展示就可以了。</p>
<p>我们编码时基本只需要操作react的虚拟DOM相关数据, react会转换为真实DOM变化而更新界。</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/React/gitee\Blog\source_posts\React\1659320645957.png" alt="1659320645957"></p>
<img src="/blknjyty.github.io/2022/07/25/React/1659320645957.png" class title="都能表示到">
</blockquote>
<h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><blockquote>
<p>此案例讲解了jsx的基本概念和使用，以及基本React页面的基本结构</p>
<p>参考：react_basic===》01hello_react</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_react<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">	<span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span> &gt;</span><span class="language-javascript"> <span class="comment">/* 此处一定要写babel */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="comment">//1.创建虚拟DOM</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">/* 此处一定不要写引号，因为不是字符串 */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="comment">//2.渲染虚拟DOM到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><ol>
<li><p>全称:  JavaScript XML</p>
</li>
<li><p>react定义的一种类似于XML的JS扩展语法: JS + XML本质是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">React.creatElement(component,props,...children)</span><br></pre></td></tr></table></figure>

<p>的语法糖。(jsx是直接使用原生js这种方式创建虚拟DOM的一种简单方式，如案例2所示)</p>
</li>
<li><p> 作用: 用来简化创建虚拟DOM </p>
</li>
</ol>
<ol>
<li>写法：var ele=<h1>Hello</h1></li>
</ol>
<blockquote>
<p>注意：1) 它不是字符串, 也不是HTML/XML标签</p>
<ol start="2">
<li>它最终产生的就是一个JS对象</li>
</ol>
</blockquote>
<ol start="4">
<li><p>标签名任意: HTML标签或其它标签</p>
</li>
<li><p>标签属性任意: HTML标签属性或其它</p>
</li>
<li><p>语法规则：</p>
<p>1）遇到 &lt;开头的代码, 以标签的语法解析: html同名标签转换为html同名元素, 其它标签需要特别解析</p>
<p>2）遇到以 { 开头的代码，以JS语法解析: 标签中的js表达式必须用{ }包含</p>
</li>
<li><p>babel.js的作用</p>
<p>1）浏览器不能直接解析JSX代码, 需要babel转译为纯JS的代码才能运行</p>
<p>2）只要用了JSX，都要加上type=”text/babel”, 声明需要babel来处理</p>
</li>
</ol>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>1.语法:  ReactDOM.render(virtualDOM,containerDOM)</p>
<p>2.作用: 将虚拟DOM元素渲染到页面中的真实容器DOM中显示</p>
<p>3.参数说明:</p>
<p>​    参数一: 纯js或jsx创建的虚拟dom对象</p>
<p>​    参数二: 用来包含虚拟DOM元素的真实dom元素对象(一般是一个div)</p>
<h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><blockquote>
<p>讲述了两种创建虚拟DOM的两种方式：jsx和js,以此来侧面说明jsx的优点。</p>
<p>本质：jsx最后也会转化为js的形式创建虚拟DOM，只不过对于用户来说书写jsx更加简单。所以就是说jsx是原生js创建虚拟DOM的语法糖。</p>
<p>虚拟DOM：</p>
<p>1.虚拟DOM也就是就是Object类</p>
<p>2.虚拟DOM内部属性较少，相较于真实DOM较轻</p>
<p>3.虚拟DOM最终会被React转化为真实DOM，呈现在页面上。</p>
<p>参考：react_basic===》02创建虚拟DOM的两种方式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span> &gt; <span class="comment">/* 此处一定要写babel */</span></span><br><span class="line">		<span class="comment">//1.创建虚拟DOM</span></span><br><span class="line">		<span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (  <span class="comment">/* 此处一定不要写引号，因为不是字符串 */</span></span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">		<span class="comment">//2.渲染虚拟DOM到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> &gt; </span><br><span class="line">		<span class="comment">//1.创建虚拟DOM</span></span><br><span class="line">		<span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;title&#x27;</span>&#125;,<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="string">&#x27;Hello,React&#x27;</span>))</span><br><span class="line">		<span class="comment">//2.渲染虚拟DOM到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h2><blockquote>
<p>讲述jsx的基本语法规则</p>
<p>参考：react_basic===》03jsx的语法规则</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span> &gt;</span><br><span class="line">		<span class="keyword">const</span> myId = <span class="string">&#x27;aTgUiGu&#x27;</span></span><br><span class="line">		<span class="keyword">const</span> myData = <span class="string">&#x27;HeLlo,rEaCt&#x27;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//1.创建虚拟DOM</span></span><br><span class="line">		<span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#123;myId.toLowerCase()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">white</span>&#x27;,<span class="attr">fontSize:</span>&#x27;<span class="attr">29px</span>&#x27;&#125;&#125;&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#123;myId.toUpperCase()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">white</span>&#x27;,<span class="attr">fontSize:</span>&#x27;<span class="attr">29px</span>&#x27;&#125;&#125;&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">		<span class="comment">//2.渲染虚拟DOM到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">				jsx语法规则：</span></span><br><span class="line"><span class="comment">						1.定义虚拟DOM时，不要写引号。</span></span><br><span class="line"><span class="comment">						2.标签中混入JS表达式时要用&#123;&#125;。</span></span><br><span class="line"><span class="comment">						3.样式的类名指定不要用class，要用className。</span></span><br><span class="line"><span class="comment">						4.内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写。</span></span><br><span class="line"><span class="comment">						5.只有一个根标签,所以最外层始终得包裹一个标签。比如&lt;div&gt;</span></span><br><span class="line"><span class="comment">						6.标签必须闭合</span></span><br><span class="line"><span class="comment">						7.标签首字母</span></span><br><span class="line"><span class="comment">								(1).若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。</span></span><br><span class="line"><span class="comment">								(2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h2><blockquote>
<p> 动态展示列表的jsx联系</p>
<p>参考：react_basic===》03jsx的小练习</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span> &gt;</span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">			一定注意区分：【js语句(代码)】与【js表达式】</span></span><br><span class="line"><span class="comment">					1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方</span></span><br><span class="line"><span class="comment">								下面这些都是表达式：</span></span><br><span class="line"><span class="comment">										(1). a</span></span><br><span class="line"><span class="comment">										(2). a+b</span></span><br><span class="line"><span class="comment">										(3). demo(1)</span></span><br><span class="line"><span class="comment">										(4). arr.map() </span></span><br><span class="line"><span class="comment">										(5). function test () &#123;&#125;</span></span><br><span class="line"><span class="comment">					2.语句(代码)：</span></span><br><span class="line"><span class="comment">								下面这些都是语句(代码)：</span></span><br><span class="line"><span class="comment">										(1).if()&#123;&#125;</span></span><br><span class="line"><span class="comment">										(2).for()&#123;&#125;</span></span><br><span class="line"><span class="comment">										(3).switch()&#123;case:xxxx&#125;</span></span><br><span class="line"><span class="comment">			&#123;&#125;标签中放入js表达式可以，不可以放入语句。</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">		<span class="comment">//模拟一些数据</span></span><br><span class="line">		<span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>,<span class="string">&#x27;React&#x27;</span>,<span class="string">&#x27;Vue&#x27;</span>]</span><br><span class="line">		<span class="comment">//1.创建虚拟DOM</span></span><br><span class="line">		<span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					&#123;</span></span><br><span class="line"><span class="language-xml">						data.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">							return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						&#125;)</span></span><br><span class="line"><span class="language-xml">					&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">		<span class="comment">//2.渲染虚拟DOM到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="模块和组件"><a href="#模块和组件" class="headerlink" title="模块和组件"></a>模块和组件</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><blockquote>
<p><strong>理解</strong>：向外提供特定功能的js程序, 一般就是一个js文件</p>
<p><strong>为什么要拆成模块：</strong>随着业务逻辑增加，代码越来越多且复杂。</p>
<p><strong>作用</strong>：复用js, 简化js的编写, 提高js运行效率</p>
</blockquote>
<p><strong>模块化：</strong></p>
<blockquote>
<p>当应用的js都以模块来编写的, 这个应用就是一个模块化的应用</p>
</blockquote>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><blockquote>
<p><strong>理解：</strong>用来实现局部功能效果的代码和资源的集合(html/css/js/image等等)</p>
<p><strong>为什么要用组件</strong>： 一个界面的功能更复杂</p>
<p><strong>作用：</strong>复用编码, 简化项目编码, 提高运行效率</p>
</blockquote>
<p><strong>组件化：</strong></p>
<blockquote>
<p>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</p>
</blockquote>
<h1 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h1><blockquote>
<p><strong>注意：</strong></p>
<p>   1.组件名必须首字母大写</p>
<ol start="2">
<li>虚拟DOM元素只能有一个根元素</li>
<li>虚拟DOM元素必须有结束标签</li>
</ol>
<p><strong>渲染类组件的流程：</strong></p>
<ol>
<li>React内部会创建组件实例对象</li>
<li>调用render()得到虚拟DOM, 并解析为真实DOM</li>
<li>插入到指定的页面元素内部</li>
</ol>
</blockquote>
<h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//1.创建函数式组件</span></span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//此处的this是undefined，因为babel编译后开启了严格模式</span></span><br><span class="line">			<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">			执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span></span><br><span class="line"><span class="comment">					1.React解析组件标签，找到了MyComponent组件。</span></span><br><span class="line"><span class="comment">					2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//1.创建类式组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="comment">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span></span><br><span class="line">				<span class="comment">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span></span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render中的this:&#x27;</span>,<span class="variable language_">this</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">			执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span></span><br><span class="line"><span class="comment">					1.React解析组件标签，找到了MyComponent组件。</span></span><br><span class="line"><span class="comment">					2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span></span><br><span class="line"><span class="comment">					3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="组件的三大属性"><a href="#组件的三大属性" class="headerlink" title="组件的三大属性"></a>组件的三大属性</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote>
<p><strong>理解：</strong></p>
<ol>
<li>state是组件对象最重要的属性, 值是对象(可以包含多个key-value的组合)</li>
<li>组件被称为”状态机”, 通过更新组件的state来更新对应的页面显示(重新渲染组件)</li>
</ol>
<p>==其实就是每个组件自己的信息==</p>
</blockquote>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><blockquote>
<ol>
<li><p> 组件中render方法中的this为组件实例对象</p>
</li>
<li><p>组件自定义的方法中this为undefined，如何解决？</p>
<p>a) 强制绑定this: 通过函数对象的bind()</p>
<p>b) 箭头函数</p>
</li>
<li><p>状态数据，不能直接修改或更新</p>
</li>
</ol>
</blockquote>
<p>要注意，changeWeather是面向类实例的。不像java，直接this值找不到this的，不许bind。(下面会有介绍)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//1.创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//构造器调用几次？ ———— 1次</span></span><br><span class="line">			<span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>);</span><br><span class="line">				<span class="variable language_">super</span>(props)</span><br><span class="line">				<span class="comment">//初始化状态</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span><br><span class="line">				<span class="comment">//解决changeWeather中this指向问题</span></span><br><span class="line">                <span class="comment">//后面的changeWeather时类原型中的函数,前面的是实例对象的changeWeather</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">				<span class="comment">//读取状态</span></span><br><span class="line">				<span class="keyword">const</span> &#123;isHot,wind&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//changeWeather调用几次？ ———— 点几次调几次</span></span><br><span class="line">			<span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="comment">//changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用</span></span><br><span class="line">				<span class="comment">//由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span></span><br><span class="line">				<span class="comment">//类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span></span><br><span class="line">				</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;changeWeather&#x27;</span>);</span><br><span class="line">				<span class="comment">//获取原来的isHot值</span></span><br><span class="line">				<span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span><br><span class="line">				<span class="comment">//严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span></span><br><span class="line">                <span class="comment">//只要更新就会重新render</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">				<span class="comment">//严重注意：状态(state)不可直接更改，下面这行就是直接更改！！！</span></span><br><span class="line">				<span class="comment">//this.state.isHot = !isHot //这是错误的写法</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">				</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>==为什么类中的方法，不bind找不到this呢==？(重要)</p>
<p>首先要明白，this指向类的实例对象。</p>
<p>下面的例子和访问不到this同理，p1.study()可以访问到类的实例对象，study在栈里直接指向了方法console.log(this)(堆空间)。而const x = p1.study相当于栈中的x也指向了此堆空间，这个x并不是类对象的实例中的，而是另外赋值出来的，其并没有this。所以找不到。</p>
<p>==同理，onClick={this.changeWeather}是再次赋值给onClick，在触发时changeWeather是找不到this的，必须将原型的changeWeather绑定到类实例中    this.changeWeather = this.changeWeather.bind(this)==</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><br><span class="line">			<span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">				<span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">					<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">					<span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="title function_">study</span>(<span class="params"></span>)&#123;</span><br><span class="line">					<span class="comment">//study方法放在了哪里？——类的原型对象上，供实例使用</span></span><br><span class="line">					<span class="comment">//通过Person实例调用study时，study中的this就是Person实例</span></span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">			p1.<span class="title function_">study</span>() <span class="comment">//通过实例调用study方法</span></span><br><span class="line">			<span class="keyword">const</span> x = p1.<span class="property">study</span></span><br><span class="line">			<span class="title function_">x</span>()</span><br><span class="line">		&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//1.创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">//初始化状态</span></span><br><span class="line">			state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">const</span> &#123;isHot,wind&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//自定义方法————要用赋值语句的形式+箭头函数</span></span><br><span class="line">			<span class="comment">//箭头函数没有this，会找外层的this</span></span><br><span class="line">			changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//2.渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))			</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><blockquote>
<p><strong>理解：</strong></p>
<ol>
<li>每个组件对象都会有props(properties的简写)属性</li>
<li>组件标签的所有属性都保存在props中</li>
</ol>
<p>==其实就是数据交互的途径==</p>
<p><strong>作用：</strong></p>
<ol>
<li>通过标签属性从组件外向组件内传递变化的数据</li>
<li> 注意: 组件内部不要修改props数据</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="comment">// console.log(this);</span></span><br><span class="line">				<span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">				<span class="keyword">return</span> (</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span> <span class="attr">age</span>=<span class="string">&#123;19&#125;</span>  <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//当数据特别多或者从服务器获得json格式数据的时候</span></span><br><span class="line">		<span class="keyword">const</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;</span><br><span class="line">		<span class="comment">// console.log(&#x27;@&#x27;,...p);</span></span><br><span class="line">		<span class="comment">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125;/&gt;,document.getElementById(&#x27;test3&#x27;))</span></span><br><span class="line">        <span class="comment">//babel+react 可以允许在标签值传递的时候展开对象</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test3&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="标签属性限制"><a href="#标签属性限制" class="headerlink" title="标签属性限制"></a>标签属性限制</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="comment">//创建组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">// console.log(props);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="variable language_">super</span>(props)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>,<span class="variable language_">this</span>.<span class="property">props</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="comment">//对标签属性进行类型、必要性的限制</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="keyword">static</span> propTypes = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="comment">//指定默认标签属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="keyword">static</span> defaultProps = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">// console.log(this);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//props是只读的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="comment">//this.props.name = &#x27;jack&#x27; //此行代码会报错，因为props是只读的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="keyword">return</span> (</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">					<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="comment">//渲染组件到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="函数式组件只能使用三大属性的props"><a href="#函数式组件只能使用三大属性的props" class="headerlink" title="函数式组件只能使用三大属性的props"></a>函数式组件只能使用三大属性的props</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">function</span> <span class="title function_">Person</span> (props)&#123;</span><br><span class="line">			<span class="keyword">const</span> &#123;name,age,sex&#125; = props</span><br><span class="line">			<span class="keyword">return</span> (</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">			<span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span><br><span class="line">			<span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span><br><span class="line">			<span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//指定默认标签属性值</span></span><br><span class="line">		<span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">			<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span><br><span class="line">			<span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><blockquote>
<p>组件内的标签可以定义ref属性来标识自己</p>
<p>==相当于id，标志一下==</p>
</blockquote>
<h4 id="字符串ref案例"><a href="#字符串ref案例" class="headerlink" title="字符串ref案例"></a>字符串ref案例</h4><ol>
<li><p>点击按钮, 提示第一个输入框中的值</p>
</li>
<li><p>当第2个输入框失去焦点时, 提示这个输入框中的值</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">//展示左侧输入框的数据</span></span><br><span class="line">			showData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span><br><span class="line">				<span class="title function_">alert</span>(input1.<span class="property">value</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//展示右侧输入框的数据</span></span><br><span class="line">			showData2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span><br><span class="line">				<span class="title function_">alert</span>(input2.<span class="property">value</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    ////回调函数：自己创建的，自己没调用，别人调用了。()为收到的参数，这里的参数就是<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span>这个标签节点</span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>==上述是字符串形式的ref，用多了会降低效率==</p>
<h4 id="内敛ref案列"><a href="#内敛ref案列" class="headerlink" title="内敛ref案列"></a>内敛ref案列</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">	<span class="comment">//创建组件</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">		<span class="comment">//展示左侧输入框的数据</span></span><br><span class="line">		showData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span></span><br><span class="line">			<span class="title function_">alert</span>(input1.<span class="property">value</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//展示右侧输入框的数据</span></span><br><span class="line">		showData2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span></span><br><span class="line">			<span class="title function_">alert</span>(input2.<span class="property">value</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="keyword">return</span>(</span><br><span class="line">				<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					//回调函数：自己创建的，自己没调用，别人调用了。()为收到的参数，这里的参数就是<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span>这个标签节点</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input1 = c &#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input2 = c &#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">			)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//渲染组件到页面</span></span><br><span class="line">	<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="createRef案例"><a href="#createRef案例" class="headerlink" title="createRef案例"></a>createRef案例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">/* </span></span><br><span class="line"><span class="comment">				React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">			myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">			<span class="comment">//展示左侧输入框的数据</span></span><br><span class="line">			showData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//展示右侧输入框的数据</span></span><br><span class="line">			showData2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><blockquote>
<ol>
<li><p>通过onXxx属性指定事件处理函数(注意大小写)</p>
<ol>
<li><p>React使用的是自定义(合成)事件, 而不是使用的原生DOM事件</p>
</li>
<li><p>React中的事件是通过事件委托方式处理的(委托给组件最外层的元素)</p>
</li>
</ol>
</li>
<li><p>通过event.target得到发生事件的DOM元素对象</p>
</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">/* </span></span><br><span class="line"><span class="comment">				(1).通过onXxx属性指定事件处理函数(注意大小写)</span></span><br><span class="line"><span class="comment">						a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件 —————— 为了更好的兼容性</span></span><br><span class="line"><span class="comment">						b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ————————为了的高效</span></span><br><span class="line"><span class="comment">				(2).通过event.target得到发生事件的DOM元素对象 ——————————不要过度使用ref</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="comment">//创建ref容器</span></span><br><span class="line">			myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">			myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line"></span><br><span class="line">			<span class="comment">//展示左侧输入框的数据</span></span><br><span class="line">			showData = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);</span><br><span class="line">				<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//展示右侧输入框的数据-发生事件的元素正好是要操作的元素可以不用ref</span></span><br><span class="line">			showData2 = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">				<span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件到页面</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>表单中组件的分类</p>
<h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="comment">//非受控组件：表单中输入类Dom值，现用现取(const &#123;username,password&#125; = this)，都是非受控组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">				event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span><br><span class="line">				<span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span></span><br><span class="line">				<span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username.value&#125;</span>,你输入的密码是：<span class="subst">$&#123;password.value&#125;</span>`</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">						密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="comment">//受控组件：页面中输入类的DOM，全部输入到state里面</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//初始化状态</span></span><br><span class="line">			state = &#123;</span><br><span class="line">				<span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line">				<span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//保存用户名到状态中</span></span><br><span class="line">			saveUsername = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">username</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//保存密码到状态中</span></span><br><span class="line">			savePassword = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">password</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//表单提交的回调</span></span><br><span class="line">			handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">				event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span><br><span class="line">				<span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">						密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="函数颗粒化"><a href="#函数颗粒化" class="headerlink" title="函数颗粒化"></a>函数颗粒化</h2><p>将受控组件例子中的savePassword和saveUsername合并为一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//#region </span></span><br><span class="line">				<span class="comment">/* </span></span><br><span class="line"><span class="comment">					高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</span></span><br><span class="line"><span class="comment">									1.若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</span></span><br><span class="line"><span class="comment">									2.若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</span></span><br><span class="line"><span class="comment">									常见的高阶函数有：Promise、setTimeout、arr.map()等等</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">					函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 </span></span><br><span class="line"><span class="comment">						function sum(a)&#123;</span></span><br><span class="line"><span class="comment">							return(b)=&gt;&#123;</span></span><br><span class="line"><span class="comment">								return (c)=&gt;&#123;</span></span><br><span class="line"><span class="comment">									return a+b+c</span></span><br><span class="line"><span class="comment">								&#125;</span></span><br><span class="line"><span class="comment">							&#125;</span></span><br><span class="line"><span class="comment">						&#125;</span></span><br><span class="line"><span class="comment">					*/</span></span><br><span class="line">		<span class="comment">//#endregion</span></span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">//初始化状态</span></span><br><span class="line">			state = &#123;</span><br><span class="line">				<span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line">				<span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//保存表单数据到状态中</span></span><br><span class="line">			<span class="comment">//返回了一个函数，这个函数才是onChange的回调</span></span><br><span class="line">			saveFormData = <span class="function">(<span class="params">dataType</span>)=&gt;</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">					<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//表单提交的回调</span></span><br><span class="line">			handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">				event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span><br><span class="line">				<span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//this.saveFormData是将改函数作为onChange的回调，</span></span><br><span class="line">			<span class="comment">//this.saveFormData(&#x27;username&#x27;)是将改函数的返回值作为回调，所以其必须有返回值，且返回值必须是函数。</span></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">						密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>不用高阶函数也是可以实现上述功能</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">//初始化状态</span></span><br><span class="line">			state = &#123;</span><br><span class="line">				<span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line">				<span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//保存表单数据到状态中</span></span><br><span class="line">			saveFormData = <span class="function">(<span class="params">dataType,event</span>)=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//表单提交的回调</span></span><br><span class="line">			handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">				event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span><br><span class="line">				<span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//onChange需要一个函数，直接用箭头函数传入，event就是发生onChange事件，event.target得到发生事件的DOM元素对象</span></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;,event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">						密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;,event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><blockquote>
<p> <strong>1.</strong> <strong>让指定的文本做显示</strong> <strong>/</strong> <strong>隐藏的渐变动画</strong></p>
<p> <strong>2.</strong> <strong>从完全可见，到彻底消失，耗时</strong>2S</p>
<p> <strong>3.</strong> <strong>点击“不活了”按钮从界面中卸载组件</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="comment">//生命周期回调函数 &lt;=&gt; 生命周期钩子函数 &lt;=&gt; 生命周期函数 &lt;=&gt; 生命周期钩子</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">			state = &#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">			death = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="comment">//卸载组件</span></span><br><span class="line">				<span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//组件挂完毕</span></span><br><span class="line">			<span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;componentDidMount&#x27;</span>);</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="comment">//获取原状态</span></span><br><span class="line">					<span class="keyword">let</span> &#123;opacity&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">					<span class="comment">//减小0.1</span></span><br><span class="line">					opacity -= <span class="number">0.1</span></span><br><span class="line">					<span class="keyword">if</span>(opacity &lt;= <span class="number">0</span>) opacity = <span class="number">1</span></span><br><span class="line">					<span class="comment">//设置新的透明度</span></span><br><span class="line">					<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;opacity&#125;)</span><br><span class="line">				&#125;, <span class="number">200</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//组件将要卸载</span></span><br><span class="line">			<span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="comment">//清除定时器</span></span><br><span class="line">				<span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//初始化渲染、状态更新之后</span></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:this.state.opacity&#125;&#125;</span>&gt;</span>React学不会怎么办？<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>不活了<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Life</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="生命周期的理解"><a href="#生命周期的理解" class="headerlink" title="生命周期的理解"></a>生命周期的理解</h3><blockquote>
<ol>
<li><p>组件从创建到死亡它会经历一些特定的阶段。</p>
</li>
<li><p>React组件中包含一系列勾子函数(生命周期回调函数), 会在特定的时刻调用。</p>
</li>
<li><p>我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作。</p>
</li>
</ol>
</blockquote>
<h3 id="旧的生命周期"><a href="#旧的生命周期" class="headerlink" title="旧的生命周期"></a>旧的生命周期</h3><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/React/gitee\Blog\source_posts\React\图片1.png" alt="图片1"></p>
<img src="/blknjyty.github.io/2022/07/25/React/%E5%9B%BE%E7%89%871.png" class title="是南的宁市">

<blockquote>
<p><strong>初始化阶段</strong>:由ReactDOM.render()触发—初次渲染</p>
<ol>
<li><p>constructor()</p>
</li>
<li><p>componentWillMount()</p>
</li>
<li><p>render()</p>
</li>
<li><p>componentDidMount()—-常用，一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</p>
</li>
</ol>
<p> <strong>更新阶段</strong>：由组件内部this.setSate()或父组件重新render触发</p>
<ol>
<li><p>shouldComponentUpdate()—默认返回true，除非自定义了返回逻辑。</p>
</li>
<li><p>componentWillUpdate()</p>
</li>
<li><p>render()</p>
</li>
<li><p>componentDidUpdate()</p>
</li>
</ol>
<p><strong>卸载</strong>：unmountComponentAtNode()触发</p>
<ol>
<li>componentWillUnmount()—–常用，做一些收尾的事情，例如：关闭定时器、取消订阅消息</li>
</ol>
<p><strong>强制更新</strong>：foreUpdate()</p>
<ol>
<li>componentWillUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ol>
<p><strong>父组件render，子组件接收后</strong></p>
<ol>
<li>componentWillReceiveProps</li>
<li>shouldComponentUpdate()—默认返回true，除非自定义了返回逻辑。</li>
<li>componentWillUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">/* </span></span><br><span class="line"><span class="comment">				1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span></span><br><span class="line"><span class="comment">									1.	constructor()</span></span><br><span class="line"><span class="comment">									2.	componentWillMount()</span></span><br><span class="line"><span class="comment">									3.	render()</span></span><br><span class="line"><span class="comment">									4.	componentDidMount() =====&gt; 常用</span></span><br><span class="line"><span class="comment">													一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span></span><br><span class="line"><span class="comment">				2. 更新阶段: 由组件内部this.setSate()或父组件render触发</span></span><br><span class="line"><span class="comment">									1.	shouldComponentUpdate()</span></span><br><span class="line"><span class="comment">									2.	componentWillUpdate()</span></span><br><span class="line"><span class="comment">									3.	render() =====&gt; 必须使用的一个</span></span><br><span class="line"><span class="comment">									4.	componentDidUpdate()</span></span><br><span class="line"><span class="comment">				3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span></span><br><span class="line"><span class="comment">									1.	componentWillUnmount()  =====&gt; 常用</span></span><br><span class="line"><span class="comment">													一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">//构造器</span></span><br><span class="line">			<span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---constructor&#x27;</span>);</span><br><span class="line">				<span class="variable language_">super</span>(props)</span><br><span class="line">				<span class="comment">//初始化状态</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//加1按钮的回调</span></span><br><span class="line">			add = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="comment">//获取原状态</span></span><br><span class="line">				<span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="comment">//更新状态</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//卸载组件按钮的回调</span></span><br><span class="line">			death = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//强制更新按钮的回调</span></span><br><span class="line">			force = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//组件将要挂载的钩子</span></span><br><span class="line">			<span class="title function_">componentWillMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillMount&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//组件挂载完毕的钩子</span></span><br><span class="line">			<span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidMount&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//组件将要卸载的钩子</span></span><br><span class="line">			<span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillUnmount&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//控制组件更新的“阀门”</span></span><br><span class="line">			<span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---shouldComponentUpdate&#x27;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//组件将要更新的钩子</span></span><br><span class="line">			<span class="title function_">componentWillUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillUpdate&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//组件更新完毕的钩子</span></span><br><span class="line">			<span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidUpdate&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---render&#x27;</span>);</span><br><span class="line">				<span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>不更改任何状态中的数据，强制更新一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//父组件A</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">//初始化状态</span></span><br><span class="line">			state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">			changeCar = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">carName</span>:<span class="string">&#x27;奥拓&#x27;</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>换车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;this.state.carName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//子组件B</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">//组件将要接收新的props的钩子--第一次传递的props不算</span></span><br><span class="line">			<span class="title function_">componentWillReceiveProps</span>(<span class="params">props</span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---componentWillReceiveProps&#x27;</span>,props);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//控制组件更新的“阀门”</span></span><br><span class="line">			<span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---shouldComponentUpdate&#x27;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//组件将要更新的钩子</span></span><br><span class="line">			<span class="title function_">componentWillUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---componentWillUpdate&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//组件更新完毕的钩子</span></span><br><span class="line">			<span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---componentDidUpdate&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---render&#x27;</span>);</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是B组件，接收到的车是:&#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//渲染组件</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Count</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="新的生命周期"><a href="#新的生命周期" class="headerlink" title="新的生命周期"></a>新的生命周期</h3><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/React/gitee\Blog\source_posts\React\图片2.png" alt="图片2"></p>
<img src="/blknjyty.github.io/2022/07/25/React/%E5%9B%BE%E7%89%872.png" class title="是南宁存储市">

<blockquote>
<p>新的生命周期废弃了三个：componentWillUnmount、componentWillUpdate和componentWillReceiveProps</p>
<p>新增了两个：getDerivedStateFromProps和getSnapshotBeforeUpdate</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="comment">//创建组件</span></span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">			<span class="comment">/* </span></span><br><span class="line"><span class="comment">				1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span></span><br><span class="line"><span class="comment">								1.	constructor()</span></span><br><span class="line"><span class="comment">								2.	getDerivedStateFromProps </span></span><br><span class="line"><span class="comment">								3.	render()</span></span><br><span class="line"><span class="comment">								4.	componentDidMount() =====&gt; 常用</span></span><br><span class="line"><span class="comment">											一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span></span><br><span class="line"><span class="comment">				2. 更新阶段: 由组件内部this.setSate()或父组件重新render触发</span></span><br><span class="line"><span class="comment">								1.	getDerivedStateFromProps</span></span><br><span class="line"><span class="comment">								2.	shouldComponentUpdate()</span></span><br><span class="line"><span class="comment">								3.	render()</span></span><br><span class="line"><span class="comment">								4.	getSnapshotBeforeUpdate</span></span><br><span class="line"><span class="comment">								5.	componentDidUpdate()</span></span><br><span class="line"><span class="comment">				3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span></span><br><span class="line"><span class="comment">								1.	componentWillUnmount()  =====&gt; 常用</span></span><br><span class="line"><span class="comment">											一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			<span class="comment">//构造器</span></span><br><span class="line">			<span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---constructor&#x27;</span>);</span><br><span class="line">				<span class="variable language_">super</span>(props)</span><br><span class="line">				<span class="comment">//初始化状态</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//加1按钮的回调</span></span><br><span class="line">			add = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="comment">//获取原状态</span></span><br><span class="line">				<span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="comment">//更新状态</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//卸载组件按钮的回调</span></span><br><span class="line">			death = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//强制更新按钮的回调</span></span><br><span class="line">			force = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</span></span><br><span class="line">			<span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props,state</span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//在更新之前获取快照</span></span><br><span class="line">			<span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getSnapshotBeforeUpdate&#x27;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//组件挂载完毕的钩子</span></span><br><span class="line">			<span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidMount&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//组件将要卸载的钩子</span></span><br><span class="line">			<span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillUnmount&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//控制组件更新的“阀门”</span></span><br><span class="line">			<span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---shouldComponentUpdate&#x27;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//组件更新完毕的钩子</span></span><br><span class="line">			<span class="title function_">componentDidUpdate</span>(<span class="params">preProps,preState,snapshotValue</span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidUpdate&#x27;</span>,preProps,preState,snapshotValue);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---render&#x27;</span>);</span><br><span class="line">				<span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>不更改任何状态中的数据，强制更新一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//渲染组件</span></span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Count</span> <span class="attr">count</span>=<span class="string">&#123;19&#125;/</span>&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="getSnapshotBeforeUpdate案例"><a href="#getSnapshotBeforeUpdate案例" class="headerlink" title="getSnapshotBeforeUpdate案例"></a>getSnapshotBeforeUpdate案例</h4><p>内容区新闻不断刷新，但是我所观看的新闻不要一直刷动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">		<span class="keyword">class</span> <span class="title class_">NewsList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">			state = &#123;<span class="attr">newsArr</span>:[]&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="comment">//获取原状态</span></span><br><span class="line">					<span class="keyword">const</span> &#123;newsArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">					<span class="comment">//模拟一条新闻</span></span><br><span class="line">					<span class="keyword">const</span> news = <span class="string">&#x27;新闻&#x27;</span>+ (newsArr.<span class="property">length</span>+<span class="number">1</span>)</span><br><span class="line">					<span class="comment">//更新状态</span></span><br><span class="line">					<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">newsArr</span>:[news,...newsArr]&#125;)</span><br><span class="line">				&#125;, <span class="number">1000</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="comment">//增加新闻之前新闻区的的高度</span></span><br><span class="line">				<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollHeight</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">componentDidUpdate</span>(<span class="params">preProps,preState,height</span>)&#123;</span><br><span class="line">				<span class="comment">//增加之后的新闻区往上窜多少 =现在的新闻区高度-之前的高度(但是新闻是不断增加的，所以窜的高度是不断增加的)</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollTop</span> += <span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">list</span>.<span class="property">scrollHeight</span> - height</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">return</span>(</span><br><span class="line">					<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						&#123;</span></span><br><span class="line"><span class="language-xml">							this.state.newsArr.map((n,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">								return <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">className</span>=<span class="string">&quot;news&quot;</span>&gt;</span>&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							&#125;)</span></span><br><span class="line"><span class="language-xml">						&#125;</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">				)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">NewsList</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">	&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Diffing算法"><a href="#Diffing算法" class="headerlink" title="Diffing算法"></a>Diffing算法</h1><h2 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题:"></a>经典面试题:</h2><p>​      1). react/vue中的key有什么作用？（key的内部原理是什么？）<br>​      2). 为什么遍历列表时，key最好不要用index?</p>
<blockquote>
<pre><code>        1. 虚拟DOM中key的作用：
                1). 简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。

                2). 详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】, 
                                            随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：
    
                                a. 旧虚拟DOM中找到了与新虚拟DOM相同的key：
                                            (1).若虚拟DOM中内容没变, 直接使用之前的真实DOM
                                            (2).若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM
                                                （key一样，内容不一样，若里面还有元素，则会进去再去对比，如果一样，则复用。比如input框）
    
                                b. 旧虚拟DOM中未找到与新虚拟DOM相同的key
                                            根据数据创建新的真实DOM，随后渲染到到页面
                                
        2. 用index作为key可能会引发的问题：
                            1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:
                                            会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。
    
                            2. 如果结构中还包含输入类的DOM：
                                            会产生错误DOM更新 ==&gt; 界面有问题。
                                            
                            3. 注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，
                                仅用于渲染列表用于展示，使用index作为key是没有问题的。
                
        3. 开发中如何选择key?:
                            1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。
                            2.如果确定只是简单的展示数据，用index也是可以的。


    慢动作回放----使用index索引值作为key
    
        初始数据：
                &#123;id:1,name:&#39;小张&#39;,age:18&#125;,
                &#123;id:2,name:&#39;小李&#39;,age:19&#125;,
        初始的虚拟DOM：
                &lt;li key=0&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
                &lt;li key=1&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
    
        更新后的数据：
                &#123;id:3,name:&#39;小王&#39;,age:20&#125;,
                &#123;id:1,name:&#39;小张&#39;,age:18&#125;,
                &#123;id:2,name:&#39;小李&#39;,age:19&#125;,
        更新数据后的虚拟DOM：
                &lt;li key=0&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
                &lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
                &lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;

-----------------------------------------------------------------

慢动作回放----使用id唯一标识作为key

        初始数据：
                &#123;id:1,name:&#39;小张&#39;,age:18&#125;,
                &#123;id:2,name:&#39;小李&#39;,age:19&#125;,
        初始的虚拟DOM：
                &lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
                &lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
    
        更新后的数据：
                &#123;id:3,name:&#39;小王&#39;,age:20&#125;,
                &#123;id:1,name:&#39;小张&#39;,age:18&#125;,
                &#123;id:2,name:&#39;小李&#39;,age:19&#125;,
        更新数据后的虚拟DOM：
                &lt;li key=3&gt;小王---20&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
                &lt;li key=1&gt;小张---18&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
                &lt;li key=2&gt;小李---19&lt;input type=&quot;text&quot;/&gt;&lt;/li&gt;
</code></pre>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">		state = &#123;</span><br><span class="line">			<span class="attr">persons</span>:[</span><br><span class="line">				&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;小张&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">				&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;小李&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		add = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">const</span> &#123;persons&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">			<span class="keyword">const</span> p = &#123;<span class="attr">id</span>:persons.<span class="property">length</span>+<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;小王&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">persons</span>:[p,...persons]&#125;)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> (</span><br><span class="line">				<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">h2</span>&gt;</span>展示人员信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用index（索引值）作为key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						&#123;</span></span><br><span class="line"><span class="language-xml">							this.state.persons.map((personObj,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">								return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							&#125;)</span></span><br><span class="line"><span class="language-xml">						&#125;</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用id（数据的唯一标识）作为key<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						&#123;</span></span><br><span class="line"><span class="language-xml">							this.state.persons.map((personObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">								return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							&#125;)</span></span><br><span class="line"><span class="language-xml">						&#125;</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">			)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React脚手架下编码</title>
    <url>/blknjyty.github.io/2022/07/25/React%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%8B%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h1><span id="more"></span>

<blockquote>
<p>前言，拿到项目直接npm install 会报错</p>
<p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/React%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%8B%E7%BC%96%E7%A0%81/gitee\Blog\source_posts\React脚手架下编码\1659670327052.png" alt="1659670327052"></p>
<img src="/blknjyty.github.io/2022/07/25/React%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%8B%E7%BC%96%E7%A0%81/1659670327052.png" class title="是市">
</blockquote>
<p>这是因为之前有缓存，直接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm cache clear --force</span><br></pre></td></tr></table></figure>

<p>强制清除缓存在进行install</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<ol>
<li><p>xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目</p>
<ul>
<li><p>包含了所有需要的配置（语法检查、jsx编译、devServer…）</p>
</li>
<li><p> 下载好了所有相关的依赖</p>
</li>
<li><p>可以直接运行一个简单效果</p>
</li>
</ul>
</li>
<li><p>react提供了一个用于创建react项目的脚手架库: create-react-app</p>
</li>
<li><p>项目的整体技术架构为:  react + webpack + es6 + eslint</p>
</li>
<li><p>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</p>
</li>
</ol>
</blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><blockquote>
<p><strong>第一步</strong>，全局安装：npm i -g create-react-app</p>
<p><strong>第二步</strong>，切换到想创项目的目录，使用命令：create-react-app hello-react</p>
<p><strong>第三步</strong>，进入项目文件夹：cd hello-react</p>
<p><strong>第四步</strong>，启动项目：npm start</p>
</blockquote>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><blockquote>
<p>public —- 静态资源文件夹</p>
<p>​        favicon.icon —— 网站页签图标</p>
<p>​        <strong>index.html</strong> **——-**主页面</p>
<p>​        logo192.png ——- logo图</p>
<p>​        logo512.png ——- logo图</p>
<p>​        manifest.json —– 应用加壳的配置文件</p>
<p>​        robots.txt ——– 爬虫协议文件</p>
<p>src —- 源码文件夹</p>
<p>​        App.css ——– App组件的样式</p>
<p>​        <strong>App.js</strong>——–App组件</p>
<p>​        App.test.js —- 用于给App做测试</p>
<p>​        index.css —— 样式</p>
<p>​        <strong>index.js</strong> ——入口文件</p>
<p>​        logo.svg ——- logo图</p>
<p>​        reportWebVitals.js</p>
<p>​            — 页面性能分析文件(需要web-vitals库的支持)</p>
<p>​        setupTests.js</p>
<p>​            —- 组件单元测试的文件(需要jest-dom库的支持)</p>
</blockquote>
<h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><blockquote>
<ol>
<li><p>拆分组件: 拆分界面,抽取组件</p>
</li>
<li><p>实现静态组件: 使用组件实现静态页面效果</p>
</li>
<li><p>实现动态组件</p>
<p>3.1动态显示初始化数据</p>
<p>​    3.1.1 数据类型</p>
<p>​    3.1.2 数据名称</p>
<p>​    3.1.2 保存在哪个组件?</p>
<p>3.2 交互(从绑定事件监听开始)</p>
</li>
</ol>
</blockquote>
<h2 id="todo列表案例"><a href="#todo列表案例" class="headerlink" title="todo列表案例"></a>todo列表案例</h2><p>此案例不涉及css的编写，直接使用教程提供的css样式</p>
<h3 id="划分界面、加入静态效果"><a href="#划分界面、加入静态效果" class="headerlink" title="划分界面、加入静态效果"></a>划分界面、加入静态效果</h3><blockquote>
<p> 界面分为header，list，item和footer四部分。</p>
<p>其中head是头部的输入框，item是每一个代办事项，list是item的集合展示，foot是最下面的全选、删除所选等功能。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    state=&#123;<span class="attr">todos</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;吃饭&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;睡觉&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;打代码&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;逛街&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-warp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">Footer</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的任务名称，按回车键确定&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	&#123;</span></span><br><span class="line"><span class="language-xml">            		todos.map(todo=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">            				return <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> &#123;<span class="attr">...todo</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            			&#125;			</span></span><br><span class="line"><span class="language-xml">        			)</span></span><br><span class="line"><span class="language-xml">            	&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )    </span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Item</span> <span class="keyword">extends</span> <span class="title class_">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id,name,done&#125;=<span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;done&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">span</span>&gt;</span>name<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    			<span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">buttton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Footer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/ <span class="attr">checked</span>=<span class="string">true</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">span</span>&gt;</span>已完成&#123;xxx&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>/全部&#123;xxx&#125;</span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>清楚已完成任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现动态效果"><a href="#实现动态效果" class="headerlink" title="实现动态效果"></a>实现动态效果</h3><h4 id="item的选中变色、删除功能、勾选改变状态"><a href="#item的选中变色、删除功能、勾选改变状态" class="headerlink" title="item的选中变色、删除功能、勾选改变状态"></a>item的选中变色、删除功能、勾选改变状态</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Item</span> <span class="keyword">extends</span> <span class="title class_">Component</span>&#123;</span><br><span class="line">    state=&#123;<span class="attr">mouse</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    <span class="comment">//添加鼠标移出、移出的item框效果</span></span><br><span class="line">    handleMouse=<span class="function">(<span class="params">flag</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">mouse</span>:flag&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//TODO的内容在父组件APP里面，子孙组件删除父组件的内容，可以使用父组件传递给子组件的函数(APP-list-item)</span></span><br><span class="line">    handleDelete=<span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;确定删除吗？&#x27;</span>))&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">deleteTodo</span>(id)</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//勾选或者取消勾选的时候，done值跟随改变</span></span><br><span class="line">    handleCheck=<span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">updateTodo</span>(id,event.<span class="property">target</span>.<span class="property">checked</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id,name,done&#125;=<span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:mouse?</span>&#x27;#<span class="attr">ddd</span>&#x27;<span class="attr">:</span>&#x27;<span class="attr">white</span>&#x27;&#125;&#125; <span class="attr">onMouseEnter</span>=<span class="string">&#123;this.handleMouse(true)&#125;</span> <span class="attr">onMouseLeave</span>=<span class="string">&#123;this.handleMouse(false)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;done&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleCheck(id)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">span</span>&gt;</span>name<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.handleDelete(id)&#125; className=&quot;btn btn-danger&quot; display:mouse?&#x27;block&#x27;:&#x27;none&#x27;&gt;删除<span class="tag">&lt;/<span class="name">buttton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    state=&#123;<span class="attr">todos</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;吃饭&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;睡觉&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;打代码&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;逛街&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    	]</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//删除具体某个item</span></span><br><span class="line">	deleteTodo=<span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newTodos = todos.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>)=&gt;</span>&#123;</span><br><span class="line">         	<span class="keyword">return</span> todo.<span class="property">id</span>!==id   </span><br><span class="line">        	&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新一个item的状态</span></span><br><span class="line">    updateTodo=<span class="function">(<span class="params">id,done</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newTodos=todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">            	<span class="keyword">if</span>(todoObj.<span class="property">id</span>===id)<span class="keyword">return</span> &#123;...todoObj,done&#125;</span><br><span class="line">            	<span class="keyword">else</span> <span class="keyword">return</span> todoObj</span><br><span class="line">        	&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-warp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">updateTodo</span>=<span class="string">&#123;this.updateTodo&#125;</span> <span class="attr">deleteTodo</span>=<span class="string">&#123;this.deleteTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">Footer</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos,deleteTodo,updateTodo&#125;=<span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	&#123;</span></span><br><span class="line"><span class="language-xml">            		todos.map(todo=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">            				return <span class="tag">&lt;<span class="name">Item</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> &#123;<span class="attr">...todo</span>&#125; <span class="attr">updateTodo</span>=<span class="string">&#123;updateTodo&#125;</span> <span class="attr">deleteTodo</span>=<span class="string">&#123;deleteTodo&#125;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">            			&#125;			</span></span><br><span class="line"><span class="language-xml">        			)</span></span><br><span class="line"><span class="language-xml">            	&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )    </span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="header中添加任务功能"><a href="#header中添加任务功能" class="headerlink" title="header中添加任务功能"></a>header中添加任务功能</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    handleKeyUp=<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;keyCode,target&#125;=event</span><br><span class="line">        <span class="keyword">if</span>(keyCode!=<span class="number">13</span>)<span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span>(target.<span class="property">value</span>.<span class="title function_">trim</span>(<span class="number">0</span>=)==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        	<span class="title function_">alert</span>(<span class="string">&quot;输入不能为空&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">const</span> todoObj=&#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),<span class="attr">name</span>:target,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">        <span class="comment">//同上，子组件想传递信息给父组件，调用父组件传递给子组件的函数即可</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addTodo</span>(todoObj)</span><br><span class="line">		target.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyUp</span>=<span class="string">&#123;this.handleKeyUp&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的任务名称，按回车键确定&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    state=&#123;<span class="attr">todos</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;吃饭&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;睡觉&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;打代码&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;逛街&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    	]</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//删除具体某个item</span></span><br><span class="line">	deleteTodo=<span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newTodos = todos.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>)=&gt;</span>&#123;</span><br><span class="line">         	<span class="keyword">return</span> todo.<span class="property">id</span>!==id   </span><br><span class="line">        	&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加一个item</span></span><br><span class="line">    addTodo=<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">    	<span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newTodos=[todoObj,...todos]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    	<span class="comment">//updateTodo用于更新一个todo对象</span></span><br><span class="line">	updateTodo = <span class="function">(<span class="params">id,done</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="comment">//获取状态中的todos</span></span><br><span class="line">		<span class="keyword">const</span> &#123;todos&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="comment">//匹配处理数据--id一样则复制一个并替换其中的done属性，如果id不一样则直接返回</span></span><br><span class="line">		<span class="keyword">const</span> newTodos = todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(todoObj.<span class="property">id</span> === id) <span class="keyword">return</span> &#123;...todoObj,done&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">return</span> todoObj</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-warp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">Header</span> <span class="attr">addTodo</span>=<span class="string">&#123;this.addTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">deleteTodo</span>=<span class="string">&#123;this.deleteTodo&#125;</span> <span class="attr">updateTodo</span>=<span class="string">&#123;this.updateTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">Footer</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Footer的显示，全选功能"><a href="#Footer的显示，全选功能" class="headerlink" title="Footer的显示，全选功能"></a>Footer的显示，全选功能</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Footer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="comment">//将父组件的item的done全部变为true或者false</span></span><br><span class="line">    handleCheckAll=<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">checkAllTodo</span>(event.<span class="property">target</span>.<span class="property">checked</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除已完成的任务</span></span><br><span class="line">    handleClearAllDone=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">clearAllDone</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">const</span> doneCount=todos.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,todo</span>)=&gt;</span>pre+(todo.<span class="property">done</span>?<span class="number">1</span>:<span class="number">0</span>),<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">const</span> total=todos.<span class="property">length</span></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/ <span class="attr">onChange</span>=<span class="string">&#123;this.handleCheckALL&#125;</span> <span class="attr">checked</span>=<span class="string">true</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">span</span>&gt;</span>已完成&#123;doneCount&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>/全部&#123;total&#125;</span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClearAllDone&#125;</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span> &gt;</span>清楚已完成任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    state=&#123;<span class="attr">todos</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;吃饭&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;睡觉&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;打代码&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;逛街&#x27;</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    	]</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//删除具体某个item</span></span><br><span class="line">	deleteTodo=<span class="function">(<span class="params">id</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newTodos = todos.<span class="title function_">filter</span>(<span class="function">(<span class="params">todo</span>)=&gt;</span>&#123;</span><br><span class="line">         	<span class="keyword">return</span> todo.<span class="property">id</span>!==id   </span><br><span class="line">        	&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加一个item</span></span><br><span class="line">    addTodo=<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">    	<span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newTodos=[todoObj,...todos]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    	<span class="comment">//updateTodo用于更新一个todo对象</span></span><br><span class="line">	updateTodo = <span class="function">(<span class="params">id,done</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="comment">//获取状态中的todos</span></span><br><span class="line">		<span class="keyword">const</span> &#123;todos&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="comment">//匹配处理数据--id一样则复制一个并替换其中的done属性，如果id不一样则直接返回</span></span><br><span class="line">		<span class="keyword">const</span> newTodos = todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(todoObj.<span class="property">id</span> === id) <span class="keyword">return</span> &#123;...todoObj,done&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">return</span> todoObj</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//全选、全不选</span></span><br><span class="line">    checkAllTodo=<span class="function">(<span class="params">done</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newTodos=todos.<span class="title function_">map</span>(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;...obj,done&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除所有已完成的任务</span></span><br><span class="line">    clearAllDone=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newTodos=todos.<span class="title function_">filter</span>(<span class="function">(<span class="params">todoObj</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !todoObj.<span class="property">done</span></span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">todos</span>:newTodos&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-warp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">Header</span> <span class="attr">addTodo</span>=<span class="string">&#123;this.addTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">deleteTodo</span>=<span class="string">&#123;this.deleteTodo&#125;</span> <span class="attr">updateTodo</span>=<span class="string">&#123;this.updateTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            		<span class="tag">&lt;<span class="name">Footer</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">checkAllTodo</span>=<span class="string">&#123;this.checkAllTodo&#125;</span> <span class="attr">clearAllDone</span>=<span class="string">&#123;this.clearAllDone&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="react-ajax"><a href="#react-ajax" class="headerlink" title="react ajax"></a>react ajax</h1><blockquote>
<ol>
<li><p>React本身只关注于界面, 并不包含发送ajax请求的代码</p>
</li>
<li><p>前端应用需要通过ajax请求与后台进行交互(json数据)</p>
</li>
<li><p>react应用中需要集成第三方ajax库(或自己封装)</p>
</li>
</ol>
</blockquote>
<h2 id="使用axios"><a href="#使用axios" class="headerlink" title="使用axios"></a>使用axios</h2><blockquote>
<ol>
<li><p>jQuery: 比较重, 如果需要另外引入不建议使用</p>
</li>
<li><p>axios: 轻量级, 建议使用</p>
<ol>
<li><p>封装XmlHttpRequest对象的ajax</p>
</li>
<li><p>promise风格</p>
</li>
<li><p>可以用在浏览器端和node服务器端</p>
</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="github搜索实践"><a href="#github搜索实践" class="headerlink" title="github搜索实践"></a>github搜索实践</h2><blockquote>
<p>伪造服务器，资料：05-所需服务器。作为我们发送给github的代理。</p>
<p>案例样例：搜索用户名，返回githubd的样例</p>
<p><strong>数据传递</strong>：父子=》props，兄弟=》使用props，消息由子传递给父再传递给子</p>
</blockquote>
<h3 id="代理设置-setupProxy-js"><a href="#代理设置-setupProxy-js" class="headerlink" title="代理设置(setupProxy.js)"></a>代理设置(setupProxy.js)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">app</span>)&#123;</span><br><span class="line">	app.<span class="title function_">use</span>(</span><br><span class="line">		<span class="title function_">proxy</span>(<span class="string">&#x27;/api1&#x27;</span>,&#123; <span class="comment">//遇见/api1前缀的请求，就会触发该代理配置</span></span><br><span class="line">			<span class="attr">target</span>:<span class="string">&#x27;http://localhost:5000&#x27;</span>, <span class="comment">//请求转发给谁</span></span><br><span class="line">			<span class="attr">changeOrigin</span>:<span class="literal">true</span>,<span class="comment">//控制服务器收到的请求头中Host的值</span></span><br><span class="line">			<span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api1&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125; <span class="comment">//重写请求路径(必须)</span></span><br><span class="line">		&#125;)</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="整体规划"><a href="#整体规划" class="headerlink" title="整体规划"></a>整体规划</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">	state=&#123;</span><br><span class="line">		<span class="attr">users</span>:[],</span><br><span class="line">		<span class="attr">isFirst</span>:<span class="literal">true</span>,</span><br><span class="line">		<span class="attr">isLoading</span>:<span class="literal">false</span>,</span><br><span class="line">		<span class="attr">err</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	updateAppState=<span class="function">(<span class="params">stateObj</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>(stateObj)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Search</span> <span class="attr">updateAppState</span>=<span class="string">&#123;this.updateAppState&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">List</span> &#123;<span class="attr">...this.state</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Search</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Componet</span>&#123;</span><br><span class="line"></span><br><span class="line">	search=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;<span class="attr">value</span>:keyword&#125;&#125;=<span class="variable language_">this</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">updateAppState</span>(&#123;<span class="attr">isFirst</span>:fasle,<span class="attr">isLoading</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">		axios.<span class="title function_">get</span>(<span class="string">`/api1/search/users`</span>q=$&#123;keyWord&#125;).<span class="title function_">then</span>(</span><br><span class="line">			<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">updateAppState</span>(&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="attr">users</span>:response.<span class="property">data</span>.<span class="property">items</span>&#125;)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">updateAppState</span>(&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="attr">err</span>:error.<span class="property">message</span>&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron-heading&quot;</span>&gt;</span>搜索github用户<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.keyWordElement=c&#125; type=&quot;text&quot; placeholder=&quot;输入关键字&quot; &gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.search&#125;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		)</span></span><br><span class="line"><span class="language-xml">	&#125;</span></span><br><span class="line"><span class="language-xml">	</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;users,isFirst,isLoading,err&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	&#123;</span></span><br><span class="line"><span class="language-xml">            		isFirst ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎使用，输入关键字，随后点击搜索<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">					isLoading ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Loading......<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">					err ? <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span>&#123;err&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">					users.map((userObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                        return (</span></span><br><span class="line"><span class="language-xml">                        	<span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;userObj.id&#125;</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&#123;userObj.html_url&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">									<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&#123;userObj.avatar_url&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span>&#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        )</span></span><br><span class="line"><span class="language-xml">                    &#125;)</span></span><br><span class="line"><span class="language-xml">            	&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="订阅发布"><a href="#订阅发布" class="headerlink" title="订阅发布"></a>订阅发布</h2><blockquote>
<p>任意组件之间的消息通信。</p>
<p>之前消息通讯只能是：父子组件通过props属性</p>
</blockquote>
<ol>
<li><p>工具库: PubSubJS</p>
</li>
<li><p>下载: npm install pubsub-js –save</p>
</li>
<li><p>使用: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) import PubSub from &#x27;pubsub-js&#x27; //引入</span><br><span class="line"></span><br><span class="line">2) PubSub.subscribe(&#x27;delete&#x27;, function(data)&#123; &#125;); //订阅</span><br><span class="line"></span><br><span class="line">3) PubSub.publish(&#x27;delete&#x27;, data) //发布消息</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="github案例重做"><a href="#github案例重做" class="headerlink" title="github案例重做"></a>github案例重做</h3><blockquote>
<p>由于由订阅发布功能，那么list组件的数据状态自己保存即可，不需要交给app了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Search</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">List</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123; <span class="comment">//初始化状态</span></span><br><span class="line">		<span class="attr">users</span>:[], <span class="comment">//users初始值为数组</span></span><br><span class="line">		<span class="attr">isFirst</span>:<span class="literal">true</span>, <span class="comment">//是否为第一次打开页面</span></span><br><span class="line">		<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="comment">//标识是否处于加载中</span></span><br><span class="line">		<span class="attr">err</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//存储请求相关的错误信息</span></span><br><span class="line">	&#125; </span><br><span class="line">	<span class="comment">//只要有人发布主题atguigu，执行后边的函数:第一个参数是订阅主题，第二个参数是收到的消息</span></span><br><span class="line">	<span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">token</span> = <span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;atguigu&#x27;</span>,<span class="function">(<span class="params">_,stateObj</span>)=&gt;</span>&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="title function_">setState</span>(stateObj)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title class_">PubSub</span>.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">token</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span>&#123;users,isFirst,isLoading,err&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        	<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            	&#123;</span></span><br><span class="line"><span class="language-xml">					isFirst ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎使用，输入关键字，随后点击搜索<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">					isLoading ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Loading......<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">					err ? <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span>&#123;err&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> :</span></span><br><span class="line"><span class="language-xml">					users.map((userObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">						return (</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;userObj.id&#125;</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;noreferrer&quot;</span> <span class="attr">href</span>=<span class="string">&#123;userObj.html_url&#125;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">									<span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;head_portrait&quot;</span> <span class="attr">src</span>=<span class="string">&#123;userObj.avatar_url&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;width:</span>&#x27;<span class="attr">100px</span>&#x27;&#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;card-text&quot;</span>&gt;</span>&#123;userObj.login&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						)</span></span><br><span class="line"><span class="language-xml">					&#125;)</span></span><br><span class="line"><span class="language-xml">				&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Search</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    search=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;<span class="attr">keyWordElement</span>:&#123;<span class="attr">value</span>:keyword&#125;&#125;=<span class="variable language_">this</span></span><br><span class="line">        <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;heiheihei&#x27;</span>,&#123;<span class="attr">isFirst</span>:<span class="literal">false</span>,<span class="attr">isLoading</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">        axios.<span class="title function_">get</span>(<span class="string">`/api1/search/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line">        	<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//请求成功后通知List更新状态</span></span><br><span class="line">				<span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;atguigu&#x27;</span>,&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="attr">users</span>:response.<span class="property">data</span>.<span class="property">items</span>&#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//请求失败后通知App更新状态</span></span><br><span class="line">				<span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;atguigu&#x27;</span>,&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="attr">err</span>:error.<span class="property">message</span>&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span> <span class="attr">className</span>=<span class="string">&quot;jumbotron-heading&quot;</span>&gt;</span>搜索github用户<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.keyWordElement = c&#125; type=&quot;text&quot; placeholder=&quot;输入关键词点击搜索&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.search&#125;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><blockquote>
<ol>
<li>fetch: 原生函数，不再使用XmlHttpRequest对象提交ajax请求</li>
<li>老版本浏览器可能不支持</li>
<li>是Promise风格的</li>
</ol>
</blockquote>
<h3 id="github搜索案例"><a href="#github搜索案例" class="headerlink" title="github搜索案例"></a>github搜索案例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">search = <span class="title function_">async</span>()=&gt;&#123;</span><br><span class="line">		<span class="comment">//发送网络请求---使用fetch发送（优化）</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">const</span> response= <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api1/search/users2?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>)</span><br><span class="line">			<span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">			<span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;atguigu&#x27;</span>,&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="attr">users</span>:data.<span class="property">items</span>&#125;)</span><br><span class="line">		&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求出错&#x27;</span>,error);</span><br><span class="line">			<span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;atguigu&#x27;</span>,&#123;<span class="attr">isLoading</span>:<span class="literal">false</span>,<span class="attr">err</span>:error.<span class="property">message</span>&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="React路由"><a href="#React路由" class="headerlink" title="React路由"></a>React路由</h1><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><blockquote>
<ol>
<li><p>单页Web应用（single page web application，SPA）。</p>
</li>
<li><p>整个应用只有<strong>一个完整的页面</strong>。</p>
</li>
<li><p>点击页面中的链接<strong>不会刷新</strong>页面，只会做页面的<strong>局部更新。</strong></p>
<p>数据都需要通过ajax请求获取, 并在前端异步展现。</p>
</li>
</ol>
</blockquote>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><blockquote>
<p>理解：</p>
<p>   1.一个路由就是一个映射关系(key:value)</p>
<ol start="2">
<li>key为路径, value可能是function或component</li>
</ol>
</blockquote>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol>
<li><p>后端路由：</p>
<ol>
<li><p>理解： value是function, 用来处理客户端提交的请求。</p>
</li>
<li><p>注册路由： router.get(path, function(req, res))</p>
</li>
<li><p>工作过程：当node接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据</p>
</li>
</ol>
</li>
<li><p>前端路由：</p>
<ol>
<li><p>浏览器端路由，value是component，用于展示页面内容。</p>
</li>
<li><p>注册路由: <Route path="/test" component="{Test}"></Route></p>
</li>
<li><p>工作过程：当浏览器的path变为/test时, 被前端路由器检测到了路径变化，当前路由组件就会变为Test组件</p>
</li>
</ol>
</li>
</ol>
<h3 id="前端路由的原理"><a href="#前端路由的原理" class="headerlink" title="前端路由的原理"></a>前端路由的原理</h3><blockquote>
<p>依赖于浏览器浏览历史工作，</p>
<p>见：其他 -前端路由的基石 ,由此可见，有两种方法控制浏览器</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>前端路由的基石_history<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 有onclick事件，不会跳转，只会调用函数 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return push(&#x27;/test1&#x27;) &quot;</span>&gt;</span>push test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;push(&#x27;/test2&#x27;)&quot;</span>&gt;</span>push test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;replace(&#x27;/test3&#x27;)&quot;</span>&gt;</span>replace test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;back()&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span>= 回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;forword()&quot;</span>&gt;</span>前进 =<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/history/4.7.2/history.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// let history = History.createBrowserHistory() //方法一，直接使用H5推出的history身上的API</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">let</span> history = <span class="title class_">History</span>.<span class="title function_">createHashHistory</span>() <span class="comment">//方法二，hash值（锚点）</span></span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//向浏览器的历史记录中放一些记录</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">push</span> (path) &#123;</span></span><br><span class="line"><span class="language-javascript">			history.<span class="title function_">push</span>(path)</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//replace是替换栈顶的那条历史记录</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">replace</span> (path) &#123;</span></span><br><span class="line"><span class="language-javascript">			history.<span class="title function_">replace</span>(path)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">back</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			history.<span class="title function_">goBack</span>()</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">forword</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			history.<span class="title function_">goForward</span>()</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//监听url路径的变化</span></span></span><br><span class="line"><span class="language-javascript">		history.<span class="title function_">listen</span>(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求路由路径变化了&#x27;</span>, location)</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h2><ol>
<li><p>react的一个插件库。</p>
</li>
<li><p>专门用来实现一个SPA应用。</p>
</li>
<li><p>基于react的项目基本都会用到此库。</p>
</li>
</ol>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h2 id="路由组件和基本组件"><a href="#路由组件和基本组件" class="headerlink" title="路由组件和基本组件"></a>路由组件和基本组件</h2><blockquote>
<p>​    1.写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般</span></span><br><span class="line">&lt;<span class="title class_">Demo</span>/&gt;</span><br><span class="line"><span class="comment">//路由组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​    2.放的位置应该不一样</p>
<p>​    3.接受的props不同，一般组件一般是传递了什么就接收什么。</p>
<p>​                    路由组件接受三个固定属性:history，location,match</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history:</span><br><span class="line">	go:</span><br><span class="line">	goBack:</span><br><span class="line">	goForward:</span><br><span class="line">	push:</span><br><span class="line">	replace:</span><br><span class="line">location:</span><br><span class="line">	pathname:获取当前的路由路径</span><br><span class="line">	search:</span><br><span class="line">	state:</span><br><span class="line">match:</span><br><span class="line">	params:</span><br><span class="line">	path:获取当前的路由路径</span><br><span class="line">	url:获取当前的路由路径</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">							&#123;/* 原生html中，靠<span class="tag">&lt;<span class="name">a</span>&gt;</span>跳转不同的页面 */&#125;</span></span><br><span class="line"><span class="language-xml">							&#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">							</span></span><br><span class="line"><span class="language-xml">							&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		)</span></span><br><span class="line"><span class="language-xml">	&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Home About</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">About</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;About组件收到的props是&#x27;</span>,<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是About的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h2><blockquote>
<p> 在React中靠路由链接实现切换组件–编写路由链接</p>
<p>​      <MyNavLink replace to="/about">About</MyNavLink></p>
<p>​      <MyNavLink replace to="/home">Home</MyNavLink></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">							&#123;/* 原生html中，靠<span class="tag">&lt;<span class="name">a</span>&gt;</span>跳转不同的页面 */&#125;</span></span><br><span class="line"><span class="language-xml">							&#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">							&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&quot;atguigu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&quot;atguigu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">								</span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		)</span></span><br><span class="line"><span class="language-xml">	&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// console.log(&#x27;Header组件收到的props是&#x27;,this.props);</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="封装自己的NavLink"><a href="#封装自己的NavLink" class="headerlink" title="封装自己的NavLink"></a>封装自己的NavLink</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MyNavLink</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// console.log(this.props);</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">activeClassName</span>=<span class="string">&quot;atguigu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">							&#123;/* 原生html中，靠<span class="tag">&lt;<span class="name">a</span>&gt;</span>跳转不同的页面 */&#125;</span></span><br><span class="line"><span class="language-xml">							&#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">							&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 </span></span><br><span class="line"><span class="language-xml">								标签体的值是key为children的标签属性的值传递过去了，MyNavLink组件的&#123;...this.props&#125;直接接受了这个参数：</span></span><br><span class="line"><span class="language-xml">									children:About</span></span><br><span class="line"><span class="language-xml">							*/&#125;</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		)</span></span><br><span class="line"><span class="language-xml">	&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* 注册路由，/home下有两个路由组件，加入switch之后，匹配到第一个就不会再匹配了 */</span>&#125;</span><br><span class="line">								&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">									<span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">									<span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">									<span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Test&#125;/</span>&gt;</span></span></span><br><span class="line">								&lt;/<span class="title class_">Swtch</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="样式丢失"><a href="#样式丢失" class="headerlink" title="样式丢失"></a>样式丢失</h2><blockquote>
<p>原因：</p>
<p>​                路由多级时这时刷新，样式会丢失！</p>
<p>​                原因：</p>
<p>​                index.html的样式引入改为<link rel="stylesheet" href="./css/bootstrap.css">，点表示当前目录</p>
<p>​                解决办法：</p>
<p>​                1.将index.html的样式引入改为<link rel="stylesheet" href="/css/bootstrap.css"></p>
<p>​                2.将index.html的样式引入改为<link rel="stylesheet" href="%PUBLIC_URL%/css/bootstrap.css"></p>
<p>​                3.使用HashRouter代替BrowserRouter，因为将url的#后的值视为无效</p>
<p>​                当请求的东西不存在，则把public下的index.html返回 (这是脚手架设置的)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;div className=&quot;row&quot;&gt;</span><br><span class="line">					&lt;div className=&quot;col-xs-offset-2 col-xs-8&quot;&gt;</span><br><span class="line">						&lt;Header/&gt;</span><br><span class="line">					&lt;/div&gt;</span><br><span class="line">				&lt;/div&gt;</span><br><span class="line">				&lt;div className=&quot;row&quot;&gt;</span><br><span class="line">					&lt;div className=&quot;col-xs-2 col-xs-offset-2&quot;&gt;</span><br><span class="line">						&lt;div className=&quot;list-group&quot;&gt;</span><br><span class="line"></span><br><span class="line">							&#123;/* 原生html中，靠&lt;a&gt;跳转不同的页面 */&#125;</span><br><span class="line">							&#123;/* &lt;a className=&quot;list-group-item&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt;</span><br><span class="line">							&lt;a className=&quot;list-group-item active&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; */&#125;</span><br><span class="line"></span><br><span class="line">							&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span><br><span class="line">							&lt;MyNavLink to=&quot;/atguigu/about&quot;&gt;About&lt;/MyNavLink&gt;</span><br><span class="line">							&lt;MyNavLink to=&quot;/atguigu/home&quot;&gt;Home&lt;/MyNavLink&gt;</span><br><span class="line">						&lt;/div&gt;</span><br><span class="line">					&lt;/div&gt;</span><br><span class="line">					&lt;div className=&quot;col-xs-6&quot;&gt;</span><br><span class="line">						&lt;div className=&quot;panel&quot;&gt;</span><br><span class="line">							&lt;div className=&quot;panel-body&quot;&gt;</span><br><span class="line">								&#123;/* 注册路由</span><br><span class="line">								路由多级时这时刷新，样式会丢失！</span><br><span class="line">								原因：</span><br><span class="line">								index.html的样式引入改为&lt;link rel=&quot;stylesheet&quot; href=&quot;./css/bootstrap.css&quot;&gt;，点表示当前目录</span><br><span class="line">								解决办法：</span><br><span class="line">								1.将index.html的样式引入改为&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/bootstrap.css&quot;&gt;</span><br><span class="line">								2.将index.html的样式引入改为&lt;link rel=&quot;stylesheet&quot; href=&quot;%PUBLIC_URL%/css/bootstrap.css&quot;&gt;</span><br><span class="line">								3.使用HashRouter代替BrowserRouter，因为将url的#后的值视为无效</span><br><span class="line">								当请求的东西不存在，则把public下的index.html返回 (这是脚手架设置的)*/&#125;</span><br><span class="line">								&lt;Switch&gt;</span><br><span class="line">									&lt;Route path=&quot;/atguigu/about&quot; component=&#123;About&#125;/&gt;</span><br><span class="line">									&lt;Route path=&quot;/atguigu/home&quot; component=&#123;Home&#125;/&gt;</span><br><span class="line">								&lt;/Switch&gt;</span><br><span class="line">							&lt;/div&gt;</span><br><span class="line">						&lt;/div&gt;</span><br><span class="line">					&lt;/div&gt;</span><br><span class="line">				&lt;/div&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* 注册路由 exact开启了严格匹配 */</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Rediect"><a href="#Rediect" class="headerlink" title="Rediect"></a>Rediect</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">/* 注册路由 Redirect 谁都匹配不上  跳转的路由*/</span>&#125;</span><br><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="二级路由"><a href="#二级路由" class="headerlink" title="二级路由"></a>二级路由</h2><blockquote>
<p>home路由下面增加Message和News路由</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">				<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							&#123;/* 在父路由的下面接着写路由</span></span><br><span class="line"><span class="language-xml">							/home/news 模糊匹配，和Home路由也匹配，所以父组件也会展示</span></span><br><span class="line"><span class="language-xml">							/home/news 模糊匹配，又和news路由匹配</span></span><br><span class="line"><span class="language-xml">							所以不能开启严格匹配</span></span><br><span class="line"><span class="language-xml">							*/&#125;</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/news&quot;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">			)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由组件传递参数"><a href="#路由组件传递参数" class="headerlink" title="路由组件传递参数"></a>路由组件传递参数</h2><blockquote>
<p>点击Message页面的详细信息链接在下面显示detail，并且把参数传递过去</p>
</blockquote>
<h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		<span class="attr">messageArr</span>:[</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>&#125;,</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;messageArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					&#123;</span></span><br><span class="line"><span class="language-xml">						messageArr.map((msgObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">							return (</span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">									&#123;/* 向路由组件传递params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">									<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">msgObj.id</span>&#125;/$&#123;<span class="attr">msgObj.title</span>&#125;`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							)</span></span><br><span class="line"><span class="language-xml">						&#125;)</span></span><br><span class="line"><span class="language-xml">					&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;/* 声明接收params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">DetailData</span> = [</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，中国&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，未来的自己&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">		<span class="comment">// 接收params参数</span></span><br><span class="line">		<span class="keyword">const</span> &#123;id,title&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span></span><br><span class="line">		<span class="keyword">const</span> findResult = <span class="title class_">DetailData</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">detailObj</span>)=&gt;</span>&#123;</span><br><span class="line">			<span class="comment">//查找的条件</span></span><br><span class="line">			<span class="keyword">return</span> detailObj.<span class="property">id</span> === id</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>TITLE:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>CONTENT:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="search参数-query参数"><a href="#search参数-query参数" class="headerlink" title="search参数(query参数)"></a>search参数(query参数)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		<span class="attr">messageArr</span>:[</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>&#125;,</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;messageArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					&#123;</span></span><br><span class="line"><span class="language-xml">						messageArr.map((msgObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">							return (</span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">									&#123;/* 向路由组件传递search参数 */&#125;</span></span><br><span class="line"><span class="language-xml">									<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;msgObj.id&#125;&amp;title</span>=<span class="string">$&#123;msgObj.title&#125;</span>`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							)</span></span><br><span class="line"><span class="language-xml">						&#125;)</span></span><br><span class="line"><span class="language-xml">					&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;/* 声明接收params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">				&#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">				&#123;/* search参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// qs有两个有用的功能:</span></span><br><span class="line"><span class="comment">//针对urlencoding编码：key=value&amp;key1=value1==&gt;qs</span></span><br><span class="line"><span class="comment">//将json对象格式转化为此编码格式：qs.stringfy(urlencoding);反过来qs.paese(json)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DetailData</span> = [</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，中国&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，未来的自己&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">		<span class="comment">// 接收search参数</span></span><br><span class="line">		<span class="keyword">const</span> &#123;search&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span></span><br><span class="line">		<span class="keyword">const</span> &#123;id,title&#125; = qs.<span class="title function_">parse</span>(search.<span class="title function_">slice</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> findResult = <span class="title class_">DetailData</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">detailObj</span>)=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> detailObj.<span class="property">id</span> === id</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>TITLE:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>CONTENT:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="state参数"><a href="#state参数" class="headerlink" title="state参数"></a>state参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		<span class="attr">messageArr</span>:[</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>&#125;,</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;messageArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					&#123;</span></span><br><span class="line"><span class="language-xml">						messageArr.map((msgObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">							return (</span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">									&#123;/* 向路由组件传递state参数 */&#125;</span></span><br><span class="line"><span class="language-xml">									<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>&#x27;/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;,<span class="attr">state:</span>&#123;<span class="attr">id:msgObj.id</span>,<span class="attr">title:msgObj.title</span>&#125;&#125;&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							)</span></span><br><span class="line"><span class="language-xml">						&#125;)</span></span><br><span class="line"><span class="language-xml">					&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">				&#123;/* state参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">DetailData</span> = [</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，中国&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，未来的自己&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">		<span class="comment">// 接收state参数,刷新页面  上述三种参数传递方式 参数都不会丢失</span></span><br><span class="line">		<span class="comment">//为防止查出来是undefined(比如清除了缓存或者就没传递数据)，则使用&#123;&#125;空对象，防止浏览器报错</span></span><br><span class="line">		<span class="comment">//HashRouter路由会导致参数的丢失</span></span><br><span class="line">		<span class="keyword">const</span> &#123;id,title&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">state</span> || &#123;&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> findResult = <span class="title class_">DetailData</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">detailObj</span>)=&gt;</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> detailObj.<span class="property">id</span> === id</span><br><span class="line">		&#125;) || &#123;&#125;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>TITLE:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>CONTENT:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编程时路由导航"><a href="#编程时路由导航" class="headerlink" title="编程时路由导航"></a>编程时路由导航</h2><blockquote>
<p>即不靠路由标签Link或者MyNavLink 标签       </p>
<p>自己写函数完成路由的跳转</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		<span class="attr">messageArr</span>:[</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>&#125;,</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	replaceShow = <span class="function">(<span class="params">id,title</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="comment">//replace跳转+携带params参数</span></span><br><span class="line">		<span class="comment">//this.props.history.replace(`/home/message/detail/$&#123;id&#125;/$&#123;title&#125;`)</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//replace跳转+携带search参数</span></span><br><span class="line">		<span class="comment">// this.props.history.replace(`/home/message/detail?id=$&#123;id&#125;&amp;title=$&#123;title&#125;`)</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//replace跳转+携带state参数</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">replace</span>(<span class="string">`/home/message/detail`</span>,&#123;id,title&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pushShow = <span class="function">(<span class="params">id,title</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="comment">//push跳转+携带params参数</span></span><br><span class="line">		<span class="comment">// this.props.history.push(`/home/message/detail/$&#123;id&#125;/$&#123;title&#125;`)</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//push跳转+携带search参数</span></span><br><span class="line">		<span class="comment">// this.props.history.push(`/home/message/detail?id=$&#123;id&#125;&amp;title=$&#123;title&#125;`)</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//push跳转+携带state参数</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">`/home/message/detail`</span>,&#123;id,title&#125;)</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	back = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goBack</span>()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	forward = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goForward</span>()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	go = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;messageArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					&#123;</span></span><br><span class="line"><span class="language-xml">						messageArr.map((msgObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">							return (</span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">									&#123;/* 向路由组件传递state参数 */&#125;</span></span><br><span class="line"><span class="language-xml">									<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>&#x27;/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;,<span class="attr">state:</span>&#123;<span class="attr">id:msgObj.id</span>,<span class="attr">title:msgObj.title</span>&#125;&#125;&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">									<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> this.pushShow(msgObj.id,msgObj.title)&#125;&gt;push查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">									<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> this.replaceShow(msgObj.id,msgObj.title)&#125;&gt;replace查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							)</span></span><br><span class="line"><span class="language-xml">						&#125;)</span></span><br><span class="line"><span class="language-xml">					&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;/* 声明接收params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">				&#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">				&#123;/* search参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml">				&#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">				&#123;/* state参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forward&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	back = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goBack</span>()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	forward = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goForward</span>()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	go = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">2</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Header组件收到的props是&#x27;</span>,<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forward&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Header</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//withRouter可以加工一般组件，让一般组件具备路由组件所特有的API</span></span><br><span class="line"><span class="comment">//withRouter的返回值是一个新组件</span></span><br><span class="line"><span class="comment">//要不然一般组件就没有路由组件的history这些api</span></span><br></pre></td></tr></table></figure>

<h2 id="BrowerRouter和HashRouter路由器的区别"><a href="#BrowerRouter和HashRouter路由器的区别" class="headerlink" title="BrowerRouter和HashRouter路由器的区别"></a>BrowerRouter和HashRouter路由器的区别</h2><blockquote>
<p>1.底层原理不一样：</p>
<p>​    BrowerRouter使用的时h5的history(不是this.props.history这个,这个是React对h5的history的封装)，不兼容ie9以及以下版本</p>
<p>​    HashRouter使用的时URL的哈希值</p>
<p>2.url表现形式不一样：</p>
<p>​    BrowerRouter没有#，如：localhost:3000/demo/test</p>
<p>​    HashRouter的路径包含#，如：localhost:3000/#/demo/test</p>
<p>3.刷新后对路由state参数的影响(重要)</p>
<p>​     BrowerRouter没有影响，因为statev保存在state对象中</p>
<p>​    HashRouter刷新为导致state参数丢失</p>
<p>4.HashRouter可以用来解决一些路径错误的相关问题(比如样式丢失的问题)</p>
</blockquote>
<h1 id="React6路由"><a href="#React6路由" class="headerlink" title="React6路由"></a>React6路由</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="element代理component"><a href="#element代理component" class="headerlink" title="element代理component"></a>element代理component</h3><h3 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h3><blockquote>
<p>1.代替Switch</p>
<p>2.和Route配合使用，Route外边必须包裹Routes</p>
<p>3.Route相当于if语句，如路径和当前的url匹配，则呈现对应的组件</p>
<p>4.<Route casesensitive>属性用于指定：路径匹配知否忽略大小写(more那位false)</Route></p>
<p>5.当路由变化是，Routes匹配所有的Route元素找到最佳的匹配并呈现组件</p>
<p>6.<strong>Routes也可以嵌套使用，且配合useRoutes配置路由表，但需要通过Outlet组件来渲染子路由</strong></p>
<p>重要：使用useRoutes</p>
</blockquote>
<p>路由表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">            <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">          <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">// path:&#x27;detail/:id/:title&#x27;,</span></span><br><span class="line">              <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">              <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<p>路由表暴露在App.jsx中，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoutes&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"> <span class="comment">// 路由表,根据路由表生成路由</span></span><br><span class="line">  <span class="keyword">const</span> element=<span class="title function_">useRoutes</span>(routes)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//在函数组件的return片段需要注册路由的片段中添加</span></span><br><span class="line">  &#123;element&#125;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<blockquote>
<p>end：子路由匹配到，父路由就不高亮了。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#123;computedClassName&#125;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#123;computedClassName&#125;</span> <span class="attr">end</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;element&#125;</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">function</span>  <span class="title function_">computedClassName</span>(<span class="params">&#123;isActive&#125;</span>)&#123;</span><br><span class="line">  <span class="comment">//console.log(isActive)</span></span><br><span class="line">  <span class="keyword">return</span> isActive ? <span class="string">&#x27;list-group-item atguigu&#x27;</span> : <span class="string">&#x27;list-group-item&#x27;</span> </span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>

<h3 id="Navigate代替Redirect"><a href="#Navigate代替Redirect" class="headerlink" title="Navigate代替Redirect"></a>Navigate代替Redirect</h3><blockquote>
<p>只要被渲染在页面上就会切换视图</p>
<p>除了to属性，还有replace属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.在路由表中，表示url以/结尾默认展示about组件</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//2.满足条件即跳转，比如当前页面的sum变为2时，自动跳转为about组件(替换当前的home组件)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> [sum, setSum] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			&#123;/* <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;this.state.sum&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">			&#123;sum === 2 ? <span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">replace</span>=<span class="string">&#123;false&#125;</span> /&gt;</span> : <span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前的sum值是&#123;sum&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setSum(sum =&gt; sum + 1)&#125;&gt;点击将sum变为2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NavLink高亮"><a href="#NavLink高亮" class="headerlink" title="NavLink高亮"></a>NavLink高亮</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> computedClassName(&#123;isActive&#125;)&#123;</span><br><span class="line">    console.log(isActive)</span><br><span class="line">    return isActive ? &#x27;list-group-item atguigu&#x27; : &#x27;list-group-item&#x27; </span><br><span class="line"> &#125;</span><br><span class="line">//不可以在标签里直接用activeClassName=&quot;atguigu&quot; 这种形式了</span><br><span class="line">&lt;NavLink className=&#123;this.computedClassName&#125; to=&quot;/home&quot;&gt;Home&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure>

<h3 id="参数携带"><a href="#参数携带" class="headerlink" title="参数携带"></a>参数携带</h3><blockquote>
<p>点击message组件中的链接，在下方展示另外一个组件，里面有传递过去的内容</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> [messageArr,setessageArr] = <span class="title class_">React</span>.<span class="title function_">useState</span>(</span><br><span class="line">		 [</span><br><span class="line">			&#123; <span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息1&#x27;</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息2&#x27;</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息3&#x27;</span> &#125;,</span><br><span class="line">		 ]</span><br><span class="line">		)</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;</span></span><br><span class="line"><span class="language-xml">					messageArr.map((msgObj) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">						return (</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								&#123;/* 向路由组件传递params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">								&#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/$&#123;<span class="attr">msgObj.id</span>&#125;/$&#123;<span class="attr">msgObj.title</span>&#125;`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">								&#123;/* search参数 */&#125;</span></span><br><span class="line"><span class="language-xml">								&#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;msgObj.id&#125;&amp;title</span>=<span class="string">$&#123;msgObj.title&#125;</span>`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">state</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">									<span class="attr">id:</span> <span class="attr">msgObj.id</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">									<span class="attr">title:</span> <span class="attr">msgObj.title</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">								&#125;&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						)</span></span><br><span class="line"><span class="language-xml">					&#125;)</span></span><br><span class="line"><span class="language-xml">				&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">            <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">News</span>/&gt;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>/&gt;</span></span>,</span><br><span class="line">          <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">//params传参数需要声明，其他两种不需要</span></span><br><span class="line">              <span class="comment">// path:&#x27;detail/:id/:title&#x27;,</span></span><br><span class="line">              <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">              <span class="attr">element</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">DetailData</span> = [</span><br><span class="line">	&#123; <span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;你好，中国&#x27;</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;你好，尚硅谷&#x27;</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;你好，未来的自己&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// console.log(this.props);</span></span><br><span class="line">	<span class="comment">//`接收params参数</span></span><br><span class="line">	<span class="comment">// const &#123; id, title &#125; = useParams()</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//接收search参数,用于更新接收到的参数setSearch(`id=0001&amp;title=hahha`)</span></span><br><span class="line">	<span class="comment">// const  [search,setSearch]=useSearchParams()</span></span><br><span class="line">	<span class="comment">// const id=search.get(&#x27;id&#x27;)</span></span><br><span class="line">	<span class="comment">// const title=search.get(&#x27;title&#x27;)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//state对象</span></span><br><span class="line">	<span class="keyword">const</span> &#123;<span class="attr">state</span>:&#123;id,title&#125;&#125;=<span class="title function_">useLocation</span>()</span><br><span class="line">	<span class="keyword">const</span> findResult = <span class="title class_">DetailData</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">detailObj</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">//查找的条件</span></span><br><span class="line">		<span class="keyword">return</span> detailObj.<span class="property">id</span> === id</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>TITLE:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>CONTENT:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数式路由导航"><a href="#函数式路由导航" class="headerlink" title="函数式路由导航"></a>函数式路由导航</h3><blockquote>
<p>不需要Link navLink,比如点击图片跳转的时候或者点击一个自定义标签跳转的时候</p>
<p>使用useNavigate进行自定义跳转，同时这种形式只能接收state参数，可以设置跳转类型push/replace</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> [messageArr,setessageArr] = <span class="title class_">React</span>.<span class="title function_">useState</span>(</span><br><span class="line">		 [</span><br><span class="line">			&#123; <span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息1&#x27;</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息2&#x27;</span> &#125;,</span><br><span class="line">			&#123; <span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;消息3&#x27;</span> &#125;,</span><br><span class="line">		 ]</span><br><span class="line">		)</span><br><span class="line">	<span class="keyword">const</span> navigate=<span class="title function_">useNavigate</span>()</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">showDetail</span>(<span class="params">msgObj</span>)&#123;</span><br><span class="line">		<span class="title function_">navigate</span>(<span class="string">&#x27;detail&#x27;</span>,&#123;</span><br><span class="line">			<span class="attr">replace</span>:<span class="literal">false</span>,</span><br><span class="line">			<span class="comment">// paramhe search参数不能这样写，直接写在路径上</span></span><br><span class="line">			<span class="attr">state</span>:&#123;</span><br><span class="line">				<span class="attr">id</span>:msgObj.<span class="property">id</span>,</span><br><span class="line">				<span class="attr">title</span>:msgObj.<span class="property">title</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;</span></span><br><span class="line"><span class="language-xml">					messageArr.map((msgObj) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">						return (</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">state</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">									<span class="attr">id:</span> <span class="attr">msgObj.id</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">									<span class="attr">title:</span> <span class="attr">msgObj.title</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">								&#125;&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>showDetail(msgObj)&#125;&gt;展示详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						)</span></span><br><span class="line"><span class="language-xml">					&#125;)</span></span><br><span class="line"><span class="language-xml">				&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="路由跳转操作"><a href="#路由跳转操作" class="headerlink" title="路由跳转操作"></a>路由跳转操作</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> navigate=<span class="title function_">useNavigate</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">back</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">navigate</span>(-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">forward</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">navigate</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;forward&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;back&#125;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="useInRouterContext"><a href="#useInRouterContext" class="headerlink" title="useInRouterContext"></a>useInRouterContext</h3><blockquote>
<p>如果组件在Router的上下文呈现，则其返回true，否则返回false</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般，表示APP 及其子组件都是在上下文环境中，即被被BrowserRouter包裹(不区分路由和非路由组件)</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="useNavigationType"><a href="#useNavigationType" class="headerlink" title="useNavigationType"></a>useNavigationType</h3><blockquote>
<p>返回用户是如何来到当前页面的</p>
<p>返回值：</p>
<p>​    pop，push,replace</p>
<p>备注：</p>
<p>​    pop是指在浏览器中直接打开路由组件(刷新当前页面)</p>
</blockquote>
<h3 id="useOutlet"><a href="#useOutlet" class="headerlink" title="useOutlet"></a>useOutlet</h3><blockquote>
<p>作用：用来呈现当前组件中渲染的嵌套路由组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const result=useOutLet()</span><br><span class="line">console.log(result)</span><br><span class="line">//如果嵌套路由组件已经挂在，则显示嵌套路由对象，否则为null</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="useResolvedPath"><a href="#useResolvedPath" class="headerlink" title="useResolvedPath"></a>useResolvedPath</h3><blockquote>
<p>解析一个url，解析其中的path，search，hash</p>
</blockquote>
<h1 id="antd组件"><a href="#antd组件" class="headerlink" title="antd组件"></a>antd组件</h1><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h2 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h2><blockquote>
<p>有个缺点，这边的使用格式import ‘antd/dist/antd.css’直接导入， 比如无法进行主题配置，而且加载了全部的 antd 组件的样式 。</p>
<p> 此时我们需要对 create-react-app 的默认配置进行自定义，这里我们使用 <a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a> （一个对 create-react-app 进行自定义配置的社区解决方案）。 </p>
<p> 引入 react-app-rewired 并修改 package.json 里的启动配置。由于新的 <a href="https://github.com/timarney/react-app-rewired#alternatives">react-app-rewired@2.x</a> 版本的关系，你还需要安装 <a href="https://github.com/arackaf/customize-cra">customize-cra</a>。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add react-app-rewired customize-cra</span><br></pre></td></tr></table></figure>

<p>改变package.json的启动配置为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* package.json */</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">+   &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class="line">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">+   &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class="line">-   &quot;test&quot;: &quot;react-scripts test&quot;,</span><br><span class="line">+   &quot;test&quot;: &quot;react-app-rewired test&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 然后在项目根目录创建一个 <code>config-overrides.js</code> 用于修改默认配置。 </p>
<p>需要安装, <a href="https://github.com/ant-design/babel-plugin-import">babel-plugin-import</a> 是一个用于按需加载组件代码和样式的 babel 插件（<a href="https://3x.ant.design/docs/react/getting-started-cn#%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD">原理</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-import </span><br></pre></td></tr></table></figure>

<p>在 <code>config-overrides.js</code>写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//配置具体的修改规则,这样我们在写项目的时候就不需要直接引入antd.css，即可以按需引入。</span><br><span class="line"> const &#123; override, fixBabelImports &#125; = require(&#x27;customize-cra&#x27;);</span><br><span class="line"></span><br><span class="line"> module.exports = override(</span><br><span class="line">   fixBabelImports(&#x27;import&#x27;, &#123;</span><br><span class="line">     libraryName: &#x27;antd&#x27;,</span><br><span class="line">     libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">     style: &#x27;css&#x27;,</span><br><span class="line">   &#125;),</span><br><span class="line"> );</span><br></pre></td></tr></table></figure>

<p>此时就不需要引入autd.css,直接启动就可以</p>
</blockquote>
<h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><blockquote>
<p> 按照 <a href="https://3x.ant.design/docs/react/customize-theme-cn">配置主题</a> 的要求，自定义主题需要用到 less 变量覆盖功能。我们可以引入 <code>customize-cra</code> 中提供的 less 相关的函数 <a href="https://github.com/arackaf/customize-cra#addlessloaderloaderoptions">addLessLoader</a> 来帮助加载 less 样式，同时修改 <code>config-overrides.js</code> 文件如下。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- const &#123; override, fixBabelImports &#125; = require(&#x27;customize-cra&#x27;);</span><br><span class="line">+ const &#123; override, fixBabelImports, addLessLoader &#125; = require(&#x27;customize-cra&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = override(</span><br><span class="line">  fixBabelImports(&#x27;import&#x27;, &#123;</span><br><span class="line">    libraryName: &#x27;antd&#x27;,</span><br><span class="line">    libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">-   style: &#x27;css&#x27;,</span><br><span class="line">+   style: true,</span><br><span class="line">  &#125;),</span><br><span class="line">+ addLessLoader(&#123;</span><br><span class="line">+   javascriptEnabled: true,</span><br><span class="line">+   modifyVars: &#123; &#x27;@primary-color&#x27;: &#x27;#1DA57A&#x27; &#125;,</span><br><span class="line">+ &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote>
<ol>
<li><p>redux是一个专门用于做<strong>状态管理</strong>的JS库(不是react插件库)。</p>
</li>
<li><p>它可以用在react, angular, vue等项目中, 但基本与react配合使用。</p>
</li>
<li><p>作用: 集中式管理react应用中多个组件<strong>共享</strong>的状态。什么</p>
</li>
</ol>
</blockquote>
<h2 id="什么时候使用"><a href="#什么时候使用" class="headerlink" title="什么时候使用"></a>什么时候使用</h2><blockquote>
<ol>
<li><p>某个组件的状态，需要让其他组件可以随时拿到（共享）。</p>
</li>
<li><p>一个组件需要改变另一个组件的状态（通信）。</p>
</li>
<li><p>总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</p>
</li>
</ol>
</blockquote>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/React%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%8B%E7%BC%96%E7%A0%81/gitee\Blog\source_posts\React脚手架下编码\图片1.png" alt="图片1"></p>
<img src="/blknjyty.github.io/2022/07/25/React%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%8B%E7%BC%96%E7%A0%81/%E5%9B%BE%E7%89%871.png" class title="是南宁的吧市">

<h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>==就是把我们的行为包装成一个对象。自己写也可以。其也可以是个函数(异步action)==</p>
<blockquote>
<ol>
<li><p>动作的对象</p>
</li>
<li><p>包含2个属性</p>
<ul>
<li>type：标识属性, 值为字符串, 唯一, 必要属性</li>
<li>data：数据属性, 值类型任意, 可选属性</li>
</ul>
</li>
<li><p>例子：{ type: ‘ADD_STUDENT’,data:{name: ‘tom’,age:18} }</p>
</li>
</ol>
<p>初始化时type:@@+随机字符的形式，date为undefined</p>
</blockquote>
<h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>==具体执行我们指定行为的人==</p>
<blockquote>
<ol>
<li><p>用于初始化状态、加工状态。</p>
</li>
<li><p>加工时，根据旧的state和action， 产生新的state的<strong>纯函数</strong></p>
</li>
</ol>
<p>初始化的时候preState为undefined</p>
</blockquote>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>==是总控中心，分配任务给reducer，拿到reducer做的结果==</p>
<blockquote>
<ol>
<li><p>将state、action、reducer联系在一起的对象</p>
</li>
<li><p>如何得到此对象?</p>
<ol>
<li><p>import {createStore} from ‘redux’</p>
</li>
<li><p>import reducer from ‘./reducers’</p>
</li>
<li><p>const store = createStore(reducer)</p>
</li>
</ol>
</li>
<li><p>此对象的功能?</p>
<ol>
<li><p>getState(): 得到state</p>
</li>
<li><p>dispatch(action): 分发action, 触发reducer调用, 产生新的state</p>
</li>
</ol>
<p>3)subscribe(listener): 注册监听, 当产生了新的state时, 自动调用</p>
</li>
</ol>
</blockquote>
<h2 id="react实现计算器"><a href="#react实现计算器" class="headerlink" title="react实现计算器"></a>react实现计算器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//加法</span></span><br><span class="line">	increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//减法</span></span><br><span class="line">	decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count-value*<span class="number">1</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//奇数再加</span></span><br><span class="line">	incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//异步加</span></span><br><span class="line">	incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+value*<span class="number">1</span>&#125;)</span><br><span class="line">		&#125;,<span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="redux实现计算器"><a href="#redux实现计算器" class="headerlink" title="redux实现计算器"></a>redux实现计算器</h2><blockquote>
<pre><code>(1).去除Count组件自身的状态
(2).src下建立:
                -redux
                    -store.js
                    -count_reducer.js

(3).store.js：
            1).引入redux中的createStore函数，创建一个store
            2).createStore调用时要传入一个为其服务的reducer
            3).记得暴露store对象

(4).count_reducer.js：
            1).reducer的本质是一个函数，接收：preState,action，返回加工后的状态
            2).reducer有两个作用：初始化状态，加工状态
            3).reducer被第一次调用时，是store自动触发的，
                            传递的preState是undefined,
                            传递的action是:&#123;type:&#39;@@REDUX/INIT_a.2.b.4&#125;

(5).在index.js中监测store中状态的改变，一旦发生改变重新渲染&lt;App/&gt;
        备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。
</code></pre>
</blockquote>
<h3 id="创建干活的人Reducer"><a href="#创建干活的人Reducer" class="headerlink" title="创建干活的人Reducer"></a>创建干活的人Reducer</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	1.该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数</span></span><br><span class="line"><span class="comment">	2.reducer函数会接到两个参数，分别为：之前的状态(preState)，动作对象(action)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span> <span class="comment">//初始化状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">preState=initState,action</span>)&#123;</span><br><span class="line">	<span class="comment">// console.log(preState);</span></span><br><span class="line">	<span class="comment">//从action对象中获取：type、data</span></span><br><span class="line">	<span class="keyword">const</span> &#123;type,data&#125; = action</span><br><span class="line">	<span class="comment">//根据type决定如何加工数据</span></span><br><span class="line">	<span class="keyword">switch</span> (type) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="attr">INCREMENT</span>: <span class="comment">//如果是加</span></span><br><span class="line">			<span class="keyword">return</span> preState + data</span><br><span class="line">		<span class="keyword">case</span> <span class="attr">DECREMENT</span>: <span class="comment">//若果是减</span></span><br><span class="line">			<span class="keyword">return</span> preState - data</span><br><span class="line">		<span class="attr">default</span>:</span><br><span class="line">			<span class="keyword">return</span> preState</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建老板store"><a href="#创建老板store" class="headerlink" title="创建老板store"></a>创建老板store</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	该文件专门用于暴露一个store对象，整个应用只有一个store对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入createStore，专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">//引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="comment">//暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(countReducer)</span><br></pre></td></tr></table></figure>

<h3 id="创建行为对象"><a href="#创建行为对象" class="headerlink" title="创建行为对象"></a>创建行为对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	该文件专门为Count组件生成action对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAction</span> = data =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">INCREMENT</span>,data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDecrementAction</span> = data =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">DECREMENT</span>,data&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建行为定义"><a href="#创建行为定义" class="headerlink" title="创建行为定义"></a>创建行为定义</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	该模块是用于定义action对象中type类型的常量值，目的只有一个：便于管理的同时防止程序员单词写错</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENT</span> = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DECREMENT</span> = <span class="string">&#x27;decrement&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算器逻辑"><a href="#计算器逻辑" class="headerlink" title="计算器逻辑"></a>计算器逻辑</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰c63&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* componentDidMount()&#123;</span></span><br><span class="line"><span class="comment">		//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class="line"><span class="comment">		store.subscribe(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">			this.setState(&#123;&#125;)</span></span><br><span class="line"><span class="comment">		&#125;)</span></span><br><span class="line"><span class="comment">	&#125; */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//加法</span></span><br><span class="line">	increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//减法</span></span><br><span class="line">	decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		store.<span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//奇数再加</span></span><br><span class="line">	incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="keyword">const</span> count = store.<span class="title function_">getState</span>()</span><br><span class="line">		<span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">			store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//异步加</span></span><br><span class="line">	incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">			store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">		&#125;,<span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js监控store变化"><a href="#index-js监控store变化" class="headerlink" title="index.js监控store变化"></a>index.js监控store变化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"><span class="comment">//监控redux的状态变化，只要一变化就调用render</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">	<span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="异步action"><a href="#异步action" class="headerlink" title="异步action"></a>异步action</h3><blockquote>
<p>store</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	该文件专门用于暴露一个store对象，整个应用只有一个store对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入createStore，专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">//引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="comment">//引入redux-thunk，用于支持异步action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="comment">//暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(countReducer,<span class="title function_">applyMiddleware</span>(thunk))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>action</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	该文件专门为Count组件生成action对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同步action，就是指action的值为Object类型的一般对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAction</span> = data =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">INCREMENT</span>,data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDecrementAction</span> = data =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">DECREMENT</span>,data&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步action，就是指action的值为函数,异步action中一般都会调用同步action，异步action不是必须要用的。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAsyncAction</span> = (<span class="params">data,time</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">			<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(data))</span><br><span class="line">		&#125;,time)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>之前那是在具体的组件中使用定时器，现在直接把定时任务放在action中，传入data和time作为参数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异步加</span></span><br><span class="line">	incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line">			store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(value*<span class="number">1</span>,<span class="number">500</span>))</span><br><span class="line">		<span class="comment">// &#125;,500)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>store调用dispath方法，createIncrementAsyncAction返回函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(dispatch)=&gt;&#123;</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">			<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(data))</span><br><span class="line">		&#125;,time)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>执行定时函数</p>
</blockquote>
<h1 id="React-redux"><a href="#React-redux" class="headerlink" title="React-redux"></a>React-redux</h1><p><img src="/blknjyty.github.io/blknjyty.github.io/2022/07/25/React%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%8B%E7%BC%96%E7%A0%81/gitee\Blog\source_posts\React脚手架下编码\react-redux模型图.png" alt="react-redux模型图"></p>
<img src="/blknjyty.github.io/2022/07/25/React%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%8B%E7%BC%96%E7%A0%81/react-redux%E6%A8%A1%E5%9E%8B%E5%9B%BE.png" class title="是南宁吧市">

<h3 id="改写计算器"><a href="#改写计算器" class="headerlink" title="改写计算器"></a>改写计算器</h3><blockquote>
<pre><code>(1).明确两个概念：
                1).UI组件:不能使用任何redux的api，只负责页面的呈现、交互等。
                2).容器组件：负责和redux通信，将结果交给UI组件。
    (2).如何创建一个容器组件————靠react-redux 的 connect函数
                    connect(mapStateToProps,mapDispatchToProps)(UI组件)
                        -mapStateToProps:映射状态，返回值是一个对象
                        -mapDispatchToProps:映射操作状态的方法，返回值是一个对象
    (3).备注1：容器组件中的store是靠props传进去的，而不是在容器组件中直接引入
    (4).备注2：mapDispatchToProps，也可以是一个对象
</code></pre>
</blockquote>
<p>相比之前不用React-redux,除了上述还有如下优点:</p>
<p>1.不需要手动监听Store了，react-redux框架自动帮我们监听</p>
<p>2.不需要在每个容器组件提供store，可以在最上层index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给所有的容器组件传入了store</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>APP组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;/* 给容器组件传递store */&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Count</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>容器组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Count的UI组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CountUI</span> <span class="keyword">from</span> <span class="string">&#x27;../../components/Count&#x27;</span></span><br><span class="line"><span class="comment">//引入action</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">	createIncrementAction,</span><br><span class="line">	createDecrementAction,</span><br><span class="line">	createIncrementAsyncAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入connect用于连接UI组件与redux</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	1.mapStateToProps函数返回的是一个对象；</span></span><br><span class="line"><span class="comment">	2.返回的对象中的key就作为传递给UI组件props的key,value就作为传递给UI组件props的value</span></span><br><span class="line"><span class="comment">	3.mapStateToProps用于传递状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="attr">count</span>:state&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	1.mapDispatchToProps函数返回的是一个对象；</span></span><br><span class="line"><span class="comment">	2.返回的对象中的key就作为传递给UI组件props的key,value就作为传递给UI组件props的value</span></span><br><span class="line"><span class="comment">	3.mapDispatchToProps用于传递操作状态的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapDispatchToProps</span>(<span class="params">dispatch</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="attr">jia</span>:<span class="function"><span class="params">number</span> =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(number)),</span><br><span class="line">		<span class="attr">jian</span>:<span class="function"><span class="params">number</span> =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(number)),</span><br><span class="line">		<span class="attr">jiaAsync</span>:<span class="function">(<span class="params">number,time</span>) =&gt;</span> <span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(number,time)),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect()()创建并暴露一个Count的容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">CountUI</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UI组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰c63&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//加法</span></span><br><span class="line">	increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jia</span>(value*<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//减法</span></span><br><span class="line">	decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jian</span>(value*<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//奇数再加</span></span><br><span class="line">	incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">count</span> % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jia</span>(value*<span class="number">1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//异步加</span></span><br><span class="line">	incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jiaAsync</span>(value*<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">//console.log(&#x27;UI组件接收到的props是&#x27;,this.props);</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进一步精简"><a href="#进一步精简" class="headerlink" title="进一步精简"></a>进一步精简</h3><blockquote>
<p>(1).容器组件和UI组件整合一个文件<br>        (2).无需自己给容器组件传递store，给<App>包裹一个<Provider store="{store}">即可。<br>        (3).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。<br>        (4).mapDispatchToProps也可以简单的写成一个对象<br>        (5).一个组件要和redux“打交道”要经过哪几步？<br>                        (1).定义好UI组件—不暴露<br>                        (2).引入connect生成一个容器组件，并暴露，写法如下：<br>                                connect(<br>                                    state =&gt; ({key:value}), //映射状态<br>                                    {key:xxxxxAction} //映射操作状态的方法<br>                                )(UI组件)<br>                        (3).在UI组件中通过this.props.xxxxxxx读取和操作状态</Provider></App></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>容器组件和UI组件融合</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义UI组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰c63&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//加法</span></span><br><span class="line">	increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jia</span>(value*<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//减法</span></span><br><span class="line">	decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jian</span>(value*<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//奇数再加</span></span><br><span class="line">	incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">count</span> % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jia</span>(value*<span class="number">1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//异步加</span></span><br><span class="line">	incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jiaAsync</span>(value*<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">//console.log(&#x27;UI组件接收到的props是&#x27;,this.props);</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect()()创建并暴露一个Count的容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">	<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state&#125;),</span><br><span class="line"></span><br><span class="line">	<span class="comment">//mapDispatchToProps的一般写法</span></span><br><span class="line">	<span class="comment">/* dispatch =&gt; (&#123;</span></span><br><span class="line"><span class="comment">		jia:number =&gt; dispatch(createIncrementAction(number)),</span></span><br><span class="line"><span class="comment">		jian:number =&gt; dispatch(createDecrementAction(number)),</span></span><br><span class="line"><span class="comment">		jiaAsync:(number,time) =&gt; dispatch(createIncrementAsyncAction(number,time)),</span></span><br><span class="line"><span class="comment">	&#125;) */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//mapDispatchToProps的简写</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">jia</span>:createIncrementAction,</span><br><span class="line">		<span class="attr">jian</span>:createDecrementAction,</span><br><span class="line">		<span class="attr">jiaAsync</span>:createIncrementAsyncAction,</span><br><span class="line">	&#125;</span><br><span class="line">)(<span class="title class_">Count</span>)</span><br></pre></td></tr></table></figure>



<h3 id="两个容组件交互数据案例"><a href="#两个容组件交互数据案例" class="headerlink" title="两个容组件交互数据案例"></a>两个容组件交互数据案例</h3><blockquote>
<p>增加一个Person组件,只要在store存储的状态，count组件和person组件可以访问里面的数据</p>
</blockquote>
<h3 id="坑："><a href="#坑：" class="headerlink" title="坑："></a>坑：</h3><ol>
<li><p>一类特别的函数: 只要是同样的输入(实参)，必定得到同样的输出(返回)</p>
</li>
<li><p>必须遵守以下一些约束 </p>
<ol>
<li><p>不得改写参数数据</p>
</li>
<li><p>不会产生任何副作用，例如网络请求，输入和输出设备</p>
</li>
<li><p>不能调用Date.now()或者Math.random()等不纯的方法 </p>
</li>
</ol>
</li>
<li><p>redux的reducer函数必须是一个纯函数</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">ADD_PERSON</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化人的列表</span></span><br><span class="line"><span class="keyword">const</span> initState = [&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">personReducer</span>(<span class="params">preState=initState,action</span>)&#123;</span><br><span class="line">	<span class="comment">// console.log(&#x27;personReducer@#@#@#&#x27;);</span></span><br><span class="line">	<span class="keyword">const</span> &#123;type,data&#125; = action</span><br><span class="line">	<span class="keyword">switch</span> (type) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="attr">ADD_PERSON</span>: <span class="comment">//若是添加一个人</span></span><br><span class="line">		<span class="comment">//此处不可以这样写，这样会导致preState被改写了，personReducer就不是纯函数了。</span></span><br><span class="line">		<span class="comment">//redux会比较前后preState的地址，尽管数组内容变了，但是地址没变，框架认为preState没改变，还返回原的的数值</span></span><br><span class="line">			<span class="comment">//preState.unshift(data) </span></span><br><span class="line">			<span class="keyword">return</span> [data,...preState]</span><br><span class="line">		<span class="attr">default</span>:</span><br><span class="line">			<span class="keyword">return</span> preState</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>store</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">	该文件专门用于暴露一个store对象，整个应用只有一个store对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入createStore，专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware,combineReducers&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">//引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/count&#x27;</span></span><br><span class="line"><span class="comment">//引入为Person组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> personReducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/person&#x27;</span></span><br><span class="line"><span class="comment">//引入redux-thunk，用于支持异步action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//汇总所有的reducer变为一个总的reducer--这里面的状态就是redux在state里的总状态对象</span></span><br><span class="line"><span class="keyword">const</span> allReducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">	<span class="attr">he</span>:countReducer,</span><br><span class="line">	<span class="attr">rens</span>:personReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(allReducer,<span class="title function_">applyMiddleware</span>(thunk))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>peroson组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	addPerson = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="property">nameNode</span>.<span class="property">value</span></span><br><span class="line">		<span class="keyword">const</span> age = <span class="variable language_">this</span>.<span class="property">ageNode</span>.<span class="property">value</span></span><br><span class="line">		<span class="keyword">const</span> personObj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),name,age&#125;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jiaYiRen</span>(personObj)</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">nameNode</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">ageNode</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Person组件,上方组件求和为&#123;this.props.he&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.nameNode = c&#125; type=&quot;text&quot; placeholder=&quot;输入名字&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span>=&gt;</span>this.ageNode = c&#125; type=&quot;text&quot; placeholder=&quot;输入年龄&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addPerson&#125;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					&#123;</span></span><br><span class="line"><span class="language-xml">						this.props.yiduiren.map((p)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">							return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;p.id&#125;</span>&gt;</span>&#123;p.name&#125;--&#123;p.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						&#125;)</span></span><br><span class="line"><span class="language-xml">					&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">	<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">yiduiren</span>:state.<span class="property">rens</span>,<span class="attr">he</span>:state.<span class="property">he</span>&#125;),<span class="comment">//映射状态，此时的state是redux保存的总状态对象</span></span><br><span class="line">	&#123;<span class="attr">jiaYiRen</span>:createAddPersonAction&#125;<span class="comment">//映射操作状态的方法</span></span><br><span class="line">)(<span class="title class_">Person</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>count组件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义UI组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰c63&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//加法</span></span><br><span class="line">	increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jia</span>(value*<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//减法</span></span><br><span class="line">	decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jian</span>(value*<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//奇数再加</span></span><br><span class="line">	incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">count</span> % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jia</span>(value*<span class="number">1</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//异步加</span></span><br><span class="line">	incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jiaAsync</span>(value*<span class="number">1</span>,<span class="number">500</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">//console.log(&#x27;UI组件接收到的props是&#x27;,this.props);</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Count组件,下方组件总人数为:&#123;this.props.renshu&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前求和为：&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用connect()()创建并暴露一个Count的容器组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(</span><br><span class="line">	<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">		<span class="attr">count</span>:state.<span class="property">he</span>,</span><br><span class="line">		<span class="attr">renshu</span>:state.<span class="property">rens</span>.<span class="property">length</span></span><br><span class="line">	&#125;),</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="attr">jia</span>:createIncrementAction,</span><br><span class="line">		<span class="attr">jian</span>:createDecrementAction,</span><br><span class="line">		<span class="attr">jiaAsync</span>:createIncrementAsyncAction,</span><br><span class="line">	&#125;</span><br><span class="line">)(<span class="title class_">Count</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>处理person的reducer</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化人的列表</span></span><br><span class="line"><span class="keyword">const</span> initState = [&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">personReducer</span>(<span class="params">preState=initState,action</span>)&#123;</span><br><span class="line">	<span class="comment">// console.log(&#x27;personReducer@#@#@#&#x27;);</span></span><br><span class="line">	<span class="keyword">const</span> &#123;type,data&#125; = action</span><br><span class="line">	<span class="keyword">switch</span> (type) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="attr">ADD_PERSON</span>: <span class="comment">//若是添加一个人</span></span><br><span class="line">			<span class="keyword">return</span> [data,...preState]</span><br><span class="line">		<span class="attr">default</span>:</span><br><span class="line">			<span class="keyword">return</span> preState</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>person的action</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建增加一个人的action动作对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createAddPersonAction</span> = personObj =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">ADD_PERSON</span>,<span class="attr">data</span>:personObj&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="工具的使用"><a href="#工具的使用" class="headerlink" title="工具的使用"></a>工具的使用</h3><blockquote>
<p>1.浏览器安装插件</p>
<p>2.项目中进行引入：</p>
<p>​    (1).yarn add redux-devtools-extension</p>
<p>​    (2).store中进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;composeWithDevTools&#125; from &#x27;redux-devtools-extension&#x27;</span><br><span class="line">const store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>打包：npm run build生成build文件夹。</p>
<p>npm i serve -g安装serce。在该项目的build的index.html下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">serve build</span><br></pre></td></tr></table></figure>

<p>就是build文件夹作为根目录运行服务器</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="修改state的两种方法"><a href="#修改state的两种方法" class="headerlink" title="修改state的两种方法"></a>修改state的两种方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	state = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">	add = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="comment">//对象式的setState</span></span><br><span class="line">		<span class="comment">/* //1.获取原来的count值</span></span><br><span class="line"><span class="comment">		const &#123;count&#125; = this.state</span></span><br><span class="line"><span class="comment">		//2.更新状态</span></span><br><span class="line"><span class="comment">		this.setState(&#123;count:count+1&#125;,()=&gt;&#123;</span></span><br><span class="line"><span class="comment">			console.log(this.state.count);</span></span><br><span class="line"><span class="comment">		&#125;)</span></span><br><span class="line"><span class="comment">		//console.log(&#x27;12行的输出&#x27;,this.state.count); //0,react是异步进行的更新，意思就是</span></span><br><span class="line"><span class="comment">		修改完状态之后，还不一定更新 */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//函数式的setState</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>( <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>:state.<span class="property">count</span>+<span class="number">1</span>&#125;))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  (1). setState(stateChange, [callback])——对象式的setState</p>
<p>​      1.stateChange为状态改变对象(该对象可以体现出状态的更改)</p>
<p>​      2.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用</p>
<p>​          </p>
<p>  (2). setState(updater, [callback])——函数式的setState</p>
<p>​      1.updater为返回stateChange对象的函数。</p>
<p>​      2.updater可以接收到state和props。</p>
<p>​      4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。</p>
<p>总结:</p>
<p>​    1.对象式的setState是函数式的setState的简写方式(语法糖)</p>
<p>​    2.使用原则：</p>
<p>​        (1).如果新状态不依赖于原状态 ===&gt; 使用对象方式</p>
<p>​        (2).如果新状态依赖于原状态 ===&gt; 使用函数方式</p>
<p>​        (3).如果需要在setState()执行后获取最新的状态数据, </p>
<p>​          要在第二个callback函数中读取</p>
</blockquote>
<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Login</span> = <span class="title function_">lazy</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;@/pages/Login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>loading.....<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/xxx&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Xxxx&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Suspense</span>&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">lazy</span>(<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./Home&#x27;</span>) )</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title function_">lazy</span>(<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./About&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">Loading</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">									&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">									<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">									<span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">								<span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数式组件访问三大属性"><a href="#函数式组件访问三大属性" class="headerlink" title="函数式组件访问三大属性"></a>函数式组件访问三大属性</h2><h3 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="comment">//console.log(&#x27;Demo&#x27;);</span></span><br><span class="line">	<span class="comment">//返回数据，第一个是state 第二个是更新state的方法</span></span><br><span class="line">	<span class="comment">//每次调用都会走一遍，但是react会把count存储下来，再次执行不会右变为0.而是在上次的基础上+1</span></span><br><span class="line">	<span class="keyword">const</span> [count,setCount] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">	<span class="keyword">const</span> myRef = <span class="title class_">React</span>.<span class="title function_">useRef</span>()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//相当于类式组件的生命周期钩子，</span></span><br><span class="line">	<span class="comment">//第一个参数相当于两个钩子：DidMount和DidUpdate。DidUpdate是否生效取决于第二个数组参数</span></span><br><span class="line">	<span class="comment">//[]写个空数组代表谁也不检测， 回调函数只会在第一次render()后执行。不写的话就代表所有的元素都检测</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//同时第一个参数返回的函数就相当于willUnMount钩子</span></span><br><span class="line">	<span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">			<span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count+<span class="number">1</span> )</span><br><span class="line">		&#125;,<span class="number">1000</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">			<span class="built_in">clearInterval</span>(timer)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,[])</span><br><span class="line"></span><br><span class="line">	<span class="comment">//加的回调</span></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="comment">//setCount(count+1) //第一种写法</span></span><br><span class="line">		<span class="comment">//第二种写法：setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</span></span><br><span class="line">		<span class="title function_">setCount</span>(<span class="function"><span class="params">count</span> =&gt;</span> count+<span class="number">1</span> )</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提示输入的回调</span></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(myRef.<span class="property">current</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//卸载组件的回调</span></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;myRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;unmount&#125;</span>&gt;</span>卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;show&#125;</span>&gt;</span>点我提示数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-React-Hook-Hooks是什么"><a href="#1-React-Hook-Hooks是什么" class="headerlink" title="1. React Hook/Hooks是什么?"></a>1. React Hook/Hooks是什么?</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Hook是React 16.8.0版本增加的新特性/新语法</span><br><span class="line">(2). 可以让你在函数组件中使用 state 以及其他的 React 特性</span><br></pre></td></tr></table></figure>

<h3 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2. 三个常用的Hook"></a>2. 三个常用的Hook</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). State Hook: React.useState()</span><br><span class="line">(2). Effect Hook: React.useEffect()</span><br><span class="line">(3). Ref Hook: React.useRef()</span><br></pre></td></tr></table></figure>

<h3 id="3-State-Hook"><a href="#3-State-Hook" class="headerlink" title="3. State Hook"></a>3. State Hook</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作</span><br><span class="line">(2). 语法: const [xxx, setXxx] = React.useState(initValue)  </span><br><span class="line">(3). useState()说明:</span><br><span class="line">        参数: 第一次初始化指定的值在内部作缓存</span><br><span class="line">        返回值: 包含2个元素的数组, 第1个为内部当前状态值, 第2个为更新状态值的函数</span><br><span class="line">(4). setXxx()2种写法:</span><br><span class="line">        setXxx(newValue): 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值</span><br><span class="line">        setXxx(value =&gt; newValue): 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</span><br></pre></td></tr></table></figure>

<h3 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4. Effect Hook"></a>4. Effect Hook</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</span><br><span class="line">(2). React中的副作用操作:</span><br><span class="line">        发ajax请求数据获取</span><br><span class="line">        设置订阅 / 启动定时器</span><br><span class="line">        手动更改真实DOM</span><br><span class="line">(3). 语法和说明: </span><br><span class="line">        useEffect(() =&gt; &#123; </span><br><span class="line">          // 在此可以执行任何带副作用操作</span><br><span class="line">          return () =&gt; &#123; // 在组件卸载前执行</span><br><span class="line">            // 在此做一些收尾工作, 比如清除定时器/取消订阅等</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, [stateValue]) // 如果指定的是[], 回调函数只会在第一次render()后执行</span><br><span class="line">    </span><br><span class="line">(4). 可以把 useEffect Hook 看做如下三个函数的组合</span><br><span class="line">        componentDidMount()</span><br><span class="line">        componentDidUpdate()</span><br><span class="line">    	componentWillUnmount() </span><br></pre></td></tr></table></figure>

<h3 id="5-Ref-Hook"><a href="#5-Ref-Hook" class="headerlink" title="5. Ref Hook"></a>5. Ref Hook</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1). Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据</span><br><span class="line">(2). 语法: const refContainer = useRef()</span><br><span class="line">(3). 作用:保存标签对象,功能与React.createRef()一样</span><br></pre></td></tr></table></figure>

<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><blockquote>
<p>作用：可以不需要有真实的Dom根标签</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote>
<p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) 创建<span class="title class_">Context</span>容器对象：</span><br><span class="line">	<span class="keyword">const</span> <span class="title class_">XxxContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()  </span><br><span class="line">	</span><br><span class="line"><span class="number">2</span>) 渲染子组时，外面包裹xxxContext.<span class="property">Provider</span>, 通过value属性给后代组件传递数据：</span><br><span class="line">	&lt;xxxContext.<span class="property">Provider</span> value=&#123;数据&#125;&gt;</span><br><span class="line">		子组件</span><br><span class="line">    &lt;/xxxContext.<span class="property">Provider</span>&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>) 后代组件读取数据：</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一种方式:仅适用于类组件 </span></span><br><span class="line">	  <span class="keyword">static</span> contextType = xxxContext  <span class="comment">// 声明接收context</span></span><br><span class="line">	  <span class="variable language_">this</span>.<span class="property">context</span> <span class="comment">// 读取context中的value数据</span></span><br><span class="line">	  </span><br><span class="line">	<span class="comment">//第二种方式: 函数组件与类组件都可以</span></span><br><span class="line">	  &lt;xxxContext.<span class="property">Consumer</span>&gt;</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="function"><span class="params">value</span> =&gt;</span> ( <span class="comment">// value就是context中的value数据</span></span><br><span class="line">	        要显示的内容</span><br><span class="line">	      )</span><br><span class="line">	    &#125;</span><br><span class="line">	  &lt;/xxxContext.<span class="property">Consumer</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><pre><code>在应用开发中一般不用context, 一般都它的封装react插件
</code></pre>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Context对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">Provider</span>,<span class="title class_">Consumer</span>&#125; = <span class="title class_">MyContext</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	state = &#123;<span class="attr">username</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> &#123;username,age&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h4</span>&gt;</span>我的用户名是:&#123;username&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;/* B组件和他的子组件都能收到 */&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;username,age&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					<span class="tag">&lt;<span class="name">B</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是B组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">C</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* class C extends Component &#123;</span></span><br><span class="line"><span class="comment">	//声明接收context</span></span><br><span class="line"><span class="comment">	static contextType = MyContext</span></span><br><span class="line"><span class="comment">	render() &#123;</span></span><br><span class="line"><span class="comment">		const &#123;username,age&#125; = this.context</span></span><br><span class="line"><span class="comment">		return (</span></span><br><span class="line"><span class="comment">			&lt;div className=&quot;grand&quot;&gt;</span></span><br><span class="line"><span class="comment">				&lt;h3&gt;我是C组件&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">				&lt;h4&gt;我从A组件接收到的用户名:&#123;username&#125;,年龄是&#123;age&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="comment">			&lt;/div&gt;</span></span><br><span class="line"><span class="comment">		)</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="comment">// 函数式组件的接收方式(当然类式组件也可以用)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;grand&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是C组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">h4</span>&gt;</span>我从A组件接收到的用户名:</span></span><br><span class="line"><span class="language-xml">				&#123;/* 模板字符串,&#123;里面全是js，写字符串包含变量就这么写&#125; */&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;value =&gt; `$&#123;value.username&#125;,年龄是$&#123;value.age&#125;`&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件优化"><a href="#组件优化" class="headerlink" title="组件优化"></a>组件优化</h2><h3 id="Component的2个问题"><a href="#Component的2个问题" class="headerlink" title="Component的2个问题"></a>Component的2个问题</h3><blockquote>
<ol>
<li><p>只要执行setState(),即使不改变状态数据, 组件也会重新render()</p>
</li>
<li><p>只当前组件重新render(), 就会自动重新render子组件 ==&gt; 效率低</p>
</li>
</ol>
</blockquote>
<h3 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h3><blockquote>
<p> 只有当组件的state或props数据发生改变时才重新render()</p>
</blockquote>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote>
<p> Component中的shouldComponentUpdate()总是返回true</p>
</blockquote>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre><code>办法1: 
    重写shouldComponentUpdate()方法
    比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false
办法2:  
    使用PureComponent
    PureComponent重写了shouldComponentUpdate(), 只有state或props数据有变化才返回true
    注意: 
        只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false  
        不要直接修改state数据, 而是要产生新数据
项目中一般使用PureComponent来优化
</code></pre>
<h3 id="事例-1"><a href="#事例-1" class="headerlink" title="事例"></a>事例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">	state = &#123;<span class="attr">carName</span>:<span class="string">&quot;奔驰c36&quot;</span>,<span class="attr">stus</span>:[<span class="string">&#x27;小张&#x27;</span>,<span class="string">&#x27;小李&#x27;</span>,<span class="string">&#x27;小王&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">	addStu = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="comment">/* const &#123;stus&#125; = this.state</span></span><br><span class="line"><span class="comment">		stus.unshift(&#x27;小刘&#x27;)</span></span><br><span class="line"><span class="comment">		this.setState(&#123;stus&#125;) */</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> &#123;stus&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">stus</span>:[<span class="string">&#x27;小刘&#x27;</span>,...stus]&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	changeCar = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">		<span class="comment">//this.setState(&#123;carName:&#x27;迈巴赫&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> obj = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		obj.<span class="property">carName</span> = <span class="string">&#x27;迈巴赫&#x27;</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(obj === <span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">setState</span>(obj)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* shouldComponentUpdate(nextProps,nextState)&#123;</span></span><br><span class="line"><span class="comment">		// console.log(this.props,this.state); //目前的props和state</span></span><br><span class="line"><span class="comment">		// console.log(nextProps,nextState); //接下要变化的目标props，目标state</span></span><br><span class="line"><span class="comment">		return !this.state.carName === nextState.carName</span></span><br><span class="line"><span class="comment">	&#125; */</span></span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Parent---render&#x27;</span>);</span><br><span class="line">		<span class="keyword">const</span> &#123;carName&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Parent组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;this.state.stus&#125;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>我的车名字是：&#123;carName&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>点我换车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addStu&#125;</span>&gt;</span>添加一个小刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">Child</span> <span class="attr">carName</span>=<span class="string">&quot;奥拓&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* shouldComponentUpdate(nextProps,nextState)&#123;</span></span><br><span class="line"><span class="comment">		console.log(this.props,this.state); //目前的props和state</span></span><br><span class="line"><span class="comment">		console.log(nextProps,nextState); //接下要变化的目标props，目标state</span></span><br><span class="line"><span class="comment">		return !this.props.carName === nextProps.carName</span></span><br><span class="line"><span class="comment">	&#125; */</span></span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Child---render&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Child组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>我接到的车是：&#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="render属性"><a href="#render属性" class="headerlink" title="render属性"></a>render属性</h2><h3 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h3><pre><code>Vue中: 
    使用slot技术, 也就是通过组件标签体传入结构  &lt;AA&gt;&lt;BB/&gt;&lt;/AA&gt;
React中:
    使用children props: 通过组件标签体传入结构
    使用render props: 通过组件标签属性传入结构, 一般用render函数属性
</code></pre>
<h3 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a>children props</h3><pre><code>&lt;A&gt;
  &lt;B&gt;xxxx&lt;/B&gt;
&lt;/A&gt;
&#123;this.props.children&#125;
问题: 如果B组件需要A组件内的数据, ==&gt; 做不到 
</code></pre>
<h3 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h3><pre><code>&lt;A render=&#123;(data) =&gt; &lt;C data=&#123;data&#125;&gt;&lt;/C&gt;&#125;&gt;&lt;/A&gt;
A组件: &#123;this.props.render(内部state数据)&#125;
C组件: 读取A组件传入的数据显示 &#123;this.props.data&#125; 
</code></pre>
<h3 id="事例-2"><a href="#事例-2" class="headerlink" title="事例"></a>事例</h3><blockquote>
<p>不仅可以传递参数的优点，还可以随时替换子组件，类似于Vue的插槽技术</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Parent组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;/* <span class="tag">&lt;<span class="name">A</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">A</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">				&#123;/* 给A标签的render属性传入一个函数，该函数形参为name,返回为C标签(这个标签名字随便叫啥都行) */&#125;</span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">A</span> <span class="attr">render</span>=<span class="string">&#123;(name)</span>=&gt;</span><span class="tag">&lt;<span class="name">C</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;/</span>&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	state = &#123;<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>&#125;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">		<span class="keyword">const</span> &#123;name&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;/* &#123;this.props.children&#125; */&#125;</span></span><br><span class="line"><span class="language-xml">				&#123;this.props.render(name)&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B--render&#x27;</span>);</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是B组件,&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="边界错误"><a href="#边界错误" class="headerlink" title="边界错误"></a>边界错误</h2><h3 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h3><p>错误边界：用来捕获后代组件错误，渲染出备用页面</p>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p>
<h3 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h3><p>getDerivedStateFromError配合componentDidCatch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生命周期函数，一旦后台组件报错，就会触发</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    <span class="comment">// 在render之前触发</span></span><br><span class="line">    <span class="comment">// 返回新的state</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">hasError</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentDidCatch</span>(<span class="params">error, info</span>) &#123;</span><br><span class="line">    <span class="comment">// 统计页面的错误。发送请求发送到后台去</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事例-3"><a href="#事例-3" class="headerlink" title="事例"></a>事例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">	state = &#123;</span><br><span class="line">		<span class="attr">hasError</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//用于标识子组件是否产生错误</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当Parent的子组件出现报错时候，会触发getDerivedStateFromError调用，并携带错误信息</span></span><br><span class="line">	<span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@@@&#x27;</span>,error);</span><br><span class="line">		<span class="keyword">return</span> &#123;<span class="attr">hasError</span>:error&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">componentDidCatch</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;此处统计错误，反馈给服务器，用于通知编码人员进行bug的解决&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Parent组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;this.state.hasError ? <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前网络不稳定，稍后再试<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> : <span class="tag">&lt;<span class="name">Child</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		<span class="attr">users</span>:[</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">			&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;peiqi&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">		]</span><br><span class="line">		<span class="comment">// users:&#x27;abc&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Child组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">				&#123;</span></span><br><span class="line"><span class="language-xml">					this.state.users.map((userObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">						return <span class="tag">&lt;<span class="name">h4</span> <span class="attr">key</span>=<span class="string">&#123;userObj.id&#125;</span>&gt;</span>&#123;userObj.name&#125;----&#123;userObj.age&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">					&#125;)</span></span><br><span class="line"><span class="language-xml">				&#125;</span></span><br><span class="line"><span class="language-xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组件通信方式总结"><a href="#组件通信方式总结" class="headerlink" title="组件通信方式总结"></a>组件通信方式总结</h2><h4 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h4><pre><code>    props：
        (1).children props
        (2).render props
    消息订阅-发布：
        pubs-sub、event等等
    集中式管理：
        redux、dva等等
    conText:
        生产者-消费者模式
</code></pre>
<h4 id="组件间的关系"><a href="#组件间的关系" class="headerlink" title="组件间的关系"></a>组件间的关系</h4><pre><code>    父子组件：props
    兄弟组件(非嵌套组件)：消息订阅-发布、集中式管理
    祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(用的少)
</code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
</search>
